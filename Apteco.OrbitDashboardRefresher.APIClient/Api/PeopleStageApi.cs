/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Apteco.OrbitDashboardRefresher.APIClient.Client;
using Apteco.OrbitDashboardRefresher.APIClient.Model;

namespace Apteco.OrbitDashboardRefresher.APIClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPeopleStageApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the status of a running action job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being actioned</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ActionJobDetail</returns>
        ActionJobDetail PeopleStageActionJob (string dataViewName, string systemName, string elementId, int? jobId);

        /// <summary>
        /// Get the status of a running action job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being actioned</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of ActionJobDetail</returns>
        ApiResponse<ActionJobDetail> PeopleStageActionJobWithHttpInfo (string dataViewName, string systemName, string elementId, int? jobId);
        /// <summary>
        /// Cancel a running get channel messages job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns></returns>
        void PeopleStageCancelChannelMessagesJob (string dataViewName, string systemName, string channelId, int? jobId);

        /// <summary>
        /// Cancel a running get channel messages job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PeopleStageCancelChannelMessagesJobWithHttpInfo (string dataViewName, string systemName, string channelId, int? jobId);
        /// <summary>
        /// Cancel a running test channel login job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns></returns>
        void PeopleStageCancelChannelTestLoginJob (string dataViewName, string systemName, string channelId, int? jobId);

        /// <summary>
        /// Cancel a running test channel login job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PeopleStageCancelChannelTestLoginJobWithHttpInfo (string dataViewName, string systemName, string channelId, int? jobId);
        /// <summary>
        /// Cancel a running check in/out element job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being checked in or out</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns></returns>
        void PeopleStageCancelElementCheckInOutJob (string dataViewName, string systemName, string elementId, int? jobId);

        /// <summary>
        /// Cancel a running check in/out element job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being checked in or out</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PeopleStageCancelElementCheckInOutJobWithHttpInfo (string dataViewName, string systemName, string elementId, int? jobId);
        /// <summary>
        /// Cancel a running publish element job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being published</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns></returns>
        void PeopleStageCancelElementPublishJob (string dataViewName, string systemName, string elementId, int? jobId);

        /// <summary>
        /// Cancel a running publish element job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being published</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PeopleStageCancelElementPublishJobWithHttpInfo (string dataViewName, string systemName, string elementId, int? jobId);
        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Cancel a running modify channels job
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel.</param>
        /// <returns></returns>
        void PeopleStageCancelModifyChannelsJob (string dataViewName, string systemName, int? jobId);

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Cancel a running modify channels job
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PeopleStageCancelModifyChannelsJobWithHttpInfo (string dataViewName, string systemName, int? jobId);
        /// <summary>
        /// Get the status of a running get messages for channel job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ChannelGetMessagesJobDetail</returns>
        ChannelGetMessagesJobDetail PeopleStageChannelMessagesJob (string dataViewName, string systemName, string channelId, int? jobId);

        /// <summary>
        /// Get the status of a running get messages for channel job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of ChannelGetMessagesJobDetail</returns>
        ApiResponse<ChannelGetMessagesJobDetail> PeopleStageChannelMessagesJobWithHttpInfo (string dataViewName, string systemName, string channelId, int? jobId);
        /// <summary>
        /// Get the status of a running test login for channel job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ChannelTestLoginJobDetail</returns>
        ChannelTestLoginJobDetail PeopleStageChannelTestLoginJob (string dataViewName, string systemName, string channelId, int? jobId);

        /// <summary>
        /// Get the status of a running test login for channel job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of ChannelTestLoginJobDetail</returns>
        ApiResponse<ChannelTestLoginJobDetail> PeopleStageChannelTestLoginJobWithHttpInfo (string dataViewName, string systemName, string channelId, int? jobId);
        /// <summary>
        /// Create a job to send a particular PeopleStage action
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being actioned</param>
        /// <returns>ActionJobDetail</returns>
        ActionJobDetail PeopleStageCreateActionJob (string dataViewName, string systemName, string elementId);

        /// <summary>
        /// Create a job to send a particular PeopleStage action
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being actioned</param>
        /// <returns>ApiResponse of ActionJobDetail</returns>
        ApiResponse<ActionJobDetail> PeopleStageCreateActionJobWithHttpInfo (string dataViewName, string systemName, string elementId);
        /// <summary>
        /// Create a job to return the messages for a particular PeopleStage channel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <returns>ChannelGetMessagesJobDetail</returns>
        ChannelGetMessagesJobDetail PeopleStageCreateChannelMessagesJob (string dataViewName, string systemName, string channelId);

        /// <summary>
        /// Create a job to return the messages for a particular PeopleStage channel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <returns>ApiResponse of ChannelGetMessagesJobDetail</returns>
        ApiResponse<ChannelGetMessagesJobDetail> PeopleStageCreateChannelMessagesJobWithHttpInfo (string dataViewName, string systemName, string channelId);
        /// <summary>
        /// Create a job to test login for a particular PeopleStage channel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="channelLoginDetails">Any overrides for the login details for the PeopleStage channel to view (optional)</param>
        /// <returns>ChannelTestLoginJobDetail</returns>
        ChannelTestLoginJobDetail PeopleStageCreateChannelTestLoginJob (string dataViewName, string systemName, string channelId, ChannelLoginDetails channelLoginDetails = null);

        /// <summary>
        /// Create a job to test login for a particular PeopleStage channel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="channelLoginDetails">Any overrides for the login details for the PeopleStage channel to view (optional)</param>
        /// <returns>ApiResponse of ChannelTestLoginJobDetail</returns>
        ApiResponse<ChannelTestLoginJobDetail> PeopleStageCreateChannelTestLoginJobWithHttpInfo (string dataViewName, string systemName, string channelId, ChannelLoginDetails channelLoginDetails = null);
        /// <summary>
        /// Create a job to check in or out a particular PeopleStage element (campaign or area)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to check in or out</param>
        /// <param name="checkInOutRequest">Details of whether to check in or check out the element (optional)</param>
        /// <returns>ElementCheckInOutJobDetail</returns>
        ElementCheckInOutJobDetail PeopleStageCreateElementCheckInOutJob (string dataViewName, string systemName, string elementId, CheckInOutRequest checkInOutRequest = null);

        /// <summary>
        /// Create a job to check in or out a particular PeopleStage element (campaign or area)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to check in or out</param>
        /// <param name="checkInOutRequest">Details of whether to check in or check out the element (optional)</param>
        /// <returns>ApiResponse of ElementCheckInOutJobDetail</returns>
        ApiResponse<ElementCheckInOutJobDetail> PeopleStageCreateElementCheckInOutJobWithHttpInfo (string dataViewName, string systemName, string elementId, CheckInOutRequest checkInOutRequest = null);
        /// <summary>
        /// Create a job to publish a particular PeopleStage element (campaign or area)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to publish</param>
        /// <returns>ElementPublishJobDetail</returns>
        ElementPublishJobDetail PeopleStageCreateElementPublishJob (string dataViewName, string systemName, string elementId);

        /// <summary>
        /// Create a job to publish a particular PeopleStage element (campaign or area)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to publish</param>
        /// <returns>ApiResponse of ElementPublishJobDetail</returns>
        ApiResponse<ElementPublishJobDetail> PeopleStageCreateElementPublishJobWithHttpInfo (string dataViewName, string systemName, string elementId);
        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Create a job to modify PeopleStage channels
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelDetails">Details for the channels to modify (optional)</param>
        /// <returns>ModifyChannelsJobDetail</returns>
        ModifyChannelsJobDetail PeopleStageCreateModifyChannelsJob (string dataViewName, string systemName, ModifyItemsModifyChannel channelDetails = null);

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Create a job to modify PeopleStage channels
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelDetails">Details for the channels to modify (optional)</param>
        /// <returns>ApiResponse of ModifyChannelsJobDetail</returns>
        ApiResponse<ModifyChannelsJobDetail> PeopleStageCreateModifyChannelsJobWithHttpInfo (string dataViewName, string systemName, ModifyItemsModifyChannel channelDetails = null);
        /// <summary>
        /// Get the status of a running check in/out element job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to check in or out</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ElementCheckInOutJobDetail</returns>
        ElementCheckInOutJobDetail PeopleStageElementCheckInOutJob (string dataViewName, string systemName, string elementId, int? jobId);

        /// <summary>
        /// Get the status of a running check in/out element job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to check in or out</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of ElementCheckInOutJobDetail</returns>
        ApiResponse<ElementCheckInOutJobDetail> PeopleStageElementCheckInOutJobWithHttpInfo (string dataViewName, string systemName, string elementId, int? jobId);
        /// <summary>
        /// Get the status of a running publish element job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to publish</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ElementPublishJobDetail</returns>
        ElementPublishJobDetail PeopleStageElementPublishJob (string dataViewName, string systemName, string elementId, int? jobId);

        /// <summary>
        /// Get the status of a running publish element job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to publish</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of ElementPublishJobDetail</returns>
        ApiResponse<ElementPublishJobDetail> PeopleStageElementPublishJobWithHttpInfo (string dataViewName, string systemName, string elementId, int? jobId);
        /// <summary>
        /// Returns the details of the channel info (inc parameters) needed for broadcasters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>List&lt;ChannelInfo&gt;</returns>
        List<ChannelInfo> PeopleStageGetBroadcastParameters (string dataViewName, string systemName);

        /// <summary>
        /// Returns the details of the channel info (inc parameters) needed for broadcasters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>ApiResponse of List&lt;ChannelInfo&gt;</returns>
        ApiResponse<List<ChannelInfo>> PeopleStageGetBroadcastParametersWithHttpInfo (string dataViewName, string systemName);
        /// <summary>
        /// Returns the details of a particular PeopleStage channel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <returns>ChannelDetail</returns>
        ChannelDetail PeopleStageGetPeopleStageChannel (string dataViewName, string systemName, string channelId);

        /// <summary>
        /// Returns the details of a particular PeopleStage channel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <returns>ApiResponse of ChannelDetail</returns>
        ApiResponse<ChannelDetail> PeopleStageGetPeopleStageChannelWithHttpInfo (string dataViewName, string systemName, string channelId);
        /// <summary>
        /// Returns the list of PeopleStage channels available in this FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsChannelSummary</returns>
        PagedResultsChannelSummary PeopleStageGetPeopleStageChannels (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of PeopleStage channels available in this FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsChannelSummary</returns>
        ApiResponse<PagedResultsChannelSummary> PeopleStageGetPeopleStageChannelsWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the details of a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ElementDetail</returns>
        ElementDetail PeopleStageGetPeopleStageElement (string dataViewName, string systemName, string elementId);

        /// <summary>
        /// Returns the details of a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ApiResponse of ElementDetail</returns>
        ApiResponse<ElementDetail> PeopleStageGetPeopleStageElementWithHttpInfo (string dataViewName, string systemName, string elementId);
        /// <summary>
        /// Returns statistics for the total number of communications sent per channel for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ChannelStatistics</returns>
        ChannelStatistics PeopleStageGetPeopleStageElementChannelStatistics (string dataViewName, string systemName, string elementId);

        /// <summary>
        /// Returns statistics for the total number of communications sent per channel for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ApiResponse of ChannelStatistics</returns>
        ApiResponse<ChannelStatistics> PeopleStageGetPeopleStageElementChannelStatisticsWithHttpInfo (string dataViewName, string systemName, string elementId);
        /// <summary>
        /// Returns the list of children for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsElementSummary</returns>
        PagedResultsElementSummary PeopleStageGetPeopleStageElementChildren (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of children for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsElementSummary</returns>
        ApiResponse<PagedResultsElementSummary> PeopleStageGetPeopleStageElementChildrenWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns statistics for the number of communications sent over time for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>CommunicationStatistics</returns>
        CommunicationStatistics PeopleStageGetPeopleStageElementCommunicationStatistics (string dataViewName, string systemName, string elementId);

        /// <summary>
        /// Returns statistics for the number of communications sent over time for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ApiResponse of CommunicationStatistics</returns>
        ApiResponse<CommunicationStatistics> PeopleStageGetPeopleStageElementCommunicationStatisticsWithHttpInfo (string dataViewName, string systemName, string elementId);
        /// <summary>
        /// Returns the completed actions and deliveries together for a PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are CampaignDescription, ElementDescription, TimeStarted, TimeFinished, NumberOfErrors, NumberOfRecipients, JobStatus. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are CampaignDescription, ElementDescription, TimeStarted, TimeFinished, NumberOfErrors, NumberOfRecipients, JobStatus. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsActionReport</returns>
        PagedResultsActionReport PeopleStageGetPeopleStageElementCompleted (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the completed actions and deliveries together for a PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are CampaignDescription, ElementDescription, TimeStarted, TimeFinished, NumberOfErrors, NumberOfRecipients, JobStatus. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are CampaignDescription, ElementDescription, TimeStarted, TimeFinished, NumberOfErrors, NumberOfRecipients, JobStatus. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsActionReport</returns>
        ApiResponse<PagedResultsActionReport> PeopleStageGetPeopleStageElementCompletedWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the deliveries for a PeopleStage element - the delivery actions of the element that have run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, TimeStarted, TimeFinished, NumberOfErrors. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, TimeStarted, TimeFinished, NumberOfErrors. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsDeliveryReport</returns>
        PagedResultsDeliveryReport PeopleStageGetPeopleStageElementCompletedDeliveries (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the deliveries for a PeopleStage element - the delivery actions of the element that have run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, TimeStarted, TimeFinished, NumberOfErrors. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, TimeStarted, TimeFinished, NumberOfErrors. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsDeliveryReport</returns>
        ApiResponse<PagedResultsDeliveryReport> PeopleStageGetPeopleStageElementCompletedDeliveriesWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the actions for a PeopleStage element - the parts of the element that have run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsStepReport</returns>
        PagedResultsStepReport PeopleStageGetPeopleStageElementCompletedSteps (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the actions for a PeopleStage element - the parts of the element that have run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsStepReport</returns>
        ApiResponse<PagedResultsStepReport> PeopleStageGetPeopleStageElementCompletedStepsWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns statistics for the total number of responses received per channel for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ResponseStatistics</returns>
        ResponseStatistics PeopleStageGetPeopleStageElementResponseStatistics (string dataViewName, string systemName, string elementId);

        /// <summary>
        /// Returns statistics for the total number of responses received per channel for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ApiResponse of ResponseStatistics</returns>
        ApiResponse<ResponseStatistics> PeopleStageGetPeopleStageElementResponseStatisticsWithHttpInfo (string dataViewName, string systemName, string elementId);
        /// <summary>
        /// Returns the actions for a PeopleStage element - the parts of the element that are running
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsActionReport</returns>
        PagedResultsActionReport PeopleStageGetPeopleStageElementRunning (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the actions for a PeopleStage element - the parts of the element that are running
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsActionReport</returns>
        ApiResponse<PagedResultsActionReport> PeopleStageGetPeopleStageElementRunningWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the deliveries for a PeopleStage element - the delivery actions of the element that are running
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsDeliveryReport</returns>
        PagedResultsDeliveryReport PeopleStageGetPeopleStageElementRunningDeliveries (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the deliveries for a PeopleStage element - the delivery actions of the element that are running
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsDeliveryReport</returns>
        ApiResponse<PagedResultsDeliveryReport> PeopleStageGetPeopleStageElementRunningDeliveriesWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the actions for a PeopleStage element - the parts of the element that are running
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsStepReport</returns>
        PagedResultsStepReport PeopleStageGetPeopleStageElementRunningSteps (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the actions for a PeopleStage element - the parts of the element that are running
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsStepReport</returns>
        ApiResponse<PagedResultsStepReport> PeopleStageGetPeopleStageElementRunningStepsWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the status for a PeopleStage element, where status information is available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ElementStatus</returns>
        ElementStatus PeopleStageGetPeopleStageElementStatus (string dataViewName, string systemName, string elementId);

        /// <summary>
        /// Returns the status for a PeopleStage element, where status information is available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ApiResponse of ElementStatus</returns>
        ApiResponse<ElementStatus> PeopleStageGetPeopleStageElementStatusWithHttpInfo (string dataViewName, string systemName, string elementId);
        /// <summary>
        /// Returns the status for all the descendant elements of a PeopleStage element where status information is available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsElementStatus</returns>
        PagedResultsElementStatus PeopleStageGetPeopleStageElementStatusForDescendants (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the status for all the descendant elements of a PeopleStage element where status information is available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsElementStatus</returns>
        ApiResponse<PagedResultsElementStatus> PeopleStageGetPeopleStageElementStatusForDescendantsWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the list of PeopleStage elements available in this FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsElementSummary</returns>
        PagedResultsElementSummary PeopleStageGetPeopleStageElements (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of PeopleStage elements available in this FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsElementSummary</returns>
        ApiResponse<PagedResultsElementSummary> PeopleStageGetPeopleStageElementsWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>RangeStatistics</returns>
        RangeStatistics PeopleStageGetPeopleStageRangeStatisticsForDescendantsSync (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null, string dateRange = null);

        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>ApiResponse of RangeStatistics</returns>
        ApiResponse<RangeStatistics> PeopleStageGetPeopleStageRangeStatisticsForDescendantsSyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null, string dateRange = null);
        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>RangeStatistics</returns>
        RangeStatistics PeopleStageGetPeopleStageRangeStatisticsSync (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string dateRange = null);

        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>ApiResponse of RangeStatistics</returns>
        ApiResponse<RangeStatistics> PeopleStageGetPeopleStageRangeStatisticsSyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string dateRange = null);
        /// <summary>
        /// Returns details of the PeopleStage system for the given system name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>PeopleStageSystemDetail</returns>
        PeopleStageSystemDetail PeopleStageGetPeopleStageSystem (string dataViewName, string systemName);

        /// <summary>
        /// Returns details of the PeopleStage system for the given system name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>ApiResponse of PeopleStageSystemDetail</returns>
        ApiResponse<PeopleStageSystemDetail> PeopleStageGetPeopleStageSystemWithHttpInfo (string dataViewName, string systemName);
        /// <summary>
        /// Returns the list of systems configured to support PeopleStage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are SystemName, ProgrammeDescription. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are SystemName, ProgrammeDescription. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsPeopleStageSystemSummary</returns>
        PagedResultsPeopleStageSystemSummary PeopleStageGetPeopleStageSystems (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of systems configured to support PeopleStage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are SystemName, ProgrammeDescription. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are SystemName, ProgrammeDescription. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsPeopleStageSystemSummary</returns>
        ApiResponse<PagedResultsPeopleStageSystemSummary> PeopleStageGetPeopleStageSystemsWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Requires OrbitAdmin: Modify PeopleStage channels
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelDetails">Details for the channels to modify (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <returns>PagedResultsModifyChannelDetailResults</returns>
        PagedResultsModifyChannelDetailResults PeopleStageModifyChannels (string dataViewName, string systemName, ModifyItemsModifyChannel channelDetails = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Requires OrbitAdmin: Modify PeopleStage channels
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelDetails">Details for the channels to modify (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <returns>ApiResponse of PagedResultsModifyChannelDetailResults</returns>
        ApiResponse<PagedResultsModifyChannelDetailResults> PeopleStageModifyChannelsWithHttpInfo (string dataViewName, string systemName, ModifyItemsModifyChannel channelDetails = null, int? timeoutInSeconds = null);
        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Get the status of a running modify channels request
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ModifyChannelsJobDetail</returns>
        ModifyChannelsJobDetail PeopleStageModifyChannelsJob (string dataViewName, string systemName, int? jobId);

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Get the status of a running modify channels request
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of ModifyChannelsJobDetail</returns>
        ApiResponse<ModifyChannelsJobDetail> PeopleStageModifyChannelsJobWithHttpInfo (string dataViewName, string systemName, int? jobId);
        /// <summary>
        /// Create a job to refresh the peoplestage diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns></returns>
        void PeopleStageRefreshPeopleStageDiagram (string dataViewName, string systemName);

        /// <summary>
        /// Create a job to refresh the peoplestage diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PeopleStageRefreshPeopleStageDiagramWithHttpInfo (string dataViewName, string systemName);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get the status of a running action job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being actioned</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ActionJobDetail</returns>
        System.Threading.Tasks.Task<ActionJobDetail> PeopleStageActionJobAsync (string dataViewName, string systemName, string elementId, int? jobId);

        /// <summary>
        /// Get the status of a running action job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being actioned</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (ActionJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionJobDetail>> PeopleStageActionJobAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? jobId);
        /// <summary>
        /// Cancel a running get channel messages job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PeopleStageCancelChannelMessagesJobAsync (string dataViewName, string systemName, string channelId, int? jobId);

        /// <summary>
        /// Cancel a running get channel messages job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PeopleStageCancelChannelMessagesJobAsyncWithHttpInfo (string dataViewName, string systemName, string channelId, int? jobId);
        /// <summary>
        /// Cancel a running test channel login job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PeopleStageCancelChannelTestLoginJobAsync (string dataViewName, string systemName, string channelId, int? jobId);

        /// <summary>
        /// Cancel a running test channel login job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PeopleStageCancelChannelTestLoginJobAsyncWithHttpInfo (string dataViewName, string systemName, string channelId, int? jobId);
        /// <summary>
        /// Cancel a running check in/out element job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being checked in or out</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PeopleStageCancelElementCheckInOutJobAsync (string dataViewName, string systemName, string elementId, int? jobId);

        /// <summary>
        /// Cancel a running check in/out element job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being checked in or out</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PeopleStageCancelElementCheckInOutJobAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? jobId);
        /// <summary>
        /// Cancel a running publish element job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being published</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PeopleStageCancelElementPublishJobAsync (string dataViewName, string systemName, string elementId, int? jobId);

        /// <summary>
        /// Cancel a running publish element job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being published</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PeopleStageCancelElementPublishJobAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? jobId);
        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Cancel a running modify channels job
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PeopleStageCancelModifyChannelsJobAsync (string dataViewName, string systemName, int? jobId);

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Cancel a running modify channels job
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PeopleStageCancelModifyChannelsJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId);
        /// <summary>
        /// Get the status of a running get messages for channel job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ChannelGetMessagesJobDetail</returns>
        System.Threading.Tasks.Task<ChannelGetMessagesJobDetail> PeopleStageChannelMessagesJobAsync (string dataViewName, string systemName, string channelId, int? jobId);

        /// <summary>
        /// Get the status of a running get messages for channel job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (ChannelGetMessagesJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelGetMessagesJobDetail>> PeopleStageChannelMessagesJobAsyncWithHttpInfo (string dataViewName, string systemName, string channelId, int? jobId);
        /// <summary>
        /// Get the status of a running test login for channel job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ChannelTestLoginJobDetail</returns>
        System.Threading.Tasks.Task<ChannelTestLoginJobDetail> PeopleStageChannelTestLoginJobAsync (string dataViewName, string systemName, string channelId, int? jobId);

        /// <summary>
        /// Get the status of a running test login for channel job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (ChannelTestLoginJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelTestLoginJobDetail>> PeopleStageChannelTestLoginJobAsyncWithHttpInfo (string dataViewName, string systemName, string channelId, int? jobId);
        /// <summary>
        /// Create a job to send a particular PeopleStage action
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being actioned</param>
        /// <returns>Task of ActionJobDetail</returns>
        System.Threading.Tasks.Task<ActionJobDetail> PeopleStageCreateActionJobAsync (string dataViewName, string systemName, string elementId);

        /// <summary>
        /// Create a job to send a particular PeopleStage action
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being actioned</param>
        /// <returns>Task of ApiResponse (ActionJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionJobDetail>> PeopleStageCreateActionJobAsyncWithHttpInfo (string dataViewName, string systemName, string elementId);
        /// <summary>
        /// Create a job to return the messages for a particular PeopleStage channel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <returns>Task of ChannelGetMessagesJobDetail</returns>
        System.Threading.Tasks.Task<ChannelGetMessagesJobDetail> PeopleStageCreateChannelMessagesJobAsync (string dataViewName, string systemName, string channelId);

        /// <summary>
        /// Create a job to return the messages for a particular PeopleStage channel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <returns>Task of ApiResponse (ChannelGetMessagesJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelGetMessagesJobDetail>> PeopleStageCreateChannelMessagesJobAsyncWithHttpInfo (string dataViewName, string systemName, string channelId);
        /// <summary>
        /// Create a job to test login for a particular PeopleStage channel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="channelLoginDetails">Any overrides for the login details for the PeopleStage channel to view (optional)</param>
        /// <returns>Task of ChannelTestLoginJobDetail</returns>
        System.Threading.Tasks.Task<ChannelTestLoginJobDetail> PeopleStageCreateChannelTestLoginJobAsync (string dataViewName, string systemName, string channelId, ChannelLoginDetails channelLoginDetails = null);

        /// <summary>
        /// Create a job to test login for a particular PeopleStage channel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="channelLoginDetails">Any overrides for the login details for the PeopleStage channel to view (optional)</param>
        /// <returns>Task of ApiResponse (ChannelTestLoginJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelTestLoginJobDetail>> PeopleStageCreateChannelTestLoginJobAsyncWithHttpInfo (string dataViewName, string systemName, string channelId, ChannelLoginDetails channelLoginDetails = null);
        /// <summary>
        /// Create a job to check in or out a particular PeopleStage element (campaign or area)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to check in or out</param>
        /// <param name="checkInOutRequest">Details of whether to check in or check out the element (optional)</param>
        /// <returns>Task of ElementCheckInOutJobDetail</returns>
        System.Threading.Tasks.Task<ElementCheckInOutJobDetail> PeopleStageCreateElementCheckInOutJobAsync (string dataViewName, string systemName, string elementId, CheckInOutRequest checkInOutRequest = null);

        /// <summary>
        /// Create a job to check in or out a particular PeopleStage element (campaign or area)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to check in or out</param>
        /// <param name="checkInOutRequest">Details of whether to check in or check out the element (optional)</param>
        /// <returns>Task of ApiResponse (ElementCheckInOutJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ElementCheckInOutJobDetail>> PeopleStageCreateElementCheckInOutJobAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, CheckInOutRequest checkInOutRequest = null);
        /// <summary>
        /// Create a job to publish a particular PeopleStage element (campaign or area)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to publish</param>
        /// <returns>Task of ElementPublishJobDetail</returns>
        System.Threading.Tasks.Task<ElementPublishJobDetail> PeopleStageCreateElementPublishJobAsync (string dataViewName, string systemName, string elementId);

        /// <summary>
        /// Create a job to publish a particular PeopleStage element (campaign or area)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to publish</param>
        /// <returns>Task of ApiResponse (ElementPublishJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ElementPublishJobDetail>> PeopleStageCreateElementPublishJobAsyncWithHttpInfo (string dataViewName, string systemName, string elementId);
        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Create a job to modify PeopleStage channels
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelDetails">Details for the channels to modify (optional)</param>
        /// <returns>Task of ModifyChannelsJobDetail</returns>
        System.Threading.Tasks.Task<ModifyChannelsJobDetail> PeopleStageCreateModifyChannelsJobAsync (string dataViewName, string systemName, ModifyItemsModifyChannel channelDetails = null);

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Create a job to modify PeopleStage channels
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelDetails">Details for the channels to modify (optional)</param>
        /// <returns>Task of ApiResponse (ModifyChannelsJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifyChannelsJobDetail>> PeopleStageCreateModifyChannelsJobAsyncWithHttpInfo (string dataViewName, string systemName, ModifyItemsModifyChannel channelDetails = null);
        /// <summary>
        /// Get the status of a running check in/out element job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to check in or out</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ElementCheckInOutJobDetail</returns>
        System.Threading.Tasks.Task<ElementCheckInOutJobDetail> PeopleStageElementCheckInOutJobAsync (string dataViewName, string systemName, string elementId, int? jobId);

        /// <summary>
        /// Get the status of a running check in/out element job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to check in or out</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (ElementCheckInOutJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ElementCheckInOutJobDetail>> PeopleStageElementCheckInOutJobAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? jobId);
        /// <summary>
        /// Get the status of a running publish element job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to publish</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ElementPublishJobDetail</returns>
        System.Threading.Tasks.Task<ElementPublishJobDetail> PeopleStageElementPublishJobAsync (string dataViewName, string systemName, string elementId, int? jobId);

        /// <summary>
        /// Get the status of a running publish element job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to publish</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (ElementPublishJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ElementPublishJobDetail>> PeopleStageElementPublishJobAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? jobId);
        /// <summary>
        /// Returns the details of the channel info (inc parameters) needed for broadcasters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of List&lt;ChannelInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ChannelInfo>> PeopleStageGetBroadcastParametersAsync (string dataViewName, string systemName);

        /// <summary>
        /// Returns the details of the channel info (inc parameters) needed for broadcasters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of ApiResponse (List&lt;ChannelInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChannelInfo>>> PeopleStageGetBroadcastParametersAsyncWithHttpInfo (string dataViewName, string systemName);
        /// <summary>
        /// Returns the details of a particular PeopleStage channel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <returns>Task of ChannelDetail</returns>
        System.Threading.Tasks.Task<ChannelDetail> PeopleStageGetPeopleStageChannelAsync (string dataViewName, string systemName, string channelId);

        /// <summary>
        /// Returns the details of a particular PeopleStage channel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <returns>Task of ApiResponse (ChannelDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelDetail>> PeopleStageGetPeopleStageChannelAsyncWithHttpInfo (string dataViewName, string systemName, string channelId);
        /// <summary>
        /// Returns the list of PeopleStage channels available in this FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsChannelSummary</returns>
        System.Threading.Tasks.Task<PagedResultsChannelSummary> PeopleStageGetPeopleStageChannelsAsync (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of PeopleStage channels available in this FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsChannelSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsChannelSummary>> PeopleStageGetPeopleStageChannelsAsyncWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the details of a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ElementDetail</returns>
        System.Threading.Tasks.Task<ElementDetail> PeopleStageGetPeopleStageElementAsync (string dataViewName, string systemName, string elementId);

        /// <summary>
        /// Returns the details of a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ApiResponse (ElementDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ElementDetail>> PeopleStageGetPeopleStageElementAsyncWithHttpInfo (string dataViewName, string systemName, string elementId);
        /// <summary>
        /// Returns statistics for the total number of communications sent per channel for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ChannelStatistics</returns>
        System.Threading.Tasks.Task<ChannelStatistics> PeopleStageGetPeopleStageElementChannelStatisticsAsync (string dataViewName, string systemName, string elementId);

        /// <summary>
        /// Returns statistics for the total number of communications sent per channel for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ApiResponse (ChannelStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelStatistics>> PeopleStageGetPeopleStageElementChannelStatisticsAsyncWithHttpInfo (string dataViewName, string systemName, string elementId);
        /// <summary>
        /// Returns the list of children for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsElementSummary</returns>
        System.Threading.Tasks.Task<PagedResultsElementSummary> PeopleStageGetPeopleStageElementChildrenAsync (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of children for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsElementSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsElementSummary>> PeopleStageGetPeopleStageElementChildrenAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns statistics for the number of communications sent over time for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of CommunicationStatistics</returns>
        System.Threading.Tasks.Task<CommunicationStatistics> PeopleStageGetPeopleStageElementCommunicationStatisticsAsync (string dataViewName, string systemName, string elementId);

        /// <summary>
        /// Returns statistics for the number of communications sent over time for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ApiResponse (CommunicationStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommunicationStatistics>> PeopleStageGetPeopleStageElementCommunicationStatisticsAsyncWithHttpInfo (string dataViewName, string systemName, string elementId);
        /// <summary>
        /// Returns the completed actions and deliveries together for a PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are CampaignDescription, ElementDescription, TimeStarted, TimeFinished, NumberOfErrors, NumberOfRecipients, JobStatus. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are CampaignDescription, ElementDescription, TimeStarted, TimeFinished, NumberOfErrors, NumberOfRecipients, JobStatus. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsActionReport</returns>
        System.Threading.Tasks.Task<PagedResultsActionReport> PeopleStageGetPeopleStageElementCompletedAsync (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the completed actions and deliveries together for a PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are CampaignDescription, ElementDescription, TimeStarted, TimeFinished, NumberOfErrors, NumberOfRecipients, JobStatus. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are CampaignDescription, ElementDescription, TimeStarted, TimeFinished, NumberOfErrors, NumberOfRecipients, JobStatus. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsActionReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsActionReport>> PeopleStageGetPeopleStageElementCompletedAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the deliveries for a PeopleStage element - the delivery actions of the element that have run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, TimeStarted, TimeFinished, NumberOfErrors. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, TimeStarted, TimeFinished, NumberOfErrors. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsDeliveryReport</returns>
        System.Threading.Tasks.Task<PagedResultsDeliveryReport> PeopleStageGetPeopleStageElementCompletedDeliveriesAsync (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the deliveries for a PeopleStage element - the delivery actions of the element that have run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, TimeStarted, TimeFinished, NumberOfErrors. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, TimeStarted, TimeFinished, NumberOfErrors. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsDeliveryReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsDeliveryReport>> PeopleStageGetPeopleStageElementCompletedDeliveriesAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the actions for a PeopleStage element - the parts of the element that have run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsStepReport</returns>
        System.Threading.Tasks.Task<PagedResultsStepReport> PeopleStageGetPeopleStageElementCompletedStepsAsync (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the actions for a PeopleStage element - the parts of the element that have run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsStepReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsStepReport>> PeopleStageGetPeopleStageElementCompletedStepsAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns statistics for the total number of responses received per channel for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ResponseStatistics</returns>
        System.Threading.Tasks.Task<ResponseStatistics> PeopleStageGetPeopleStageElementResponseStatisticsAsync (string dataViewName, string systemName, string elementId);

        /// <summary>
        /// Returns statistics for the total number of responses received per channel for a particular PeopleStage element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ApiResponse (ResponseStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseStatistics>> PeopleStageGetPeopleStageElementResponseStatisticsAsyncWithHttpInfo (string dataViewName, string systemName, string elementId);
        /// <summary>
        /// Returns the actions for a PeopleStage element - the parts of the element that are running
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsActionReport</returns>
        System.Threading.Tasks.Task<PagedResultsActionReport> PeopleStageGetPeopleStageElementRunningAsync (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the actions for a PeopleStage element - the parts of the element that are running
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsActionReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsActionReport>> PeopleStageGetPeopleStageElementRunningAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the deliveries for a PeopleStage element - the delivery actions of the element that are running
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsDeliveryReport</returns>
        System.Threading.Tasks.Task<PagedResultsDeliveryReport> PeopleStageGetPeopleStageElementRunningDeliveriesAsync (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the deliveries for a PeopleStage element - the delivery actions of the element that are running
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsDeliveryReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsDeliveryReport>> PeopleStageGetPeopleStageElementRunningDeliveriesAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the actions for a PeopleStage element - the parts of the element that are running
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsStepReport</returns>
        System.Threading.Tasks.Task<PagedResultsStepReport> PeopleStageGetPeopleStageElementRunningStepsAsync (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the actions for a PeopleStage element - the parts of the element that are running
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsStepReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsStepReport>> PeopleStageGetPeopleStageElementRunningStepsAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the status for a PeopleStage element, where status information is available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ElementStatus</returns>
        System.Threading.Tasks.Task<ElementStatus> PeopleStageGetPeopleStageElementStatusAsync (string dataViewName, string systemName, string elementId);

        /// <summary>
        /// Returns the status for a PeopleStage element, where status information is available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ApiResponse (ElementStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ElementStatus>> PeopleStageGetPeopleStageElementStatusAsyncWithHttpInfo (string dataViewName, string systemName, string elementId);
        /// <summary>
        /// Returns the status for all the descendant elements of a PeopleStage element where status information is available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsElementStatus</returns>
        System.Threading.Tasks.Task<PagedResultsElementStatus> PeopleStageGetPeopleStageElementStatusForDescendantsAsync (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the status for all the descendant elements of a PeopleStage element where status information is available
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsElementStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsElementStatus>> PeopleStageGetPeopleStageElementStatusForDescendantsAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns the list of PeopleStage elements available in this FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsElementSummary</returns>
        System.Threading.Tasks.Task<PagedResultsElementSummary> PeopleStageGetPeopleStageElementsAsync (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of PeopleStage elements available in this FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsElementSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsElementSummary>> PeopleStageGetPeopleStageElementsAsyncWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>Task of RangeStatistics</returns>
        System.Threading.Tasks.Task<RangeStatistics> PeopleStageGetPeopleStageRangeStatisticsForDescendantsSyncAsync (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null, string dateRange = null);

        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>Task of ApiResponse (RangeStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<RangeStatistics>> PeopleStageGetPeopleStageRangeStatisticsForDescendantsSyncAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null, string dateRange = null);
        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>Task of RangeStatistics</returns>
        System.Threading.Tasks.Task<RangeStatistics> PeopleStageGetPeopleStageRangeStatisticsSyncAsync (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string dateRange = null);

        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>Task of ApiResponse (RangeStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<RangeStatistics>> PeopleStageGetPeopleStageRangeStatisticsSyncAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string dateRange = null);
        /// <summary>
        /// Returns details of the PeopleStage system for the given system name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of PeopleStageSystemDetail</returns>
        System.Threading.Tasks.Task<PeopleStageSystemDetail> PeopleStageGetPeopleStageSystemAsync (string dataViewName, string systemName);

        /// <summary>
        /// Returns details of the PeopleStage system for the given system name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of ApiResponse (PeopleStageSystemDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<PeopleStageSystemDetail>> PeopleStageGetPeopleStageSystemAsyncWithHttpInfo (string dataViewName, string systemName);
        /// <summary>
        /// Returns the list of systems configured to support PeopleStage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are SystemName, ProgrammeDescription. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are SystemName, ProgrammeDescription. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsPeopleStageSystemSummary</returns>
        System.Threading.Tasks.Task<PagedResultsPeopleStageSystemSummary> PeopleStageGetPeopleStageSystemsAsync (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns the list of systems configured to support PeopleStage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are SystemName, ProgrammeDescription. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are SystemName, ProgrammeDescription. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsPeopleStageSystemSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsPeopleStageSystemSummary>> PeopleStageGetPeopleStageSystemsAsyncWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Requires OrbitAdmin: Modify PeopleStage channels
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelDetails">Details for the channels to modify (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <returns>Task of PagedResultsModifyChannelDetailResults</returns>
        System.Threading.Tasks.Task<PagedResultsModifyChannelDetailResults> PeopleStageModifyChannelsAsync (string dataViewName, string systemName, ModifyItemsModifyChannel channelDetails = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Requires OrbitAdmin: Modify PeopleStage channels
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelDetails">Details for the channels to modify (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsModifyChannelDetailResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsModifyChannelDetailResults>> PeopleStageModifyChannelsAsyncWithHttpInfo (string dataViewName, string systemName, ModifyItemsModifyChannel channelDetails = null, int? timeoutInSeconds = null);
        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Get the status of a running modify channels request
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ModifyChannelsJobDetail</returns>
        System.Threading.Tasks.Task<ModifyChannelsJobDetail> PeopleStageModifyChannelsJobAsync (string dataViewName, string systemName, int? jobId);

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Get the status of a running modify channels request
        /// </summary>
        /// <remarks>
        /// UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (ModifyChannelsJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifyChannelsJobDetail>> PeopleStageModifyChannelsJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId);
        /// <summary>
        /// Create a job to refresh the peoplestage diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PeopleStageRefreshPeopleStageDiagramAsync (string dataViewName, string systemName);

        /// <summary>
        /// Create a job to refresh the peoplestage diagram
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PeopleStageRefreshPeopleStageDiagramAsyncWithHttpInfo (string dataViewName, string systemName);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PeopleStageApi : IPeopleStageApi
    {
        private Apteco.OrbitDashboardRefresher.APIClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleStageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PeopleStageApi(String basePath)
        {
            this.Configuration = new Apteco.OrbitDashboardRefresher.APIClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.OrbitDashboardRefresher.APIClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleStageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PeopleStageApi(Apteco.OrbitDashboardRefresher.APIClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Apteco.OrbitDashboardRefresher.APIClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.OrbitDashboardRefresher.APIClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apteco.OrbitDashboardRefresher.APIClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.OrbitDashboardRefresher.APIClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get the status of a running action job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being actioned</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ActionJobDetail</returns>
        public ActionJobDetail PeopleStageActionJob (string dataViewName, string systemName, string elementId, int? jobId)
        {
             ApiResponse<ActionJobDetail> localVarResponse = PeopleStageActionJobWithHttpInfo(dataViewName, systemName, elementId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of a running action job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being actioned</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of ActionJobDetail</returns>
        public ApiResponse< ActionJobDetail > PeopleStageActionJobWithHttpInfo (string dataViewName, string systemName, string elementId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageActionJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageActionJob");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageActionJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling PeopleStageApi->PeopleStageActionJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/ActionJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageActionJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ActionJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionJobDetail)));
        }

        /// <summary>
        /// Get the status of a running action job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being actioned</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ActionJobDetail</returns>
        public async System.Threading.Tasks.Task<ActionJobDetail> PeopleStageActionJobAsync (string dataViewName, string systemName, string elementId, int? jobId)
        {
             ApiResponse<ActionJobDetail> localVarResponse = await PeopleStageActionJobAsyncWithHttpInfo(dataViewName, systemName, elementId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the status of a running action job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being actioned</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (ActionJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActionJobDetail>> PeopleStageActionJobAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageActionJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageActionJob");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageActionJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling PeopleStageApi->PeopleStageActionJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/ActionJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageActionJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ActionJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionJobDetail)));
        }

        /// <summary>
        /// Cancel a running get channel messages job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns></returns>
        public void PeopleStageCancelChannelMessagesJob (string dataViewName, string systemName, string channelId, int? jobId)
        {
             PeopleStageCancelChannelMessagesJobWithHttpInfo(dataViewName, systemName, channelId, jobId);
        }

        /// <summary>
        /// Cancel a running get channel messages job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PeopleStageCancelChannelMessagesJobWithHttpInfo (string dataViewName, string systemName, string channelId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageCancelChannelMessagesJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageCancelChannelMessagesJob");
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling PeopleStageApi->PeopleStageCancelChannelMessagesJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling PeopleStageApi->PeopleStageCancelChannelMessagesJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Channels/{channelId}/MessagesJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (channelId != null) localVarPathParams.Add("channelId", this.Configuration.ApiClient.ParameterToString(channelId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageCancelChannelMessagesJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a running get channel messages job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PeopleStageCancelChannelMessagesJobAsync (string dataViewName, string systemName, string channelId, int? jobId)
        {
             await PeopleStageCancelChannelMessagesJobAsyncWithHttpInfo(dataViewName, systemName, channelId, jobId);

        }

        /// <summary>
        /// Cancel a running get channel messages job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PeopleStageCancelChannelMessagesJobAsyncWithHttpInfo (string dataViewName, string systemName, string channelId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageCancelChannelMessagesJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageCancelChannelMessagesJob");
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling PeopleStageApi->PeopleStageCancelChannelMessagesJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling PeopleStageApi->PeopleStageCancelChannelMessagesJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Channels/{channelId}/MessagesJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (channelId != null) localVarPathParams.Add("channelId", this.Configuration.ApiClient.ParameterToString(channelId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageCancelChannelMessagesJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a running test channel login job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns></returns>
        public void PeopleStageCancelChannelTestLoginJob (string dataViewName, string systemName, string channelId, int? jobId)
        {
             PeopleStageCancelChannelTestLoginJobWithHttpInfo(dataViewName, systemName, channelId, jobId);
        }

        /// <summary>
        /// Cancel a running test channel login job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PeopleStageCancelChannelTestLoginJobWithHttpInfo (string dataViewName, string systemName, string channelId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageCancelChannelTestLoginJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageCancelChannelTestLoginJob");
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling PeopleStageApi->PeopleStageCancelChannelTestLoginJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling PeopleStageApi->PeopleStageCancelChannelTestLoginJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Channels/{channelId}/TestLoginJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (channelId != null) localVarPathParams.Add("channelId", this.Configuration.ApiClient.ParameterToString(channelId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageCancelChannelTestLoginJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a running test channel login job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PeopleStageCancelChannelTestLoginJobAsync (string dataViewName, string systemName, string channelId, int? jobId)
        {
             await PeopleStageCancelChannelTestLoginJobAsyncWithHttpInfo(dataViewName, systemName, channelId, jobId);

        }

        /// <summary>
        /// Cancel a running test channel login job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PeopleStageCancelChannelTestLoginJobAsyncWithHttpInfo (string dataViewName, string systemName, string channelId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageCancelChannelTestLoginJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageCancelChannelTestLoginJob");
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling PeopleStageApi->PeopleStageCancelChannelTestLoginJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling PeopleStageApi->PeopleStageCancelChannelTestLoginJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Channels/{channelId}/TestLoginJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (channelId != null) localVarPathParams.Add("channelId", this.Configuration.ApiClient.ParameterToString(channelId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageCancelChannelTestLoginJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a running check in/out element job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being checked in or out</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns></returns>
        public void PeopleStageCancelElementCheckInOutJob (string dataViewName, string systemName, string elementId, int? jobId)
        {
             PeopleStageCancelElementCheckInOutJobWithHttpInfo(dataViewName, systemName, elementId, jobId);
        }

        /// <summary>
        /// Cancel a running check in/out element job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being checked in or out</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PeopleStageCancelElementCheckInOutJobWithHttpInfo (string dataViewName, string systemName, string elementId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageCancelElementCheckInOutJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageCancelElementCheckInOutJob");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageCancelElementCheckInOutJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling PeopleStageApi->PeopleStageCancelElementCheckInOutJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/CheckInOutJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageCancelElementCheckInOutJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a running check in/out element job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being checked in or out</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PeopleStageCancelElementCheckInOutJobAsync (string dataViewName, string systemName, string elementId, int? jobId)
        {
             await PeopleStageCancelElementCheckInOutJobAsyncWithHttpInfo(dataViewName, systemName, elementId, jobId);

        }

        /// <summary>
        /// Cancel a running check in/out element job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being checked in or out</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PeopleStageCancelElementCheckInOutJobAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageCancelElementCheckInOutJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageCancelElementCheckInOutJob");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageCancelElementCheckInOutJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling PeopleStageApi->PeopleStageCancelElementCheckInOutJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/CheckInOutJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageCancelElementCheckInOutJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a running publish element job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being published</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns></returns>
        public void PeopleStageCancelElementPublishJob (string dataViewName, string systemName, string elementId, int? jobId)
        {
             PeopleStageCancelElementPublishJobWithHttpInfo(dataViewName, systemName, elementId, jobId);
        }

        /// <summary>
        /// Cancel a running publish element job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being published</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PeopleStageCancelElementPublishJobWithHttpInfo (string dataViewName, string systemName, string elementId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageCancelElementPublishJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageCancelElementPublishJob");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageCancelElementPublishJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling PeopleStageApi->PeopleStageCancelElementPublishJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/PublishJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageCancelElementPublishJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a running publish element job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being published</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PeopleStageCancelElementPublishJobAsync (string dataViewName, string systemName, string elementId, int? jobId)
        {
             await PeopleStageCancelElementPublishJobAsyncWithHttpInfo(dataViewName, systemName, elementId, jobId);

        }

        /// <summary>
        /// Cancel a running publish element job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being published</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PeopleStageCancelElementPublishJobAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageCancelElementPublishJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageCancelElementPublishJob");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageCancelElementPublishJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling PeopleStageApi->PeopleStageCancelElementPublishJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/PublishJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageCancelElementPublishJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Cancel a running modify channels job UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel.</param>
        /// <returns></returns>
        public void PeopleStageCancelModifyChannelsJob (string dataViewName, string systemName, int? jobId)
        {
             PeopleStageCancelModifyChannelsJobWithHttpInfo(dataViewName, systemName, jobId);
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Cancel a running modify channels job UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PeopleStageCancelModifyChannelsJobWithHttpInfo (string dataViewName, string systemName, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageCancelModifyChannelsJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageCancelModifyChannelsJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling PeopleStageApi->PeopleStageCancelModifyChannelsJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/ChannelsJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageCancelModifyChannelsJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Cancel a running modify channels job UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PeopleStageCancelModifyChannelsJobAsync (string dataViewName, string systemName, int? jobId)
        {
             await PeopleStageCancelModifyChannelsJobAsyncWithHttpInfo(dataViewName, systemName, jobId);

        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Cancel a running modify channels job UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to cancel.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PeopleStageCancelModifyChannelsJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageCancelModifyChannelsJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageCancelModifyChannelsJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling PeopleStageApi->PeopleStageCancelModifyChannelsJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/ChannelsJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageCancelModifyChannelsJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the status of a running get messages for channel job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ChannelGetMessagesJobDetail</returns>
        public ChannelGetMessagesJobDetail PeopleStageChannelMessagesJob (string dataViewName, string systemName, string channelId, int? jobId)
        {
             ApiResponse<ChannelGetMessagesJobDetail> localVarResponse = PeopleStageChannelMessagesJobWithHttpInfo(dataViewName, systemName, channelId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of a running get messages for channel job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of ChannelGetMessagesJobDetail</returns>
        public ApiResponse< ChannelGetMessagesJobDetail > PeopleStageChannelMessagesJobWithHttpInfo (string dataViewName, string systemName, string channelId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageChannelMessagesJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageChannelMessagesJob");
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling PeopleStageApi->PeopleStageChannelMessagesJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling PeopleStageApi->PeopleStageChannelMessagesJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Channels/{channelId}/MessagesJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (channelId != null) localVarPathParams.Add("channelId", this.Configuration.ApiClient.ParameterToString(channelId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageChannelMessagesJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelGetMessagesJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelGetMessagesJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelGetMessagesJobDetail)));
        }

        /// <summary>
        /// Get the status of a running get messages for channel job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ChannelGetMessagesJobDetail</returns>
        public async System.Threading.Tasks.Task<ChannelGetMessagesJobDetail> PeopleStageChannelMessagesJobAsync (string dataViewName, string systemName, string channelId, int? jobId)
        {
             ApiResponse<ChannelGetMessagesJobDetail> localVarResponse = await PeopleStageChannelMessagesJobAsyncWithHttpInfo(dataViewName, systemName, channelId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the status of a running get messages for channel job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (ChannelGetMessagesJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChannelGetMessagesJobDetail>> PeopleStageChannelMessagesJobAsyncWithHttpInfo (string dataViewName, string systemName, string channelId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageChannelMessagesJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageChannelMessagesJob");
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling PeopleStageApi->PeopleStageChannelMessagesJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling PeopleStageApi->PeopleStageChannelMessagesJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Channels/{channelId}/MessagesJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (channelId != null) localVarPathParams.Add("channelId", this.Configuration.ApiClient.ParameterToString(channelId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageChannelMessagesJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelGetMessagesJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelGetMessagesJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelGetMessagesJobDetail)));
        }

        /// <summary>
        /// Get the status of a running test login for channel job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ChannelTestLoginJobDetail</returns>
        public ChannelTestLoginJobDetail PeopleStageChannelTestLoginJob (string dataViewName, string systemName, string channelId, int? jobId)
        {
             ApiResponse<ChannelTestLoginJobDetail> localVarResponse = PeopleStageChannelTestLoginJobWithHttpInfo(dataViewName, systemName, channelId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of a running test login for channel job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of ChannelTestLoginJobDetail</returns>
        public ApiResponse< ChannelTestLoginJobDetail > PeopleStageChannelTestLoginJobWithHttpInfo (string dataViewName, string systemName, string channelId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageChannelTestLoginJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageChannelTestLoginJob");
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling PeopleStageApi->PeopleStageChannelTestLoginJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling PeopleStageApi->PeopleStageChannelTestLoginJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Channels/{channelId}/TestLoginJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (channelId != null) localVarPathParams.Add("channelId", this.Configuration.ApiClient.ParameterToString(channelId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageChannelTestLoginJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelTestLoginJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelTestLoginJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelTestLoginJobDetail)));
        }

        /// <summary>
        /// Get the status of a running test login for channel job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ChannelTestLoginJobDetail</returns>
        public async System.Threading.Tasks.Task<ChannelTestLoginJobDetail> PeopleStageChannelTestLoginJobAsync (string dataViewName, string systemName, string channelId, int? jobId)
        {
             ApiResponse<ChannelTestLoginJobDetail> localVarResponse = await PeopleStageChannelTestLoginJobAsyncWithHttpInfo(dataViewName, systemName, channelId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the status of a running test login for channel job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (ChannelTestLoginJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChannelTestLoginJobDetail>> PeopleStageChannelTestLoginJobAsyncWithHttpInfo (string dataViewName, string systemName, string channelId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageChannelTestLoginJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageChannelTestLoginJob");
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling PeopleStageApi->PeopleStageChannelTestLoginJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling PeopleStageApi->PeopleStageChannelTestLoginJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Channels/{channelId}/TestLoginJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (channelId != null) localVarPathParams.Add("channelId", this.Configuration.ApiClient.ParameterToString(channelId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageChannelTestLoginJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelTestLoginJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelTestLoginJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelTestLoginJobDetail)));
        }

        /// <summary>
        /// Create a job to send a particular PeopleStage action 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being actioned</param>
        /// <returns>ActionJobDetail</returns>
        public ActionJobDetail PeopleStageCreateActionJob (string dataViewName, string systemName, string elementId)
        {
             ApiResponse<ActionJobDetail> localVarResponse = PeopleStageCreateActionJobWithHttpInfo(dataViewName, systemName, elementId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a job to send a particular PeopleStage action 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being actioned</param>
        /// <returns>ApiResponse of ActionJobDetail</returns>
        public ApiResponse< ActionJobDetail > PeopleStageCreateActionJobWithHttpInfo (string dataViewName, string systemName, string elementId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageCreateActionJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageCreateActionJob");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageCreateActionJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/ActionJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageCreateActionJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ActionJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionJobDetail)));
        }

        /// <summary>
        /// Create a job to send a particular PeopleStage action 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being actioned</param>
        /// <returns>Task of ActionJobDetail</returns>
        public async System.Threading.Tasks.Task<ActionJobDetail> PeopleStageCreateActionJobAsync (string dataViewName, string systemName, string elementId)
        {
             ApiResponse<ActionJobDetail> localVarResponse = await PeopleStageCreateActionJobAsyncWithHttpInfo(dataViewName, systemName, elementId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a job to send a particular PeopleStage action 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element being actioned</param>
        /// <returns>Task of ApiResponse (ActionJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActionJobDetail>> PeopleStageCreateActionJobAsyncWithHttpInfo (string dataViewName, string systemName, string elementId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageCreateActionJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageCreateActionJob");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageCreateActionJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/ActionJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageCreateActionJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ActionJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionJobDetail)));
        }

        /// <summary>
        /// Create a job to return the messages for a particular PeopleStage channel 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <returns>ChannelGetMessagesJobDetail</returns>
        public ChannelGetMessagesJobDetail PeopleStageCreateChannelMessagesJob (string dataViewName, string systemName, string channelId)
        {
             ApiResponse<ChannelGetMessagesJobDetail> localVarResponse = PeopleStageCreateChannelMessagesJobWithHttpInfo(dataViewName, systemName, channelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a job to return the messages for a particular PeopleStage channel 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <returns>ApiResponse of ChannelGetMessagesJobDetail</returns>
        public ApiResponse< ChannelGetMessagesJobDetail > PeopleStageCreateChannelMessagesJobWithHttpInfo (string dataViewName, string systemName, string channelId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageCreateChannelMessagesJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageCreateChannelMessagesJob");
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling PeopleStageApi->PeopleStageCreateChannelMessagesJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Channels/{channelId}/MessagesJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (channelId != null) localVarPathParams.Add("channelId", this.Configuration.ApiClient.ParameterToString(channelId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageCreateChannelMessagesJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelGetMessagesJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelGetMessagesJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelGetMessagesJobDetail)));
        }

        /// <summary>
        /// Create a job to return the messages for a particular PeopleStage channel 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <returns>Task of ChannelGetMessagesJobDetail</returns>
        public async System.Threading.Tasks.Task<ChannelGetMessagesJobDetail> PeopleStageCreateChannelMessagesJobAsync (string dataViewName, string systemName, string channelId)
        {
             ApiResponse<ChannelGetMessagesJobDetail> localVarResponse = await PeopleStageCreateChannelMessagesJobAsyncWithHttpInfo(dataViewName, systemName, channelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a job to return the messages for a particular PeopleStage channel 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <returns>Task of ApiResponse (ChannelGetMessagesJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChannelGetMessagesJobDetail>> PeopleStageCreateChannelMessagesJobAsyncWithHttpInfo (string dataViewName, string systemName, string channelId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageCreateChannelMessagesJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageCreateChannelMessagesJob");
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling PeopleStageApi->PeopleStageCreateChannelMessagesJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Channels/{channelId}/MessagesJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (channelId != null) localVarPathParams.Add("channelId", this.Configuration.ApiClient.ParameterToString(channelId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageCreateChannelMessagesJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelGetMessagesJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelGetMessagesJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelGetMessagesJobDetail)));
        }

        /// <summary>
        /// Create a job to test login for a particular PeopleStage channel 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="channelLoginDetails">Any overrides for the login details for the PeopleStage channel to view (optional)</param>
        /// <returns>ChannelTestLoginJobDetail</returns>
        public ChannelTestLoginJobDetail PeopleStageCreateChannelTestLoginJob (string dataViewName, string systemName, string channelId, ChannelLoginDetails channelLoginDetails = null)
        {
             ApiResponse<ChannelTestLoginJobDetail> localVarResponse = PeopleStageCreateChannelTestLoginJobWithHttpInfo(dataViewName, systemName, channelId, channelLoginDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a job to test login for a particular PeopleStage channel 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="channelLoginDetails">Any overrides for the login details for the PeopleStage channel to view (optional)</param>
        /// <returns>ApiResponse of ChannelTestLoginJobDetail</returns>
        public ApiResponse< ChannelTestLoginJobDetail > PeopleStageCreateChannelTestLoginJobWithHttpInfo (string dataViewName, string systemName, string channelId, ChannelLoginDetails channelLoginDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageCreateChannelTestLoginJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageCreateChannelTestLoginJob");
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling PeopleStageApi->PeopleStageCreateChannelTestLoginJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Channels/{channelId}/TestLoginJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (channelId != null) localVarPathParams.Add("channelId", this.Configuration.ApiClient.ParameterToString(channelId)); // path parameter
            if (channelLoginDetails != null && channelLoginDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(channelLoginDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = channelLoginDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageCreateChannelTestLoginJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelTestLoginJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelTestLoginJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelTestLoginJobDetail)));
        }

        /// <summary>
        /// Create a job to test login for a particular PeopleStage channel 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="channelLoginDetails">Any overrides for the login details for the PeopleStage channel to view (optional)</param>
        /// <returns>Task of ChannelTestLoginJobDetail</returns>
        public async System.Threading.Tasks.Task<ChannelTestLoginJobDetail> PeopleStageCreateChannelTestLoginJobAsync (string dataViewName, string systemName, string channelId, ChannelLoginDetails channelLoginDetails = null)
        {
             ApiResponse<ChannelTestLoginJobDetail> localVarResponse = await PeopleStageCreateChannelTestLoginJobAsyncWithHttpInfo(dataViewName, systemName, channelId, channelLoginDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a job to test login for a particular PeopleStage channel 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <param name="channelLoginDetails">Any overrides for the login details for the PeopleStage channel to view (optional)</param>
        /// <returns>Task of ApiResponse (ChannelTestLoginJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChannelTestLoginJobDetail>> PeopleStageCreateChannelTestLoginJobAsyncWithHttpInfo (string dataViewName, string systemName, string channelId, ChannelLoginDetails channelLoginDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageCreateChannelTestLoginJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageCreateChannelTestLoginJob");
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling PeopleStageApi->PeopleStageCreateChannelTestLoginJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Channels/{channelId}/TestLoginJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (channelId != null) localVarPathParams.Add("channelId", this.Configuration.ApiClient.ParameterToString(channelId)); // path parameter
            if (channelLoginDetails != null && channelLoginDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(channelLoginDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = channelLoginDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageCreateChannelTestLoginJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelTestLoginJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelTestLoginJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelTestLoginJobDetail)));
        }

        /// <summary>
        /// Create a job to check in or out a particular PeopleStage element (campaign or area) 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to check in or out</param>
        /// <param name="checkInOutRequest">Details of whether to check in or check out the element (optional)</param>
        /// <returns>ElementCheckInOutJobDetail</returns>
        public ElementCheckInOutJobDetail PeopleStageCreateElementCheckInOutJob (string dataViewName, string systemName, string elementId, CheckInOutRequest checkInOutRequest = null)
        {
             ApiResponse<ElementCheckInOutJobDetail> localVarResponse = PeopleStageCreateElementCheckInOutJobWithHttpInfo(dataViewName, systemName, elementId, checkInOutRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a job to check in or out a particular PeopleStage element (campaign or area) 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to check in or out</param>
        /// <param name="checkInOutRequest">Details of whether to check in or check out the element (optional)</param>
        /// <returns>ApiResponse of ElementCheckInOutJobDetail</returns>
        public ApiResponse< ElementCheckInOutJobDetail > PeopleStageCreateElementCheckInOutJobWithHttpInfo (string dataViewName, string systemName, string elementId, CheckInOutRequest checkInOutRequest = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageCreateElementCheckInOutJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageCreateElementCheckInOutJob");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageCreateElementCheckInOutJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/CheckInOutJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (checkInOutRequest != null && checkInOutRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(checkInOutRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkInOutRequest; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageCreateElementCheckInOutJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ElementCheckInOutJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ElementCheckInOutJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ElementCheckInOutJobDetail)));
        }

        /// <summary>
        /// Create a job to check in or out a particular PeopleStage element (campaign or area) 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to check in or out</param>
        /// <param name="checkInOutRequest">Details of whether to check in or check out the element (optional)</param>
        /// <returns>Task of ElementCheckInOutJobDetail</returns>
        public async System.Threading.Tasks.Task<ElementCheckInOutJobDetail> PeopleStageCreateElementCheckInOutJobAsync (string dataViewName, string systemName, string elementId, CheckInOutRequest checkInOutRequest = null)
        {
             ApiResponse<ElementCheckInOutJobDetail> localVarResponse = await PeopleStageCreateElementCheckInOutJobAsyncWithHttpInfo(dataViewName, systemName, elementId, checkInOutRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a job to check in or out a particular PeopleStage element (campaign or area) 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to check in or out</param>
        /// <param name="checkInOutRequest">Details of whether to check in or check out the element (optional)</param>
        /// <returns>Task of ApiResponse (ElementCheckInOutJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ElementCheckInOutJobDetail>> PeopleStageCreateElementCheckInOutJobAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, CheckInOutRequest checkInOutRequest = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageCreateElementCheckInOutJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageCreateElementCheckInOutJob");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageCreateElementCheckInOutJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/CheckInOutJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (checkInOutRequest != null && checkInOutRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(checkInOutRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkInOutRequest; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageCreateElementCheckInOutJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ElementCheckInOutJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ElementCheckInOutJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ElementCheckInOutJobDetail)));
        }

        /// <summary>
        /// Create a job to publish a particular PeopleStage element (campaign or area) 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to publish</param>
        /// <returns>ElementPublishJobDetail</returns>
        public ElementPublishJobDetail PeopleStageCreateElementPublishJob (string dataViewName, string systemName, string elementId)
        {
             ApiResponse<ElementPublishJobDetail> localVarResponse = PeopleStageCreateElementPublishJobWithHttpInfo(dataViewName, systemName, elementId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a job to publish a particular PeopleStage element (campaign or area) 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to publish</param>
        /// <returns>ApiResponse of ElementPublishJobDetail</returns>
        public ApiResponse< ElementPublishJobDetail > PeopleStageCreateElementPublishJobWithHttpInfo (string dataViewName, string systemName, string elementId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageCreateElementPublishJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageCreateElementPublishJob");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageCreateElementPublishJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/PublishJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageCreateElementPublishJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ElementPublishJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ElementPublishJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ElementPublishJobDetail)));
        }

        /// <summary>
        /// Create a job to publish a particular PeopleStage element (campaign or area) 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to publish</param>
        /// <returns>Task of ElementPublishJobDetail</returns>
        public async System.Threading.Tasks.Task<ElementPublishJobDetail> PeopleStageCreateElementPublishJobAsync (string dataViewName, string systemName, string elementId)
        {
             ApiResponse<ElementPublishJobDetail> localVarResponse = await PeopleStageCreateElementPublishJobAsyncWithHttpInfo(dataViewName, systemName, elementId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a job to publish a particular PeopleStage element (campaign or area) 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to publish</param>
        /// <returns>Task of ApiResponse (ElementPublishJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ElementPublishJobDetail>> PeopleStageCreateElementPublishJobAsyncWithHttpInfo (string dataViewName, string systemName, string elementId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageCreateElementPublishJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageCreateElementPublishJob");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageCreateElementPublishJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/PublishJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageCreateElementPublishJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ElementPublishJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ElementPublishJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ElementPublishJobDetail)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Create a job to modify PeopleStage channels UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelDetails">Details for the channels to modify (optional)</param>
        /// <returns>ModifyChannelsJobDetail</returns>
        public ModifyChannelsJobDetail PeopleStageCreateModifyChannelsJob (string dataViewName, string systemName, ModifyItemsModifyChannel channelDetails = null)
        {
             ApiResponse<ModifyChannelsJobDetail> localVarResponse = PeopleStageCreateModifyChannelsJobWithHttpInfo(dataViewName, systemName, channelDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Create a job to modify PeopleStage channels UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelDetails">Details for the channels to modify (optional)</param>
        /// <returns>ApiResponse of ModifyChannelsJobDetail</returns>
        public ApiResponse< ModifyChannelsJobDetail > PeopleStageCreateModifyChannelsJobWithHttpInfo (string dataViewName, string systemName, ModifyItemsModifyChannel channelDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageCreateModifyChannelsJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageCreateModifyChannelsJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/ChannelsJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (channelDetails != null && channelDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(channelDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = channelDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageCreateModifyChannelsJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModifyChannelsJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModifyChannelsJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModifyChannelsJobDetail)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Create a job to modify PeopleStage channels UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelDetails">Details for the channels to modify (optional)</param>
        /// <returns>Task of ModifyChannelsJobDetail</returns>
        public async System.Threading.Tasks.Task<ModifyChannelsJobDetail> PeopleStageCreateModifyChannelsJobAsync (string dataViewName, string systemName, ModifyItemsModifyChannel channelDetails = null)
        {
             ApiResponse<ModifyChannelsJobDetail> localVarResponse = await PeopleStageCreateModifyChannelsJobAsyncWithHttpInfo(dataViewName, systemName, channelDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Create a job to modify PeopleStage channels UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelDetails">Details for the channels to modify (optional)</param>
        /// <returns>Task of ApiResponse (ModifyChannelsJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModifyChannelsJobDetail>> PeopleStageCreateModifyChannelsJobAsyncWithHttpInfo (string dataViewName, string systemName, ModifyItemsModifyChannel channelDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageCreateModifyChannelsJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageCreateModifyChannelsJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/ChannelsJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (channelDetails != null && channelDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(channelDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = channelDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageCreateModifyChannelsJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModifyChannelsJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModifyChannelsJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModifyChannelsJobDetail)));
        }

        /// <summary>
        /// Get the status of a running check in/out element job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to check in or out</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ElementCheckInOutJobDetail</returns>
        public ElementCheckInOutJobDetail PeopleStageElementCheckInOutJob (string dataViewName, string systemName, string elementId, int? jobId)
        {
             ApiResponse<ElementCheckInOutJobDetail> localVarResponse = PeopleStageElementCheckInOutJobWithHttpInfo(dataViewName, systemName, elementId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of a running check in/out element job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to check in or out</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of ElementCheckInOutJobDetail</returns>
        public ApiResponse< ElementCheckInOutJobDetail > PeopleStageElementCheckInOutJobWithHttpInfo (string dataViewName, string systemName, string elementId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageElementCheckInOutJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageElementCheckInOutJob");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageElementCheckInOutJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling PeopleStageApi->PeopleStageElementCheckInOutJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/CheckInOutJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageElementCheckInOutJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ElementCheckInOutJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ElementCheckInOutJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ElementCheckInOutJobDetail)));
        }

        /// <summary>
        /// Get the status of a running check in/out element job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to check in or out</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ElementCheckInOutJobDetail</returns>
        public async System.Threading.Tasks.Task<ElementCheckInOutJobDetail> PeopleStageElementCheckInOutJobAsync (string dataViewName, string systemName, string elementId, int? jobId)
        {
             ApiResponse<ElementCheckInOutJobDetail> localVarResponse = await PeopleStageElementCheckInOutJobAsyncWithHttpInfo(dataViewName, systemName, elementId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the status of a running check in/out element job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to check in or out</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (ElementCheckInOutJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ElementCheckInOutJobDetail>> PeopleStageElementCheckInOutJobAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageElementCheckInOutJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageElementCheckInOutJob");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageElementCheckInOutJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling PeopleStageApi->PeopleStageElementCheckInOutJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/CheckInOutJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageElementCheckInOutJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ElementCheckInOutJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ElementCheckInOutJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ElementCheckInOutJobDetail)));
        }

        /// <summary>
        /// Get the status of a running publish element job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to publish</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ElementPublishJobDetail</returns>
        public ElementPublishJobDetail PeopleStageElementPublishJob (string dataViewName, string systemName, string elementId, int? jobId)
        {
             ApiResponse<ElementPublishJobDetail> localVarResponse = PeopleStageElementPublishJobWithHttpInfo(dataViewName, systemName, elementId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of a running publish element job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to publish</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of ElementPublishJobDetail</returns>
        public ApiResponse< ElementPublishJobDetail > PeopleStageElementPublishJobWithHttpInfo (string dataViewName, string systemName, string elementId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageElementPublishJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageElementPublishJob");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageElementPublishJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling PeopleStageApi->PeopleStageElementPublishJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/PublishJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageElementPublishJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ElementPublishJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ElementPublishJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ElementPublishJobDetail)));
        }

        /// <summary>
        /// Get the status of a running publish element job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to publish</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ElementPublishJobDetail</returns>
        public async System.Threading.Tasks.Task<ElementPublishJobDetail> PeopleStageElementPublishJobAsync (string dataViewName, string systemName, string elementId, int? jobId)
        {
             ApiResponse<ElementPublishJobDetail> localVarResponse = await PeopleStageElementPublishJobAsyncWithHttpInfo(dataViewName, systemName, elementId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the status of a running publish element job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to publish</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (ElementPublishJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ElementPublishJobDetail>> PeopleStageElementPublishJobAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageElementPublishJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageElementPublishJob");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageElementPublishJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling PeopleStageApi->PeopleStageElementPublishJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/PublishJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageElementPublishJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ElementPublishJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ElementPublishJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ElementPublishJobDetail)));
        }

        /// <summary>
        /// Returns the details of the channel info (inc parameters) needed for broadcasters 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>List&lt;ChannelInfo&gt;</returns>
        public List<ChannelInfo> PeopleStageGetBroadcastParameters (string dataViewName, string systemName)
        {
             ApiResponse<List<ChannelInfo>> localVarResponse = PeopleStageGetBroadcastParametersWithHttpInfo(dataViewName, systemName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details of the channel info (inc parameters) needed for broadcasters 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>ApiResponse of List&lt;ChannelInfo&gt;</returns>
        public ApiResponse< List<ChannelInfo> > PeopleStageGetBroadcastParametersWithHttpInfo (string dataViewName, string systemName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetBroadcastParameters");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetBroadcastParameters");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/ChannelInfo/Broadcasters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetBroadcastParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChannelInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChannelInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChannelInfo>)));
        }

        /// <summary>
        /// Returns the details of the channel info (inc parameters) needed for broadcasters 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of List&lt;ChannelInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChannelInfo>> PeopleStageGetBroadcastParametersAsync (string dataViewName, string systemName)
        {
             ApiResponse<List<ChannelInfo>> localVarResponse = await PeopleStageGetBroadcastParametersAsyncWithHttpInfo(dataViewName, systemName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the details of the channel info (inc parameters) needed for broadcasters 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of ApiResponse (List&lt;ChannelInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ChannelInfo>>> PeopleStageGetBroadcastParametersAsyncWithHttpInfo (string dataViewName, string systemName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetBroadcastParameters");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetBroadcastParameters");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/ChannelInfo/Broadcasters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetBroadcastParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChannelInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChannelInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChannelInfo>)));
        }

        /// <summary>
        /// Returns the details of a particular PeopleStage channel 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <returns>ChannelDetail</returns>
        public ChannelDetail PeopleStageGetPeopleStageChannel (string dataViewName, string systemName, string channelId)
        {
             ApiResponse<ChannelDetail> localVarResponse = PeopleStageGetPeopleStageChannelWithHttpInfo(dataViewName, systemName, channelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details of a particular PeopleStage channel 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <returns>ApiResponse of ChannelDetail</returns>
        public ApiResponse< ChannelDetail > PeopleStageGetPeopleStageChannelWithHttpInfo (string dataViewName, string systemName, string channelId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageChannel");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageChannel");
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling PeopleStageApi->PeopleStageGetPeopleStageChannel");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Channels/{channelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (channelId != null) localVarPathParams.Add("channelId", this.Configuration.ApiClient.ParameterToString(channelId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelDetail)));
        }

        /// <summary>
        /// Returns the details of a particular PeopleStage channel 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <returns>Task of ChannelDetail</returns>
        public async System.Threading.Tasks.Task<ChannelDetail> PeopleStageGetPeopleStageChannelAsync (string dataViewName, string systemName, string channelId)
        {
             ApiResponse<ChannelDetail> localVarResponse = await PeopleStageGetPeopleStageChannelAsyncWithHttpInfo(dataViewName, systemName, channelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the details of a particular PeopleStage channel 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelId">The id of the PeopleStage channel to view</param>
        /// <returns>Task of ApiResponse (ChannelDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChannelDetail>> PeopleStageGetPeopleStageChannelAsyncWithHttpInfo (string dataViewName, string systemName, string channelId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageChannel");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageChannel");
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling PeopleStageApi->PeopleStageGetPeopleStageChannel");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Channels/{channelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (channelId != null) localVarPathParams.Add("channelId", this.Configuration.ApiClient.ParameterToString(channelId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelDetail)));
        }

        /// <summary>
        /// Returns the list of PeopleStage channels available in this FastStats system 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsChannelSummary</returns>
        public PagedResultsChannelSummary PeopleStageGetPeopleStageChannels (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsChannelSummary> localVarResponse = PeopleStageGetPeopleStageChannelsWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of PeopleStage channels available in this FastStats system 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsChannelSummary</returns>
        public ApiResponse< PagedResultsChannelSummary > PeopleStageGetPeopleStageChannelsWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageChannels");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageChannels");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsChannelSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsChannelSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsChannelSummary)));
        }

        /// <summary>
        /// Returns the list of PeopleStage channels available in this FastStats system 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsChannelSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsChannelSummary> PeopleStageGetPeopleStageChannelsAsync (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsChannelSummary> localVarResponse = await PeopleStageGetPeopleStageChannelsAsyncWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of PeopleStage channels available in this FastStats system 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsChannelSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsChannelSummary>> PeopleStageGetPeopleStageChannelsAsyncWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageChannels");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageChannels");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsChannelSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsChannelSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsChannelSummary)));
        }

        /// <summary>
        /// Returns the details of a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ElementDetail</returns>
        public ElementDetail PeopleStageGetPeopleStageElement (string dataViewName, string systemName, string elementId)
        {
             ApiResponse<ElementDetail> localVarResponse = PeopleStageGetPeopleStageElementWithHttpInfo(dataViewName, systemName, elementId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details of a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ApiResponse of ElementDetail</returns>
        public ApiResponse< ElementDetail > PeopleStageGetPeopleStageElementWithHttpInfo (string dataViewName, string systemName, string elementId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElement");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElement");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElement");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ElementDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ElementDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ElementDetail)));
        }

        /// <summary>
        /// Returns the details of a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ElementDetail</returns>
        public async System.Threading.Tasks.Task<ElementDetail> PeopleStageGetPeopleStageElementAsync (string dataViewName, string systemName, string elementId)
        {
             ApiResponse<ElementDetail> localVarResponse = await PeopleStageGetPeopleStageElementAsyncWithHttpInfo(dataViewName, systemName, elementId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the details of a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ApiResponse (ElementDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ElementDetail>> PeopleStageGetPeopleStageElementAsyncWithHttpInfo (string dataViewName, string systemName, string elementId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElement");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElement");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElement");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ElementDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ElementDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ElementDetail)));
        }

        /// <summary>
        /// Returns statistics for the total number of communications sent per channel for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ChannelStatistics</returns>
        public ChannelStatistics PeopleStageGetPeopleStageElementChannelStatistics (string dataViewName, string systemName, string elementId)
        {
             ApiResponse<ChannelStatistics> localVarResponse = PeopleStageGetPeopleStageElementChannelStatisticsWithHttpInfo(dataViewName, systemName, elementId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns statistics for the total number of communications sent per channel for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ApiResponse of ChannelStatistics</returns>
        public ApiResponse< ChannelStatistics > PeopleStageGetPeopleStageElementChannelStatisticsWithHttpInfo (string dataViewName, string systemName, string elementId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementChannelStatistics");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementChannelStatistics");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementChannelStatistics");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/ChannelStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementChannelStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelStatistics)));
        }

        /// <summary>
        /// Returns statistics for the total number of communications sent per channel for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ChannelStatistics</returns>
        public async System.Threading.Tasks.Task<ChannelStatistics> PeopleStageGetPeopleStageElementChannelStatisticsAsync (string dataViewName, string systemName, string elementId)
        {
             ApiResponse<ChannelStatistics> localVarResponse = await PeopleStageGetPeopleStageElementChannelStatisticsAsyncWithHttpInfo(dataViewName, systemName, elementId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns statistics for the total number of communications sent per channel for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ApiResponse (ChannelStatistics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChannelStatistics>> PeopleStageGetPeopleStageElementChannelStatisticsAsyncWithHttpInfo (string dataViewName, string systemName, string elementId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementChannelStatistics");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementChannelStatistics");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementChannelStatistics");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/ChannelStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementChannelStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelStatistics)));
        }

        /// <summary>
        /// Returns the list of children for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsElementSummary</returns>
        public PagedResultsElementSummary PeopleStageGetPeopleStageElementChildren (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsElementSummary> localVarResponse = PeopleStageGetPeopleStageElementChildrenWithHttpInfo(dataViewName, systemName, elementId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of children for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsElementSummary</returns>
        public ApiResponse< PagedResultsElementSummary > PeopleStageGetPeopleStageElementChildrenWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementChildren");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementChildren");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementChildren");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/Children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementChildren", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsElementSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsElementSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsElementSummary)));
        }

        /// <summary>
        /// Returns the list of children for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsElementSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsElementSummary> PeopleStageGetPeopleStageElementChildrenAsync (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsElementSummary> localVarResponse = await PeopleStageGetPeopleStageElementChildrenAsyncWithHttpInfo(dataViewName, systemName, elementId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of children for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsElementSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsElementSummary>> PeopleStageGetPeopleStageElementChildrenAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementChildren");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementChildren");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementChildren");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/Children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementChildren", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsElementSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsElementSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsElementSummary)));
        }

        /// <summary>
        /// Returns statistics for the number of communications sent over time for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>CommunicationStatistics</returns>
        public CommunicationStatistics PeopleStageGetPeopleStageElementCommunicationStatistics (string dataViewName, string systemName, string elementId)
        {
             ApiResponse<CommunicationStatistics> localVarResponse = PeopleStageGetPeopleStageElementCommunicationStatisticsWithHttpInfo(dataViewName, systemName, elementId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns statistics for the number of communications sent over time for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ApiResponse of CommunicationStatistics</returns>
        public ApiResponse< CommunicationStatistics > PeopleStageGetPeopleStageElementCommunicationStatisticsWithHttpInfo (string dataViewName, string systemName, string elementId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCommunicationStatistics");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCommunicationStatistics");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCommunicationStatistics");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/CommunicationStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementCommunicationStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommunicationStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommunicationStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommunicationStatistics)));
        }

        /// <summary>
        /// Returns statistics for the number of communications sent over time for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of CommunicationStatistics</returns>
        public async System.Threading.Tasks.Task<CommunicationStatistics> PeopleStageGetPeopleStageElementCommunicationStatisticsAsync (string dataViewName, string systemName, string elementId)
        {
             ApiResponse<CommunicationStatistics> localVarResponse = await PeopleStageGetPeopleStageElementCommunicationStatisticsAsyncWithHttpInfo(dataViewName, systemName, elementId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns statistics for the number of communications sent over time for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ApiResponse (CommunicationStatistics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommunicationStatistics>> PeopleStageGetPeopleStageElementCommunicationStatisticsAsyncWithHttpInfo (string dataViewName, string systemName, string elementId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCommunicationStatistics");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCommunicationStatistics");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCommunicationStatistics");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/CommunicationStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementCommunicationStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommunicationStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommunicationStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommunicationStatistics)));
        }

        /// <summary>
        /// Returns the completed actions and deliveries together for a PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are CampaignDescription, ElementDescription, TimeStarted, TimeFinished, NumberOfErrors, NumberOfRecipients, JobStatus. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are CampaignDescription, ElementDescription, TimeStarted, TimeFinished, NumberOfErrors, NumberOfRecipients, JobStatus. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsActionReport</returns>
        public PagedResultsActionReport PeopleStageGetPeopleStageElementCompleted (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsActionReport> localVarResponse = PeopleStageGetPeopleStageElementCompletedWithHttpInfo(dataViewName, systemName, elementId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the completed actions and deliveries together for a PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are CampaignDescription, ElementDescription, TimeStarted, TimeFinished, NumberOfErrors, NumberOfRecipients, JobStatus. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are CampaignDescription, ElementDescription, TimeStarted, TimeFinished, NumberOfErrors, NumberOfRecipients, JobStatus. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsActionReport</returns>
        public ApiResponse< PagedResultsActionReport > PeopleStageGetPeopleStageElementCompletedWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCompleted");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCompleted");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCompleted");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/CompletedActions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementCompleted", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsActionReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsActionReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsActionReport)));
        }

        /// <summary>
        /// Returns the completed actions and deliveries together for a PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are CampaignDescription, ElementDescription, TimeStarted, TimeFinished, NumberOfErrors, NumberOfRecipients, JobStatus. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are CampaignDescription, ElementDescription, TimeStarted, TimeFinished, NumberOfErrors, NumberOfRecipients, JobStatus. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsActionReport</returns>
        public async System.Threading.Tasks.Task<PagedResultsActionReport> PeopleStageGetPeopleStageElementCompletedAsync (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsActionReport> localVarResponse = await PeopleStageGetPeopleStageElementCompletedAsyncWithHttpInfo(dataViewName, systemName, elementId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the completed actions and deliveries together for a PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are CampaignDescription, ElementDescription, TimeStarted, TimeFinished, NumberOfErrors, NumberOfRecipients, JobStatus. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are CampaignDescription, ElementDescription, TimeStarted, TimeFinished, NumberOfErrors, NumberOfRecipients, JobStatus. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsActionReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsActionReport>> PeopleStageGetPeopleStageElementCompletedAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCompleted");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCompleted");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCompleted");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/CompletedActions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementCompleted", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsActionReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsActionReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsActionReport)));
        }

        /// <summary>
        /// Returns the deliveries for a PeopleStage element - the delivery actions of the element that have run 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, TimeStarted, TimeFinished, NumberOfErrors. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, TimeStarted, TimeFinished, NumberOfErrors. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsDeliveryReport</returns>
        public PagedResultsDeliveryReport PeopleStageGetPeopleStageElementCompletedDeliveries (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsDeliveryReport> localVarResponse = PeopleStageGetPeopleStageElementCompletedDeliveriesWithHttpInfo(dataViewName, systemName, elementId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the deliveries for a PeopleStage element - the delivery actions of the element that have run 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, TimeStarted, TimeFinished, NumberOfErrors. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, TimeStarted, TimeFinished, NumberOfErrors. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsDeliveryReport</returns>
        public ApiResponse< PagedResultsDeliveryReport > PeopleStageGetPeopleStageElementCompletedDeliveriesWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCompletedDeliveries");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCompletedDeliveries");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCompletedDeliveries");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/CompletedDeliveries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementCompletedDeliveries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsDeliveryReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsDeliveryReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsDeliveryReport)));
        }

        /// <summary>
        /// Returns the deliveries for a PeopleStage element - the delivery actions of the element that have run 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, TimeStarted, TimeFinished, NumberOfErrors. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, TimeStarted, TimeFinished, NumberOfErrors. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsDeliveryReport</returns>
        public async System.Threading.Tasks.Task<PagedResultsDeliveryReport> PeopleStageGetPeopleStageElementCompletedDeliveriesAsync (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsDeliveryReport> localVarResponse = await PeopleStageGetPeopleStageElementCompletedDeliveriesAsyncWithHttpInfo(dataViewName, systemName, elementId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the deliveries for a PeopleStage element - the delivery actions of the element that have run 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, TimeStarted, TimeFinished, NumberOfErrors. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, TimeStarted, TimeFinished, NumberOfErrors. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsDeliveryReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsDeliveryReport>> PeopleStageGetPeopleStageElementCompletedDeliveriesAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCompletedDeliveries");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCompletedDeliveries");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCompletedDeliveries");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/CompletedDeliveries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementCompletedDeliveries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsDeliveryReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsDeliveryReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsDeliveryReport)));
        }

        /// <summary>
        /// Returns the actions for a PeopleStage element - the parts of the element that have run 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsStepReport</returns>
        public PagedResultsStepReport PeopleStageGetPeopleStageElementCompletedSteps (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsStepReport> localVarResponse = PeopleStageGetPeopleStageElementCompletedStepsWithHttpInfo(dataViewName, systemName, elementId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the actions for a PeopleStage element - the parts of the element that have run 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsStepReport</returns>
        public ApiResponse< PagedResultsStepReport > PeopleStageGetPeopleStageElementCompletedStepsWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCompletedSteps");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCompletedSteps");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCompletedSteps");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/CompletedSteps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementCompletedSteps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsStepReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsStepReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsStepReport)));
        }

        /// <summary>
        /// Returns the actions for a PeopleStage element - the parts of the element that have run 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsStepReport</returns>
        public async System.Threading.Tasks.Task<PagedResultsStepReport> PeopleStageGetPeopleStageElementCompletedStepsAsync (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsStepReport> localVarResponse = await PeopleStageGetPeopleStageElementCompletedStepsAsyncWithHttpInfo(dataViewName, systemName, elementId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the actions for a PeopleStage element - the parts of the element that have run 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsStepReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsStepReport>> PeopleStageGetPeopleStageElementCompletedStepsAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCompletedSteps");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCompletedSteps");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementCompletedSteps");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/CompletedSteps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementCompletedSteps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsStepReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsStepReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsStepReport)));
        }

        /// <summary>
        /// Returns statistics for the total number of responses received per channel for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ResponseStatistics</returns>
        public ResponseStatistics PeopleStageGetPeopleStageElementResponseStatistics (string dataViewName, string systemName, string elementId)
        {
             ApiResponse<ResponseStatistics> localVarResponse = PeopleStageGetPeopleStageElementResponseStatisticsWithHttpInfo(dataViewName, systemName, elementId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns statistics for the total number of responses received per channel for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ApiResponse of ResponseStatistics</returns>
        public ApiResponse< ResponseStatistics > PeopleStageGetPeopleStageElementResponseStatisticsWithHttpInfo (string dataViewName, string systemName, string elementId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementResponseStatistics");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementResponseStatistics");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementResponseStatistics");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/ResponseStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementResponseStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseStatistics)));
        }

        /// <summary>
        /// Returns statistics for the total number of responses received per channel for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ResponseStatistics</returns>
        public async System.Threading.Tasks.Task<ResponseStatistics> PeopleStageGetPeopleStageElementResponseStatisticsAsync (string dataViewName, string systemName, string elementId)
        {
             ApiResponse<ResponseStatistics> localVarResponse = await PeopleStageGetPeopleStageElementResponseStatisticsAsyncWithHttpInfo(dataViewName, systemName, elementId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns statistics for the total number of responses received per channel for a particular PeopleStage element 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ApiResponse (ResponseStatistics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseStatistics>> PeopleStageGetPeopleStageElementResponseStatisticsAsyncWithHttpInfo (string dataViewName, string systemName, string elementId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementResponseStatistics");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementResponseStatistics");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementResponseStatistics");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/ResponseStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementResponseStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseStatistics)));
        }

        /// <summary>
        /// Returns the actions for a PeopleStage element - the parts of the element that are running 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsActionReport</returns>
        public PagedResultsActionReport PeopleStageGetPeopleStageElementRunning (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsActionReport> localVarResponse = PeopleStageGetPeopleStageElementRunningWithHttpInfo(dataViewName, systemName, elementId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the actions for a PeopleStage element - the parts of the element that are running 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsActionReport</returns>
        public ApiResponse< PagedResultsActionReport > PeopleStageGetPeopleStageElementRunningWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementRunning");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementRunning");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementRunning");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/RunningActions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementRunning", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsActionReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsActionReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsActionReport)));
        }

        /// <summary>
        /// Returns the actions for a PeopleStage element - the parts of the element that are running 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsActionReport</returns>
        public async System.Threading.Tasks.Task<PagedResultsActionReport> PeopleStageGetPeopleStageElementRunningAsync (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsActionReport> localVarResponse = await PeopleStageGetPeopleStageElementRunningAsyncWithHttpInfo(dataViewName, systemName, elementId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the actions for a PeopleStage element - the parts of the element that are running 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsActionReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsActionReport>> PeopleStageGetPeopleStageElementRunningAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementRunning");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementRunning");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementRunning");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/RunningActions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementRunning", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsActionReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsActionReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsActionReport)));
        }

        /// <summary>
        /// Returns the deliveries for a PeopleStage element - the delivery actions of the element that are running 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsDeliveryReport</returns>
        public PagedResultsDeliveryReport PeopleStageGetPeopleStageElementRunningDeliveries (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsDeliveryReport> localVarResponse = PeopleStageGetPeopleStageElementRunningDeliveriesWithHttpInfo(dataViewName, systemName, elementId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the deliveries for a PeopleStage element - the delivery actions of the element that are running 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsDeliveryReport</returns>
        public ApiResponse< PagedResultsDeliveryReport > PeopleStageGetPeopleStageElementRunningDeliveriesWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementRunningDeliveries");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementRunningDeliveries");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementRunningDeliveries");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/RunningDeliveries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementRunningDeliveries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsDeliveryReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsDeliveryReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsDeliveryReport)));
        }

        /// <summary>
        /// Returns the deliveries for a PeopleStage element - the delivery actions of the element that are running 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsDeliveryReport</returns>
        public async System.Threading.Tasks.Task<PagedResultsDeliveryReport> PeopleStageGetPeopleStageElementRunningDeliveriesAsync (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsDeliveryReport> localVarResponse = await PeopleStageGetPeopleStageElementRunningDeliveriesAsyncWithHttpInfo(dataViewName, systemName, elementId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the deliveries for a PeopleStage element - the delivery actions of the element that are running 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsDeliveryReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsDeliveryReport>> PeopleStageGetPeopleStageElementRunningDeliveriesAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementRunningDeliveries");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementRunningDeliveries");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementRunningDeliveries");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/RunningDeliveries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementRunningDeliveries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsDeliveryReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsDeliveryReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsDeliveryReport)));
        }

        /// <summary>
        /// Returns the actions for a PeopleStage element - the parts of the element that are running 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsStepReport</returns>
        public PagedResultsStepReport PeopleStageGetPeopleStageElementRunningSteps (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsStepReport> localVarResponse = PeopleStageGetPeopleStageElementRunningStepsWithHttpInfo(dataViewName, systemName, elementId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the actions for a PeopleStage element - the parts of the element that are running 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsStepReport</returns>
        public ApiResponse< PagedResultsStepReport > PeopleStageGetPeopleStageElementRunningStepsWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementRunningSteps");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementRunningSteps");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementRunningSteps");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/RunningSteps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementRunningSteps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsStepReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsStepReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsStepReport)));
        }

        /// <summary>
        /// Returns the actions for a PeopleStage element - the parts of the element that are running 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsStepReport</returns>
        public async System.Threading.Tasks.Task<PagedResultsStepReport> PeopleStageGetPeopleStageElementRunningStepsAsync (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsStepReport> localVarResponse = await PeopleStageGetPeopleStageElementRunningStepsAsyncWithHttpInfo(dataViewName, systemName, elementId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the actions for a PeopleStage element - the parts of the element that are running 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, CampaignDescription, IsVisible, TimeStarted, TimeFinished. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsStepReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsStepReport>> PeopleStageGetPeopleStageElementRunningStepsAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementRunningSteps");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementRunningSteps");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementRunningSteps");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/RunningSteps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementRunningSteps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsStepReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsStepReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsStepReport)));
        }

        /// <summary>
        /// Returns the status for a PeopleStage element, where status information is available 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ElementStatus</returns>
        public ElementStatus PeopleStageGetPeopleStageElementStatus (string dataViewName, string systemName, string elementId)
        {
             ApiResponse<ElementStatus> localVarResponse = PeopleStageGetPeopleStageElementStatusWithHttpInfo(dataViewName, systemName, elementId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the status for a PeopleStage element, where status information is available 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>ApiResponse of ElementStatus</returns>
        public ApiResponse< ElementStatus > PeopleStageGetPeopleStageElementStatusWithHttpInfo (string dataViewName, string systemName, string elementId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementStatus");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementStatus");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementStatus");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/Status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ElementStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ElementStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ElementStatus)));
        }

        /// <summary>
        /// Returns the status for a PeopleStage element, where status information is available 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ElementStatus</returns>
        public async System.Threading.Tasks.Task<ElementStatus> PeopleStageGetPeopleStageElementStatusAsync (string dataViewName, string systemName, string elementId)
        {
             ApiResponse<ElementStatus> localVarResponse = await PeopleStageGetPeopleStageElementStatusAsyncWithHttpInfo(dataViewName, systemName, elementId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the status for a PeopleStage element, where status information is available 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <returns>Task of ApiResponse (ElementStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ElementStatus>> PeopleStageGetPeopleStageElementStatusAsyncWithHttpInfo (string dataViewName, string systemName, string elementId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementStatus");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementStatus");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementStatus");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/Status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ElementStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ElementStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ElementStatus)));
        }

        /// <summary>
        /// Returns the status for all the descendant elements of a PeopleStage element where status information is available 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsElementStatus</returns>
        public PagedResultsElementStatus PeopleStageGetPeopleStageElementStatusForDescendants (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsElementStatus> localVarResponse = PeopleStageGetPeopleStageElementStatusForDescendantsWithHttpInfo(dataViewName, systemName, elementId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the status for all the descendant elements of a PeopleStage element where status information is available 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsElementStatus</returns>
        public ApiResponse< PagedResultsElementStatus > PeopleStageGetPeopleStageElementStatusForDescendantsWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementStatusForDescendants");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementStatusForDescendants");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementStatusForDescendants");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/Status/Descendants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementStatusForDescendants", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsElementStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsElementStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsElementStatus)));
        }

        /// <summary>
        /// Returns the status for all the descendant elements of a PeopleStage element where status information is available 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsElementStatus</returns>
        public async System.Threading.Tasks.Task<PagedResultsElementStatus> PeopleStageGetPeopleStageElementStatusForDescendantsAsync (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsElementStatus> localVarResponse = await PeopleStageGetPeopleStageElementStatusForDescendantsAsyncWithHttpInfo(dataViewName, systemName, elementId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the status for all the descendant elements of a PeopleStage element where status information is available 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsElementStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsElementStatus>> PeopleStageGetPeopleStageElementStatusForDescendantsAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementStatusForDescendants");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElementStatusForDescendants");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageElementStatusForDescendants");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/Status/Descendants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElementStatusForDescendants", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsElementStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsElementStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsElementStatus)));
        }

        /// <summary>
        /// Returns the list of PeopleStage elements available in this FastStats system 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsElementSummary</returns>
        public PagedResultsElementSummary PeopleStageGetPeopleStageElements (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsElementSummary> localVarResponse = PeopleStageGetPeopleStageElementsWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of PeopleStage elements available in this FastStats system 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsElementSummary</returns>
        public ApiResponse< PagedResultsElementSummary > PeopleStageGetPeopleStageElementsWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElements");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElements");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsElementSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsElementSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsElementSummary)));
        }

        /// <summary>
        /// Returns the list of PeopleStage elements available in this FastStats system 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsElementSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsElementSummary> PeopleStageGetPeopleStageElementsAsync (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsElementSummary> localVarResponse = await PeopleStageGetPeopleStageElementsAsyncWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of PeopleStage elements available in this FastStats system 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsElementSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsElementSummary>> PeopleStageGetPeopleStageElementsAsyncWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageElements");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageElements");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageElements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsElementSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsElementSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsElementSummary)));
        }

        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available. 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>RangeStatistics</returns>
        public RangeStatistics PeopleStageGetPeopleStageRangeStatisticsForDescendantsSync (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null, string dateRange = null)
        {
             ApiResponse<RangeStatistics> localVarResponse = PeopleStageGetPeopleStageRangeStatisticsForDescendantsSyncWithHttpInfo(dataViewName, systemName, elementId, timeoutInSeconds, filter, orderBy, offset, count, dateRange);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available. 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>ApiResponse of RangeStatistics</returns>
        public ApiResponse< RangeStatistics > PeopleStageGetPeopleStageRangeStatisticsForDescendantsSyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null, string dateRange = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageRangeStatisticsForDescendantsSync");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageRangeStatisticsForDescendantsSync");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageRangeStatisticsForDescendantsSync");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/RangeStats/Descendants/Sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (dateRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateRange", dateRange)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageRangeStatisticsForDescendantsSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RangeStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RangeStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RangeStatistics)));
        }

        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available. 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>Task of RangeStatistics</returns>
        public async System.Threading.Tasks.Task<RangeStatistics> PeopleStageGetPeopleStageRangeStatisticsForDescendantsSyncAsync (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null, string dateRange = null)
        {
             ApiResponse<RangeStatistics> localVarResponse = await PeopleStageGetPeopleStageRangeStatisticsForDescendantsSyncAsyncWithHttpInfo(dataViewName, systemName, elementId, timeoutInSeconds, filter, orderBy, offset, count, dateRange);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available. 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>Task of ApiResponse (RangeStatistics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RangeStatistics>> PeopleStageGetPeopleStageRangeStatisticsForDescendantsSyncAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string filter = null, string orderBy = null, int? offset = null, int? count = null, string dateRange = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageRangeStatisticsForDescendantsSync");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageRangeStatisticsForDescendantsSync");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageRangeStatisticsForDescendantsSync");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/RangeStats/Descendants/Sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (dateRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateRange", dateRange)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageRangeStatisticsForDescendantsSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RangeStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RangeStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RangeStatistics)));
        }

        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available. 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>RangeStatistics</returns>
        public RangeStatistics PeopleStageGetPeopleStageRangeStatisticsSync (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string dateRange = null)
        {
             ApiResponse<RangeStatistics> localVarResponse = PeopleStageGetPeopleStageRangeStatisticsSyncWithHttpInfo(dataViewName, systemName, elementId, timeoutInSeconds, dateRange);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available. 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>ApiResponse of RangeStatistics</returns>
        public ApiResponse< RangeStatistics > PeopleStageGetPeopleStageRangeStatisticsSyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string dateRange = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageRangeStatisticsSync");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageRangeStatisticsSync");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageRangeStatisticsSync");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/RangeStats/Sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (dateRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateRange", dateRange)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageRangeStatisticsSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RangeStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RangeStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RangeStatistics)));
        }

        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available. 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>Task of RangeStatistics</returns>
        public async System.Threading.Tasks.Task<RangeStatistics> PeopleStageGetPeopleStageRangeStatisticsSyncAsync (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string dateRange = null)
        {
             ApiResponse<RangeStatistics> localVarResponse = await PeopleStageGetPeopleStageRangeStatisticsSyncAsyncWithHttpInfo(dataViewName, systemName, elementId, timeoutInSeconds, dateRange);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available. 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="elementId">The id of the PeopleStage element to view</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <param name="dateRange">Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date (optional)</param>
        /// <returns>Task of ApiResponse (RangeStatistics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RangeStatistics>> PeopleStageGetPeopleStageRangeStatisticsSyncAsyncWithHttpInfo (string dataViewName, string systemName, string elementId, int? timeoutInSeconds = null, string dateRange = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageRangeStatisticsSync");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageRangeStatisticsSync");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling PeopleStageApi->PeopleStageGetPeopleStageRangeStatisticsSync");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/RangeStats/Sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (dateRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateRange", dateRange)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageRangeStatisticsSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RangeStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RangeStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RangeStatistics)));
        }

        /// <summary>
        /// Returns details of the PeopleStage system for the given system name 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>PeopleStageSystemDetail</returns>
        public PeopleStageSystemDetail PeopleStageGetPeopleStageSystem (string dataViewName, string systemName)
        {
             ApiResponse<PeopleStageSystemDetail> localVarResponse = PeopleStageGetPeopleStageSystemWithHttpInfo(dataViewName, systemName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details of the PeopleStage system for the given system name 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>ApiResponse of PeopleStageSystemDetail</returns>
        public ApiResponse< PeopleStageSystemDetail > PeopleStageGetPeopleStageSystemWithHttpInfo (string dataViewName, string systemName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageSystem");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageSystem");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PeopleStageSystemDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PeopleStageSystemDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PeopleStageSystemDetail)));
        }

        /// <summary>
        /// Returns details of the PeopleStage system for the given system name 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of PeopleStageSystemDetail</returns>
        public async System.Threading.Tasks.Task<PeopleStageSystemDetail> PeopleStageGetPeopleStageSystemAsync (string dataViewName, string systemName)
        {
             ApiResponse<PeopleStageSystemDetail> localVarResponse = await PeopleStageGetPeopleStageSystemAsyncWithHttpInfo(dataViewName, systemName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details of the PeopleStage system for the given system name 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of ApiResponse (PeopleStageSystemDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PeopleStageSystemDetail>> PeopleStageGetPeopleStageSystemAsyncWithHttpInfo (string dataViewName, string systemName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageSystem");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageGetPeopleStageSystem");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PeopleStageSystemDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PeopleStageSystemDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PeopleStageSystemDetail)));
        }

        /// <summary>
        /// Returns the list of systems configured to support PeopleStage 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are SystemName, ProgrammeDescription. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are SystemName, ProgrammeDescription. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsPeopleStageSystemSummary</returns>
        public PagedResultsPeopleStageSystemSummary PeopleStageGetPeopleStageSystems (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsPeopleStageSystemSummary> localVarResponse = PeopleStageGetPeopleStageSystemsWithHttpInfo(dataViewName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of systems configured to support PeopleStage 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are SystemName, ProgrammeDescription. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are SystemName, ProgrammeDescription. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsPeopleStageSystemSummary</returns>
        public ApiResponse< PagedResultsPeopleStageSystemSummary > PeopleStageGetPeopleStageSystemsWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageSystems");

            var localVarPath = "/{dataViewName}/PeopleStage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageSystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsPeopleStageSystemSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsPeopleStageSystemSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsPeopleStageSystemSummary)));
        }

        /// <summary>
        /// Returns the list of systems configured to support PeopleStage 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are SystemName, ProgrammeDescription. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are SystemName, ProgrammeDescription. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsPeopleStageSystemSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsPeopleStageSystemSummary> PeopleStageGetPeopleStageSystemsAsync (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsPeopleStageSystemSummary> localVarResponse = await PeopleStageGetPeopleStageSystemsAsyncWithHttpInfo(dataViewName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of systems configured to support PeopleStage 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are SystemName, ProgrammeDescription. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are SystemName, ProgrammeDescription. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsPeopleStageSystemSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsPeopleStageSystemSummary>> PeopleStageGetPeopleStageSystemsAsyncWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageGetPeopleStageSystems");

            var localVarPath = "/{dataViewName}/PeopleStage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageGetPeopleStageSystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsPeopleStageSystemSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsPeopleStageSystemSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsPeopleStageSystemSummary)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Modify PeopleStage channels This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelDetails">Details for the channels to modify (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <returns>PagedResultsModifyChannelDetailResults</returns>
        public PagedResultsModifyChannelDetailResults PeopleStageModifyChannels (string dataViewName, string systemName, ModifyItemsModifyChannel channelDetails = null, int? timeoutInSeconds = null)
        {
             ApiResponse<PagedResultsModifyChannelDetailResults> localVarResponse = PeopleStageModifyChannelsWithHttpInfo(dataViewName, systemName, channelDetails, timeoutInSeconds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Requires OrbitAdmin: Modify PeopleStage channels This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelDetails">Details for the channels to modify (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <returns>ApiResponse of PagedResultsModifyChannelDetailResults</returns>
        public ApiResponse< PagedResultsModifyChannelDetailResults > PeopleStageModifyChannelsWithHttpInfo (string dataViewName, string systemName, ModifyItemsModifyChannel channelDetails = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageModifyChannels");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageModifyChannels");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (channelDetails != null && channelDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(channelDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = channelDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageModifyChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsModifyChannelDetailResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsModifyChannelDetailResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsModifyChannelDetailResults)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Modify PeopleStage channels This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelDetails">Details for the channels to modify (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <returns>Task of PagedResultsModifyChannelDetailResults</returns>
        public async System.Threading.Tasks.Task<PagedResultsModifyChannelDetailResults> PeopleStageModifyChannelsAsync (string dataViewName, string systemName, ModifyItemsModifyChannel channelDetails = null, int? timeoutInSeconds = null)
        {
             ApiResponse<PagedResultsModifyChannelDetailResults> localVarResponse = await PeopleStageModifyChannelsAsyncWithHttpInfo(dataViewName, systemName, channelDetails, timeoutInSeconds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Requires OrbitAdmin: Modify PeopleStage channels This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="channelDetails">Details for the channels to modify (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service&#39;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsModifyChannelDetailResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsModifyChannelDetailResults>> PeopleStageModifyChannelsAsyncWithHttpInfo (string dataViewName, string systemName, ModifyItemsModifyChannel channelDetails = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageModifyChannels");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageModifyChannels");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/Channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (channelDetails != null && channelDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(channelDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = channelDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageModifyChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsModifyChannelDetailResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsModifyChannelDetailResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsModifyChannelDetailResults)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Get the status of a running modify channels request UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ModifyChannelsJobDetail</returns>
        public ModifyChannelsJobDetail PeopleStageModifyChannelsJob (string dataViewName, string systemName, int? jobId)
        {
             ApiResponse<ModifyChannelsJobDetail> localVarResponse = PeopleStageModifyChannelsJobWithHttpInfo(dataViewName, systemName, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Get the status of a running modify channels request UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of ModifyChannelsJobDetail</returns>
        public ApiResponse< ModifyChannelsJobDetail > PeopleStageModifyChannelsJobWithHttpInfo (string dataViewName, string systemName, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageModifyChannelsJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageModifyChannelsJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling PeopleStageApi->PeopleStageModifyChannelsJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/ChannelsJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageModifyChannelsJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModifyChannelsJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModifyChannelsJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModifyChannelsJobDetail)));
        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Get the status of a running modify channels request UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ModifyChannelsJobDetail</returns>
        public async System.Threading.Tasks.Task<ModifyChannelsJobDetail> PeopleStageModifyChannelsJobAsync (string dataViewName, string systemName, int? jobId)
        {
             ApiResponse<ModifyChannelsJobDetail> localVarResponse = await PeopleStageModifyChannelsJobAsyncWithHttpInfo(dataViewName, systemName, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UNDER DEVELOPMENT: Requires OrbitAdmin: Get the status of a running modify channels request UNDER DEVELOPMENT  This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (ModifyChannelsJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModifyChannelsJobDetail>> PeopleStageModifyChannelsJobAsyncWithHttpInfo (string dataViewName, string systemName, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageModifyChannelsJob");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageModifyChannelsJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling PeopleStageApi->PeopleStageModifyChannelsJob");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/ChannelsJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageModifyChannelsJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModifyChannelsJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModifyChannelsJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModifyChannelsJobDetail)));
        }

        /// <summary>
        /// Create a job to refresh the peoplestage diagram 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns></returns>
        public void PeopleStageRefreshPeopleStageDiagram (string dataViewName, string systemName)
        {
             PeopleStageRefreshPeopleStageDiagramWithHttpInfo(dataViewName, systemName);
        }

        /// <summary>
        /// Create a job to refresh the peoplestage diagram 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PeopleStageRefreshPeopleStageDiagramWithHttpInfo (string dataViewName, string systemName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageRefreshPeopleStageDiagram");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageRefreshPeopleStageDiagram");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/RefreshSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageRefreshPeopleStageDiagram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a job to refresh the peoplestage diagram 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PeopleStageRefreshPeopleStageDiagramAsync (string dataViewName, string systemName)
        {
             await PeopleStageRefreshPeopleStageDiagramAsyncWithHttpInfo(dataViewName, systemName);

        }

        /// <summary>
        /// Create a job to refresh the peoplestage diagram 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to act on</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PeopleStageRefreshPeopleStageDiagramAsyncWithHttpInfo (string dataViewName, string systemName)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling PeopleStageApi->PeopleStageRefreshPeopleStageDiagram");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling PeopleStageApi->PeopleStageRefreshPeopleStageDiagram");

            var localVarPath = "/{dataViewName}/PeopleStage/{systemName}/RefreshSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", this.Configuration.ApiClient.ParameterToString(systemName)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeopleStageRefreshPeopleStageDiagram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
