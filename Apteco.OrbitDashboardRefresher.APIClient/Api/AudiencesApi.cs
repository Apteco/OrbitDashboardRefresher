/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Apteco.OrbitDashboardRefresher.APIClient.Client;
using Apteco.OrbitDashboardRefresher.APIClient.Model;

namespace Apteco.OrbitDashboardRefresher.APIClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAudiencesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get data licensing information for the latest version of this audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for</param>
        /// <param name="dataLicensingDetail">The details required to get data licensing information for an audience (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>LicensingInfo</returns>
        LicensingInfo AudiencesCalculateAudienceDataLicensingSync (string dataViewName, int? audienceId, DataLicensingDetail dataLicensingDetail = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Get data licensing information for the latest version of this audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for</param>
        /// <param name="dataLicensingDetail">The details required to get data licensing information for an audience (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>ApiResponse of LicensingInfo</returns>
        ApiResponse<LicensingInfo> AudiencesCalculateAudienceDataLicensingSyncWithHttpInfo (string dataViewName, int? audienceId, DataLicensingDetail dataLicensingDetail = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Calculate counts against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to produce the end result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="calculateAudienceDetails">The details for calculating this audience. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>AudienceResultDetail</returns>
        AudienceResultDetail AudiencesCalculateAudienceLatestUpdateSync (string dataViewName, int? audienceId, CalculateAudienceDetails calculateAudienceDetails = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Calculate counts against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to produce the end result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="calculateAudienceDetails">The details for calculating this audience. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>ApiResponse of AudienceResultDetail</returns>
        ApiResponse<AudienceResultDetail> AudiencesCalculateAudienceLatestUpdateSyncWithHttpInfo (string dataViewName, int? audienceId, CalculateAudienceDetails calculateAudienceDetails = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Cancel a running data licensing job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the data licensing job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns></returns>
        void AudiencesCancelCalculateAudienceDataLicensingJob (string dataViewName, int? audienceId, int? jobId);

        /// <summary>
        /// Cancel a running data licensing job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the data licensing job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AudiencesCancelCalculateAudienceDataLicensingJobWithHttpInfo (string dataViewName, int? audienceId, int? jobId);
        /// <summary>
        /// Cancel a running calculate job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns></returns>
        void AudiencesCancelCalculateAudienceJob (string dataViewName, int? audienceId, int? jobId);

        /// <summary>
        /// Cancel a running calculate job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AudiencesCancelCalculateAudienceJobWithHttpInfo (string dataViewName, int? audienceId, int? jobId);
        /// <summary>
        /// Cancel a running check job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the check job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns></returns>
        void AudiencesCancelCheckAudienceJob (string dataViewName, int? audienceId, int? jobId);

        /// <summary>
        /// Cancel a running check job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the check job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AudiencesCancelCheckAudienceJobWithHttpInfo (string dataViewName, int? audienceId, int? jobId);
        /// <summary>
        /// Cancel a running save simple campaign for audience job
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to convert</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns></returns>
        void AudiencesCancelConvertToCampaignJob (string dataViewName, int? audienceId, int? jobId);

        /// <summary>
        /// Cancel a running save simple campaign for audience job
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to convert</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AudiencesCancelConvertToCampaignJobWithHttpInfo (string dataViewName, int? audienceId, int? jobId);
        /// <summary>
        /// Cancel a running export job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the export job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns></returns>
        void AudiencesCancelExportAudienceJob (string dataViewName, int? audienceId, int? jobId);

        /// <summary>
        /// Cancel a running export job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the export job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AudiencesCancelExportAudienceJobWithHttpInfo (string dataViewName, int? audienceId, int? jobId);
        /// <summary>
        /// Calculate check statistics against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="checkAudienceDetails">The details for checking this audience. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>AudienceCheckDetail</returns>
        AudienceCheckDetail AudiencesCheckAudienceLatestUpdateSync (string dataViewName, int? audienceId, CheckAudienceDetails checkAudienceDetails = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Calculate check statistics against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="checkAudienceDetails">The details for checking this audience. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>ApiResponse of AudienceCheckDetail</returns>
        ApiResponse<AudienceCheckDetail> AudiencesCheckAudienceLatestUpdateSyncWithHttpInfo (string dataViewName, int? audienceId, CheckAudienceDetails checkAudienceDetails = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Get the status of a running convert audience to campaign job
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to convert</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ConvertAudienceToCampaignJobDetail</returns>
        ConvertAudienceToCampaignJobDetail AudiencesConvertToCampaignJob (string dataViewName, int? audienceId, int? jobId);

        /// <summary>
        /// Get the status of a running convert audience to campaign job
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to convert</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of ConvertAudienceToCampaignJobDetail</returns>
        ApiResponse<ConvertAudienceToCampaignJobDetail> AudiencesConvertToCampaignJobWithHttpInfo (string dataViewName, int? audienceId, int? jobId);
        /// <summary>
        /// Copies an existing audience for the logged in user.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to copy</param>
        /// <param name="audienceDetail">The details used to create the new audience (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for the returned audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>AudienceDetail</returns>
        AudienceDetail AudiencesCopyAudience (string dataViewName, int? audienceId, CopyAudienceDetail audienceDetail = null, bool? includeQueries = null, bool? includeBrief = null);

        /// <summary>
        /// Copies an existing audience for the logged in user.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to copy</param>
        /// <param name="audienceDetail">The details used to create the new audience (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for the returned audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>ApiResponse of AudienceDetail</returns>
        ApiResponse<AudienceDetail> AudiencesCopyAudienceWithHttpInfo (string dataViewName, int? audienceId, CopyAudienceDetail audienceDetail = null, bool? includeQueries = null, bool? includeBrief = null);
        /// <summary>
        /// Creates a new audience from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceDetail">The details for the audience to create.  If you want              to update a specific audience then POST to the /Audiences/{audienceId} URL (optional)</param>
        /// <returns>AudienceDetail</returns>
        AudienceDetail AudiencesCreateAudience (string dataViewName, CreateAudienceDetail audienceDetail = null);

        /// <summary>
        /// Creates a new audience from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceDetail">The details for the audience to create.  If you want              to update a specific audience then POST to the /Audiences/{audienceId} URL (optional)</param>
        /// <returns>ApiResponse of AudienceDetail</returns>
        ApiResponse<AudienceDetail> AudiencesCreateAudienceWithHttpInfo (string dataViewName, CreateAudienceDetail audienceDetail = null);
        /// <summary>
        /// Register a hit (view) for the given audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to register the hit for</param>
        /// <param name="createAudienceHitDetails">Details to register the hit with (optional)</param>
        /// <returns>AudienceHitDetail</returns>
        AudienceHitDetail AudiencesCreateAudienceHitForAudience (string dataViewName, int? audienceId, CreateAudienceHitDetails createAudienceHitDetails = null);

        /// <summary>
        /// Register a hit (view) for the given audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to register the hit for</param>
        /// <param name="createAudienceHitDetails">Details to register the hit with (optional)</param>
        /// <returns>ApiResponse of AudienceHitDetail</returns>
        ApiResponse<AudienceHitDetail> AudiencesCreateAudienceHitForAudienceWithHttpInfo (string dataViewName, int? audienceId, CreateAudienceHitDetails createAudienceHitDetails = null);
        /// <summary>
        /// Updates the details of a particular audience.  If you don&#39;t have an id for the  audience then POST to the /Audiences URL to create a new audience.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to add/update</param>
        /// <param name="createAudienceUpdate">The details for the audience to add/update (optional)</param>
        /// <returns>AudienceUpdateDetail</returns>
        AudienceUpdateDetail AudiencesCreateAudienceUpdate (string dataViewName, int? audienceId, CreateAudienceUpdate createAudienceUpdate = null);

        /// <summary>
        /// Updates the details of a particular audience.  If you don&#39;t have an id for the  audience then POST to the /Audiences URL to create a new audience.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to add/update</param>
        /// <param name="createAudienceUpdate">The details for the audience to add/update (optional)</param>
        /// <returns>ApiResponse of AudienceUpdateDetail</returns>
        ApiResponse<AudienceUpdateDetail> AudiencesCreateAudienceUpdateWithHttpInfo (string dataViewName, int? audienceId, CreateAudienceUpdate createAudienceUpdate = null);
        /// <summary>
        /// Create a new job to get data licensing information for the latest version of this audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for</param>
        /// <param name="dataLicensingDetail">The details required to get data licensing information for an audience (optional)</param>
        /// <returns>AudienceDataLicensingInfoJobDetail</returns>
        AudienceDataLicensingInfoJobDetail AudiencesCreateCalculateAudienceDataLicensingJob (string dataViewName, int? audienceId, DataLicensingDetail dataLicensingDetail = null);

        /// <summary>
        /// Create a new job to get data licensing information for the latest version of this audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for</param>
        /// <param name="dataLicensingDetail">The details required to get data licensing information for an audience (optional)</param>
        /// <returns>ApiResponse of AudienceDataLicensingInfoJobDetail</returns>
        ApiResponse<AudienceDataLicensingInfoJobDetail> AudiencesCreateCalculateAudienceDataLicensingJobWithHttpInfo (string dataViewName, int? audienceId, DataLicensingDetail dataLicensingDetail = null);
        /// <summary>
        /// Create a new job to calculate counts against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to produce the end result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="calculateAudienceDetails">The details for calculating this audience. (optional)</param>
        /// <returns>AudienceCalculateJobDetail</returns>
        AudienceCalculateJobDetail AudiencesCreateCalculateAudienceJobForLatestUpdate (string dataViewName, int? audienceId, CalculateAudienceDetails calculateAudienceDetails = null);

        /// <summary>
        /// Create a new job to calculate counts against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to produce the end result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="calculateAudienceDetails">The details for calculating this audience. (optional)</param>
        /// <returns>ApiResponse of AudienceCalculateJobDetail</returns>
        ApiResponse<AudienceCalculateJobDetail> AudiencesCreateCalculateAudienceJobForLatestUpdateWithHttpInfo (string dataViewName, int? audienceId, CalculateAudienceDetails calculateAudienceDetails = null);
        /// <summary>
        /// Create a new job to calculate check statistics against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="checkAudienceDetails">The details for checking this audience. (optional)</param>
        /// <returns>List&lt;AudienceCheckJobDetail&gt;</returns>
        List<AudienceCheckJobDetail> AudiencesCreateCheckAudienceJobForLatestUpdate (string dataViewName, int? audienceId, CheckAudienceDetails checkAudienceDetails = null);

        /// <summary>
        /// Create a new job to calculate check statistics against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="checkAudienceDetails">The details for checking this audience. (optional)</param>
        /// <returns>ApiResponse of List&lt;AudienceCheckJobDetail&gt;</returns>
        ApiResponse<List<AudienceCheckJobDetail>> AudiencesCreateCheckAudienceJobForLatestUpdateWithHttpInfo (string dataViewName, int? audienceId, CheckAudienceDetails checkAudienceDetails = null);
        /// <summary>
        /// Creates a job to convert an audience to a PeopleStage campaign. The campaign is saved but not published.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to convert</param>
        /// <param name="requestData">Used to pass additional metadata about the campaign to create (optional)</param>
        /// <returns>ConvertAudienceToCampaignJobDetail</returns>
        ConvertAudienceToCampaignJobDetail AudiencesCreateConvertToCampaignJob (string dataViewName, int? audienceId, ConvertAudienceToCampaignDetails requestData = null);

        /// <summary>
        /// Creates a job to convert an audience to a PeopleStage campaign. The campaign is saved but not published.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to convert</param>
        /// <param name="requestData">Used to pass additional metadata about the campaign to create (optional)</param>
        /// <returns>ApiResponse of ConvertAudienceToCampaignJobDetail</returns>
        ApiResponse<ConvertAudienceToCampaignJobDetail> AudiencesCreateConvertToCampaignJobWithHttpInfo (string dataViewName, int? audienceId, ConvertAudienceToCampaignDetails requestData = null);
        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result
        /// </summary>
        /// <remarks>
        /// Might require licence flags [Export]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to export data for.</param>
        /// <param name="exportAudienceDetails">The details for exporting this audience. (optional)</param>
        /// <returns>AudienceExportJobDetail</returns>
        AudienceExportJobDetail AudiencesCreateExportAudienceJobForLatestUpdate (string dataViewName, int? audienceId, ExportAudienceDetails exportAudienceDetails = null);

        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result
        /// </summary>
        /// <remarks>
        /// Might require licence flags [Export]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to export data for.</param>
        /// <param name="exportAudienceDetails">The details for exporting this audience. (optional)</param>
        /// <returns>ApiResponse of AudienceExportJobDetail</returns>
        ApiResponse<AudienceExportJobDetail> AudiencesCreateExportAudienceJobForLatestUpdateWithHttpInfo (string dataViewName, int? audienceId, ExportAudienceDetails exportAudienceDetails = null);
        /// <summary>
        /// Deletes the specified audience
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to delete</param>
        /// <returns></returns>
        void AudiencesDeleteAudience (string dataViewName, int? audienceId);

        /// <summary>
        /// Deletes the specified audience
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AudiencesDeleteAudienceWithHttpInfo (string dataViewName, int? audienceId);
        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result
        /// </summary>
        /// <remarks>
        /// Might require licence flags [Export]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to export data for.</param>
        /// <param name="exportAudienceDetails">The details for calculating this audience. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>AudienceExportDetail</returns>
        AudienceExportDetail AudiencesExportAudienceLatestUpdateSync (string dataViewName, int? audienceId, ExportAudienceDetails exportAudienceDetails = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result
        /// </summary>
        /// <remarks>
        /// Might require licence flags [Export]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to export data for.</param>
        /// <param name="exportAudienceDetails">The details for calculating this audience. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>ApiResponse of AudienceExportDetail</returns>
        ApiResponse<AudienceExportDetail> AudiencesExportAudienceLatestUpdateSyncWithHttpInfo (string dataViewName, int? audienceId, ExportAudienceDetails exportAudienceDetails = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Returns the details of a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to view</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>AudienceDetail</returns>
        AudienceDetail AudiencesGetAudience (string dataViewName, int? audienceId, bool? includeQueries = null, bool? includeBrief = null);

        /// <summary>
        /// Returns the details of a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to view</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>ApiResponse of AudienceDetail</returns>
        ApiResponse<AudienceDetail> AudiencesGetAudienceWithHttpInfo (string dataViewName, int? audienceId, bool? includeQueries = null, bool? includeBrief = null);
        /// <summary>
        /// Returns details for a given audience hit for this audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the hit information for</param>
        /// <param name="audienceHitId">The id of the hit</param>
        /// <returns>AudienceHitDetail</returns>
        AudienceHitDetail AudiencesGetAudienceHitForAudience (string dataViewName, int? audienceId, int? audienceHitId);

        /// <summary>
        /// Returns details for a given audience hit for this audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the hit information for</param>
        /// <param name="audienceHitId">The id of the hit</param>
        /// <returns>ApiResponse of AudienceHitDetail</returns>
        ApiResponse<AudienceHitDetail> AudiencesGetAudienceHitForAudienceWithHttpInfo (string dataViewName, int? audienceId, int? audienceHitId);
        /// <summary>
        /// Returns a summary of the hits for this audience - i.e. information about when users have viewed the audience.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsAudienceHitSummary</returns>
        PagedResultsAudienceHitSummary AudiencesGetAudienceHitsForAudience (string dataViewName, int? audienceId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of the hits for this audience - i.e. information about when users have viewed the audience.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsAudienceHitSummary</returns>
        ApiResponse<PagedResultsAudienceHitSummary> AudiencesGetAudienceHitsForAudienceWithHttpInfo (string dataViewName, int? audienceId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns native XML (i.e. for use with other FastStats applications) for the Nett query of the latest update for a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience</param>
        /// <returns>string</returns>
        string AudiencesGetAudienceLatestNativeForNettQuery (string dataViewName, int? audienceId);

        /// <summary>
        /// Returns native XML (i.e. for use with other FastStats applications) for the Nett query of the latest update for a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> AudiencesGetAudienceLatestNativeForNettQueryWithHttpInfo (string dataViewName, int? audienceId);
        /// <summary>
        /// Returns details of a particular result for a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the results for</param>
        /// <param name="audienceResultId">The id of the result for the audience</param>
        /// <returns>AudienceResultDetail</returns>
        AudienceResultDetail AudiencesGetAudienceResult (string dataViewName, int? audienceId, int? audienceResultId);

        /// <summary>
        /// Returns details of a particular result for a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the results for</param>
        /// <param name="audienceResultId">The id of the result for the audience</param>
        /// <returns>ApiResponse of AudienceResultDetail</returns>
        ApiResponse<AudienceResultDetail> AudiencesGetAudienceResultWithHttpInfo (string dataViewName, int? audienceId, int? audienceResultId);
        /// <summary>
        /// Returns a summary of the results for a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the audience of results for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, AudienceUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, AudienceUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsAudienceResultSummary</returns>
        PagedResultsAudienceResultSummary AudiencesGetAudienceResults (string dataViewName, int? audienceId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of the results for a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the audience of results for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, AudienceUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, AudienceUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsAudienceResultSummary</returns>
        ApiResponse<PagedResultsAudienceResultSummary> AudiencesGetAudienceResultsWithHttpInfo (string dataViewName, int? audienceId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns details of an update for a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that contains the update</param>
        /// <param name="audienceUpdateId">The id of the update for the audience</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this update or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this update or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>AudienceUpdateDetail</returns>
        AudienceUpdateDetail AudiencesGetAudienceUpdate (string dataViewName, int? audienceId, int? audienceUpdateId, bool? includeQueries = null, bool? includeBrief = null);

        /// <summary>
        /// Returns details of an update for a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that contains the update</param>
        /// <param name="audienceUpdateId">The id of the update for the audience</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this update or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this update or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>ApiResponse of AudienceUpdateDetail</returns>
        ApiResponse<AudienceUpdateDetail> AudiencesGetAudienceUpdateWithHttpInfo (string dataViewName, int? audienceId, int? audienceUpdateId, bool? includeQueries = null, bool? includeBrief = null);
        /// <summary>
        /// Returns a summary of the updates to a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the updates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsAudienceUpdateSummary</returns>
        PagedResultsAudienceUpdateSummary AudiencesGetAudienceUpdates (string dataViewName, int? audienceId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of the updates to a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the updates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsAudienceUpdateSummary</returns>
        ApiResponse<PagedResultsAudienceUpdateSummary> AudiencesGetAudienceUpdatesWithHttpInfo (string dataViewName, int? audienceId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Requires OrbitAdmin: Gets summary information about each audience in the DataView.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted audience, not deleted audience or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsAudienceSummary</returns>
        PagedResultsAudienceSummary AudiencesGetAudiences (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Requires OrbitAdmin: Gets summary information about each audience in the DataView.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted audience, not deleted audience or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsAudienceSummary</returns>
        ApiResponse<PagedResultsAudienceSummary> AudiencesGetAudiencesWithHttpInfo (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Get the status of a running calculate job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <param name="dataLicensingDetail">The details required to get data licensing information for an audience (optional)</param>
        /// <returns>AudienceDataLicensingInfoJobDetail</returns>
        AudienceDataLicensingInfoJobDetail AudiencesGetCalculateAudienceDataLicensingJob (string dataViewName, int? audienceId, int? jobId, DataLicensingDetail dataLicensingDetail = null);

        /// <summary>
        /// Get the status of a running calculate job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <param name="dataLicensingDetail">The details required to get data licensing information for an audience (optional)</param>
        /// <returns>ApiResponse of AudienceDataLicensingInfoJobDetail</returns>
        ApiResponse<AudienceDataLicensingInfoJobDetail> AudiencesGetCalculateAudienceDataLicensingJobWithHttpInfo (string dataViewName, int? audienceId, int? jobId, DataLicensingDetail dataLicensingDetail = null);
        /// <summary>
        /// Get the status of a running calculate job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>AudienceCalculateJobDetail</returns>
        AudienceCalculateJobDetail AudiencesGetCalculateAudienceJob (string dataViewName, int? audienceId, int? jobId);

        /// <summary>
        /// Get the status of a running calculate job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of AudienceCalculateJobDetail</returns>
        ApiResponse<AudienceCalculateJobDetail> AudiencesGetCalculateAudienceJobWithHttpInfo (string dataViewName, int? audienceId, int? jobId);
        /// <summary>
        /// Get the status of a running check job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the check job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>AudienceCheckJobDetail</returns>
        AudienceCheckJobDetail AudiencesGetCheckAudienceJob (string dataViewName, int? audienceId, int? jobId);

        /// <summary>
        /// Get the status of a running check job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the check job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of AudienceCheckJobDetail</returns>
        ApiResponse<AudienceCheckJobDetail> AudiencesGetCheckAudienceJobWithHttpInfo (string dataViewName, int? audienceId, int? jobId);
        /// <summary>
        /// Get the status of a running export job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the export job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>AudienceExportJobDetail</returns>
        AudienceExportJobDetail AudiencesGetExportAudienceJob (string dataViewName, int? audienceId, int? jobId);

        /// <summary>
        /// Get the status of a running export job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the export job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of AudienceExportJobDetail</returns>
        ApiResponse<AudienceExportJobDetail> AudiencesGetExportAudienceJobWithHttpInfo (string dataViewName, int? audienceId, int? jobId);
        /// <summary>
        /// Transfer ownership of an audience from the current user to a new owner
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to transfer.</param>
        /// <param name="transferOwnershipDetails">The details for transferring ownership of the audience. (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for the returned audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>AudienceDetail</returns>
        AudienceDetail AudiencesTransferAudienceOwnership (string dataViewName, int? audienceId, TransferAudienceOwnershipDetails transferOwnershipDetails = null, bool? includeQueries = null, bool? includeBrief = null);

        /// <summary>
        /// Transfer ownership of an audience from the current user to a new owner
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to transfer.</param>
        /// <param name="transferOwnershipDetails">The details for transferring ownership of the audience. (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for the returned audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>ApiResponse of AudienceDetail</returns>
        ApiResponse<AudienceDetail> AudiencesTransferAudienceOwnershipWithHttpInfo (string dataViewName, int? audienceId, TransferAudienceOwnershipDetails transferOwnershipDetails = null, bool? includeQueries = null, bool? includeBrief = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get data licensing information for the latest version of this audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for</param>
        /// <param name="dataLicensingDetail">The details required to get data licensing information for an audience (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>Task of LicensingInfo</returns>
        System.Threading.Tasks.Task<LicensingInfo> AudiencesCalculateAudienceDataLicensingSyncAsync (string dataViewName, int? audienceId, DataLicensingDetail dataLicensingDetail = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Get data licensing information for the latest version of this audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for</param>
        /// <param name="dataLicensingDetail">The details required to get data licensing information for an audience (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (LicensingInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<LicensingInfo>> AudiencesCalculateAudienceDataLicensingSyncAsyncWithHttpInfo (string dataViewName, int? audienceId, DataLicensingDetail dataLicensingDetail = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Calculate counts against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to produce the end result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="calculateAudienceDetails">The details for calculating this audience. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>Task of AudienceResultDetail</returns>
        System.Threading.Tasks.Task<AudienceResultDetail> AudiencesCalculateAudienceLatestUpdateSyncAsync (string dataViewName, int? audienceId, CalculateAudienceDetails calculateAudienceDetails = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Calculate counts against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to produce the end result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="calculateAudienceDetails">The details for calculating this audience. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (AudienceResultDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<AudienceResultDetail>> AudiencesCalculateAudienceLatestUpdateSyncAsyncWithHttpInfo (string dataViewName, int? audienceId, CalculateAudienceDetails calculateAudienceDetails = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Cancel a running data licensing job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the data licensing job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AudiencesCancelCalculateAudienceDataLicensingJobAsync (string dataViewName, int? audienceId, int? jobId);

        /// <summary>
        /// Cancel a running data licensing job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the data licensing job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AudiencesCancelCalculateAudienceDataLicensingJobAsyncWithHttpInfo (string dataViewName, int? audienceId, int? jobId);
        /// <summary>
        /// Cancel a running calculate job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AudiencesCancelCalculateAudienceJobAsync (string dataViewName, int? audienceId, int? jobId);

        /// <summary>
        /// Cancel a running calculate job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AudiencesCancelCalculateAudienceJobAsyncWithHttpInfo (string dataViewName, int? audienceId, int? jobId);
        /// <summary>
        /// Cancel a running check job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the check job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AudiencesCancelCheckAudienceJobAsync (string dataViewName, int? audienceId, int? jobId);

        /// <summary>
        /// Cancel a running check job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the check job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AudiencesCancelCheckAudienceJobAsyncWithHttpInfo (string dataViewName, int? audienceId, int? jobId);
        /// <summary>
        /// Cancel a running save simple campaign for audience job
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to convert</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AudiencesCancelConvertToCampaignJobAsync (string dataViewName, int? audienceId, int? jobId);

        /// <summary>
        /// Cancel a running save simple campaign for audience job
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to convert</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AudiencesCancelConvertToCampaignJobAsyncWithHttpInfo (string dataViewName, int? audienceId, int? jobId);
        /// <summary>
        /// Cancel a running export job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the export job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AudiencesCancelExportAudienceJobAsync (string dataViewName, int? audienceId, int? jobId);

        /// <summary>
        /// Cancel a running export job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the export job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AudiencesCancelExportAudienceJobAsyncWithHttpInfo (string dataViewName, int? audienceId, int? jobId);
        /// <summary>
        /// Calculate check statistics against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="checkAudienceDetails">The details for checking this audience. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>Task of AudienceCheckDetail</returns>
        System.Threading.Tasks.Task<AudienceCheckDetail> AudiencesCheckAudienceLatestUpdateSyncAsync (string dataViewName, int? audienceId, CheckAudienceDetails checkAudienceDetails = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Calculate check statistics against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="checkAudienceDetails">The details for checking this audience. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (AudienceCheckDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<AudienceCheckDetail>> AudiencesCheckAudienceLatestUpdateSyncAsyncWithHttpInfo (string dataViewName, int? audienceId, CheckAudienceDetails checkAudienceDetails = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Get the status of a running convert audience to campaign job
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to convert</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ConvertAudienceToCampaignJobDetail</returns>
        System.Threading.Tasks.Task<ConvertAudienceToCampaignJobDetail> AudiencesConvertToCampaignJobAsync (string dataViewName, int? audienceId, int? jobId);

        /// <summary>
        /// Get the status of a running convert audience to campaign job
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to convert</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (ConvertAudienceToCampaignJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvertAudienceToCampaignJobDetail>> AudiencesConvertToCampaignJobAsyncWithHttpInfo (string dataViewName, int? audienceId, int? jobId);
        /// <summary>
        /// Copies an existing audience for the logged in user.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to copy</param>
        /// <param name="audienceDetail">The details used to create the new audience (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for the returned audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of AudienceDetail</returns>
        System.Threading.Tasks.Task<AudienceDetail> AudiencesCopyAudienceAsync (string dataViewName, int? audienceId, CopyAudienceDetail audienceDetail = null, bool? includeQueries = null, bool? includeBrief = null);

        /// <summary>
        /// Copies an existing audience for the logged in user.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to copy</param>
        /// <param name="audienceDetail">The details used to create the new audience (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for the returned audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of ApiResponse (AudienceDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<AudienceDetail>> AudiencesCopyAudienceAsyncWithHttpInfo (string dataViewName, int? audienceId, CopyAudienceDetail audienceDetail = null, bool? includeQueries = null, bool? includeBrief = null);
        /// <summary>
        /// Creates a new audience from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceDetail">The details for the audience to create.  If you want              to update a specific audience then POST to the /Audiences/{audienceId} URL (optional)</param>
        /// <returns>Task of AudienceDetail</returns>
        System.Threading.Tasks.Task<AudienceDetail> AudiencesCreateAudienceAsync (string dataViewName, CreateAudienceDetail audienceDetail = null);

        /// <summary>
        /// Creates a new audience from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceDetail">The details for the audience to create.  If you want              to update a specific audience then POST to the /Audiences/{audienceId} URL (optional)</param>
        /// <returns>Task of ApiResponse (AudienceDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<AudienceDetail>> AudiencesCreateAudienceAsyncWithHttpInfo (string dataViewName, CreateAudienceDetail audienceDetail = null);
        /// <summary>
        /// Register a hit (view) for the given audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to register the hit for</param>
        /// <param name="createAudienceHitDetails">Details to register the hit with (optional)</param>
        /// <returns>Task of AudienceHitDetail</returns>
        System.Threading.Tasks.Task<AudienceHitDetail> AudiencesCreateAudienceHitForAudienceAsync (string dataViewName, int? audienceId, CreateAudienceHitDetails createAudienceHitDetails = null);

        /// <summary>
        /// Register a hit (view) for the given audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to register the hit for</param>
        /// <param name="createAudienceHitDetails">Details to register the hit with (optional)</param>
        /// <returns>Task of ApiResponse (AudienceHitDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<AudienceHitDetail>> AudiencesCreateAudienceHitForAudienceAsyncWithHttpInfo (string dataViewName, int? audienceId, CreateAudienceHitDetails createAudienceHitDetails = null);
        /// <summary>
        /// Updates the details of a particular audience.  If you don&#39;t have an id for the  audience then POST to the /Audiences URL to create a new audience.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to add/update</param>
        /// <param name="createAudienceUpdate">The details for the audience to add/update (optional)</param>
        /// <returns>Task of AudienceUpdateDetail</returns>
        System.Threading.Tasks.Task<AudienceUpdateDetail> AudiencesCreateAudienceUpdateAsync (string dataViewName, int? audienceId, CreateAudienceUpdate createAudienceUpdate = null);

        /// <summary>
        /// Updates the details of a particular audience.  If you don&#39;t have an id for the  audience then POST to the /Audiences URL to create a new audience.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to add/update</param>
        /// <param name="createAudienceUpdate">The details for the audience to add/update (optional)</param>
        /// <returns>Task of ApiResponse (AudienceUpdateDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<AudienceUpdateDetail>> AudiencesCreateAudienceUpdateAsyncWithHttpInfo (string dataViewName, int? audienceId, CreateAudienceUpdate createAudienceUpdate = null);
        /// <summary>
        /// Create a new job to get data licensing information for the latest version of this audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for</param>
        /// <param name="dataLicensingDetail">The details required to get data licensing information for an audience (optional)</param>
        /// <returns>Task of AudienceDataLicensingInfoJobDetail</returns>
        System.Threading.Tasks.Task<AudienceDataLicensingInfoJobDetail> AudiencesCreateCalculateAudienceDataLicensingJobAsync (string dataViewName, int? audienceId, DataLicensingDetail dataLicensingDetail = null);

        /// <summary>
        /// Create a new job to get data licensing information for the latest version of this audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for</param>
        /// <param name="dataLicensingDetail">The details required to get data licensing information for an audience (optional)</param>
        /// <returns>Task of ApiResponse (AudienceDataLicensingInfoJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<AudienceDataLicensingInfoJobDetail>> AudiencesCreateCalculateAudienceDataLicensingJobAsyncWithHttpInfo (string dataViewName, int? audienceId, DataLicensingDetail dataLicensingDetail = null);
        /// <summary>
        /// Create a new job to calculate counts against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to produce the end result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="calculateAudienceDetails">The details for calculating this audience. (optional)</param>
        /// <returns>Task of AudienceCalculateJobDetail</returns>
        System.Threading.Tasks.Task<AudienceCalculateJobDetail> AudiencesCreateCalculateAudienceJobForLatestUpdateAsync (string dataViewName, int? audienceId, CalculateAudienceDetails calculateAudienceDetails = null);

        /// <summary>
        /// Create a new job to calculate counts against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to produce the end result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="calculateAudienceDetails">The details for calculating this audience. (optional)</param>
        /// <returns>Task of ApiResponse (AudienceCalculateJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<AudienceCalculateJobDetail>> AudiencesCreateCalculateAudienceJobForLatestUpdateAsyncWithHttpInfo (string dataViewName, int? audienceId, CalculateAudienceDetails calculateAudienceDetails = null);
        /// <summary>
        /// Create a new job to calculate check statistics against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="checkAudienceDetails">The details for checking this audience. (optional)</param>
        /// <returns>Task of List&lt;AudienceCheckJobDetail&gt;</returns>
        System.Threading.Tasks.Task<List<AudienceCheckJobDetail>> AudiencesCreateCheckAudienceJobForLatestUpdateAsync (string dataViewName, int? audienceId, CheckAudienceDetails checkAudienceDetails = null);

        /// <summary>
        /// Create a new job to calculate check statistics against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="checkAudienceDetails">The details for checking this audience. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AudienceCheckJobDetail&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AudienceCheckJobDetail>>> AudiencesCreateCheckAudienceJobForLatestUpdateAsyncWithHttpInfo (string dataViewName, int? audienceId, CheckAudienceDetails checkAudienceDetails = null);
        /// <summary>
        /// Creates a job to convert an audience to a PeopleStage campaign. The campaign is saved but not published.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to convert</param>
        /// <param name="requestData">Used to pass additional metadata about the campaign to create (optional)</param>
        /// <returns>Task of ConvertAudienceToCampaignJobDetail</returns>
        System.Threading.Tasks.Task<ConvertAudienceToCampaignJobDetail> AudiencesCreateConvertToCampaignJobAsync (string dataViewName, int? audienceId, ConvertAudienceToCampaignDetails requestData = null);

        /// <summary>
        /// Creates a job to convert an audience to a PeopleStage campaign. The campaign is saved but not published.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to convert</param>
        /// <param name="requestData">Used to pass additional metadata about the campaign to create (optional)</param>
        /// <returns>Task of ApiResponse (ConvertAudienceToCampaignJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvertAudienceToCampaignJobDetail>> AudiencesCreateConvertToCampaignJobAsyncWithHttpInfo (string dataViewName, int? audienceId, ConvertAudienceToCampaignDetails requestData = null);
        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result
        /// </summary>
        /// <remarks>
        /// Might require licence flags [Export]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to export data for.</param>
        /// <param name="exportAudienceDetails">The details for exporting this audience. (optional)</param>
        /// <returns>Task of AudienceExportJobDetail</returns>
        System.Threading.Tasks.Task<AudienceExportJobDetail> AudiencesCreateExportAudienceJobForLatestUpdateAsync (string dataViewName, int? audienceId, ExportAudienceDetails exportAudienceDetails = null);

        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result
        /// </summary>
        /// <remarks>
        /// Might require licence flags [Export]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to export data for.</param>
        /// <param name="exportAudienceDetails">The details for exporting this audience. (optional)</param>
        /// <returns>Task of ApiResponse (AudienceExportJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<AudienceExportJobDetail>> AudiencesCreateExportAudienceJobForLatestUpdateAsyncWithHttpInfo (string dataViewName, int? audienceId, ExportAudienceDetails exportAudienceDetails = null);
        /// <summary>
        /// Deletes the specified audience
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AudiencesDeleteAudienceAsync (string dataViewName, int? audienceId);

        /// <summary>
        /// Deletes the specified audience
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AudiencesDeleteAudienceAsyncWithHttpInfo (string dataViewName, int? audienceId);
        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result
        /// </summary>
        /// <remarks>
        /// Might require licence flags [Export]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to export data for.</param>
        /// <param name="exportAudienceDetails">The details for calculating this audience. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>Task of AudienceExportDetail</returns>
        System.Threading.Tasks.Task<AudienceExportDetail> AudiencesExportAudienceLatestUpdateSyncAsync (string dataViewName, int? audienceId, ExportAudienceDetails exportAudienceDetails = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result
        /// </summary>
        /// <remarks>
        /// Might require licence flags [Export]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to export data for.</param>
        /// <param name="exportAudienceDetails">The details for calculating this audience. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (AudienceExportDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<AudienceExportDetail>> AudiencesExportAudienceLatestUpdateSyncAsyncWithHttpInfo (string dataViewName, int? audienceId, ExportAudienceDetails exportAudienceDetails = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Returns the details of a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to view</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of AudienceDetail</returns>
        System.Threading.Tasks.Task<AudienceDetail> AudiencesGetAudienceAsync (string dataViewName, int? audienceId, bool? includeQueries = null, bool? includeBrief = null);

        /// <summary>
        /// Returns the details of a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to view</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of ApiResponse (AudienceDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<AudienceDetail>> AudiencesGetAudienceAsyncWithHttpInfo (string dataViewName, int? audienceId, bool? includeQueries = null, bool? includeBrief = null);
        /// <summary>
        /// Returns details for a given audience hit for this audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the hit information for</param>
        /// <param name="audienceHitId">The id of the hit</param>
        /// <returns>Task of AudienceHitDetail</returns>
        System.Threading.Tasks.Task<AudienceHitDetail> AudiencesGetAudienceHitForAudienceAsync (string dataViewName, int? audienceId, int? audienceHitId);

        /// <summary>
        /// Returns details for a given audience hit for this audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the hit information for</param>
        /// <param name="audienceHitId">The id of the hit</param>
        /// <returns>Task of ApiResponse (AudienceHitDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<AudienceHitDetail>> AudiencesGetAudienceHitForAudienceAsyncWithHttpInfo (string dataViewName, int? audienceId, int? audienceHitId);
        /// <summary>
        /// Returns a summary of the hits for this audience - i.e. information about when users have viewed the audience.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsAudienceHitSummary</returns>
        System.Threading.Tasks.Task<PagedResultsAudienceHitSummary> AudiencesGetAudienceHitsForAudienceAsync (string dataViewName, int? audienceId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of the hits for this audience - i.e. information about when users have viewed the audience.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsAudienceHitSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsAudienceHitSummary>> AudiencesGetAudienceHitsForAudienceAsyncWithHttpInfo (string dataViewName, int? audienceId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns native XML (i.e. for use with other FastStats applications) for the Nett query of the latest update for a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> AudiencesGetAudienceLatestNativeForNettQueryAsync (string dataViewName, int? audienceId);

        /// <summary>
        /// Returns native XML (i.e. for use with other FastStats applications) for the Nett query of the latest update for a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> AudiencesGetAudienceLatestNativeForNettQueryAsyncWithHttpInfo (string dataViewName, int? audienceId);
        /// <summary>
        /// Returns details of a particular result for a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the results for</param>
        /// <param name="audienceResultId">The id of the result for the audience</param>
        /// <returns>Task of AudienceResultDetail</returns>
        System.Threading.Tasks.Task<AudienceResultDetail> AudiencesGetAudienceResultAsync (string dataViewName, int? audienceId, int? audienceResultId);

        /// <summary>
        /// Returns details of a particular result for a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the results for</param>
        /// <param name="audienceResultId">The id of the result for the audience</param>
        /// <returns>Task of ApiResponse (AudienceResultDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<AudienceResultDetail>> AudiencesGetAudienceResultAsyncWithHttpInfo (string dataViewName, int? audienceId, int? audienceResultId);
        /// <summary>
        /// Returns a summary of the results for a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the audience of results for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, AudienceUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, AudienceUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsAudienceResultSummary</returns>
        System.Threading.Tasks.Task<PagedResultsAudienceResultSummary> AudiencesGetAudienceResultsAsync (string dataViewName, int? audienceId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of the results for a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the audience of results for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, AudienceUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, AudienceUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsAudienceResultSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsAudienceResultSummary>> AudiencesGetAudienceResultsAsyncWithHttpInfo (string dataViewName, int? audienceId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns details of an update for a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that contains the update</param>
        /// <param name="audienceUpdateId">The id of the update for the audience</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this update or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this update or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of AudienceUpdateDetail</returns>
        System.Threading.Tasks.Task<AudienceUpdateDetail> AudiencesGetAudienceUpdateAsync (string dataViewName, int? audienceId, int? audienceUpdateId, bool? includeQueries = null, bool? includeBrief = null);

        /// <summary>
        /// Returns details of an update for a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that contains the update</param>
        /// <param name="audienceUpdateId">The id of the update for the audience</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this update or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this update or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of ApiResponse (AudienceUpdateDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<AudienceUpdateDetail>> AudiencesGetAudienceUpdateAsyncWithHttpInfo (string dataViewName, int? audienceId, int? audienceUpdateId, bool? includeQueries = null, bool? includeBrief = null);
        /// <summary>
        /// Returns a summary of the updates to a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the updates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsAudienceUpdateSummary</returns>
        System.Threading.Tasks.Task<PagedResultsAudienceUpdateSummary> AudiencesGetAudienceUpdatesAsync (string dataViewName, int? audienceId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of the updates to a particular audience
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the updates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsAudienceUpdateSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsAudienceUpdateSummary>> AudiencesGetAudienceUpdatesAsyncWithHttpInfo (string dataViewName, int? audienceId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Requires OrbitAdmin: Gets summary information about each audience in the DataView.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted audience, not deleted audience or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsAudienceSummary</returns>
        System.Threading.Tasks.Task<PagedResultsAudienceSummary> AudiencesGetAudiencesAsync (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Requires OrbitAdmin: Gets summary information about each audience in the DataView.
        /// </summary>
        /// <remarks>
        /// This endpoint is only available for users with the OrbitAdmin role
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted audience, not deleted audience or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsAudienceSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsAudienceSummary>> AudiencesGetAudiencesAsyncWithHttpInfo (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Get the status of a running calculate job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <param name="dataLicensingDetail">The details required to get data licensing information for an audience (optional)</param>
        /// <returns>Task of AudienceDataLicensingInfoJobDetail</returns>
        System.Threading.Tasks.Task<AudienceDataLicensingInfoJobDetail> AudiencesGetCalculateAudienceDataLicensingJobAsync (string dataViewName, int? audienceId, int? jobId, DataLicensingDetail dataLicensingDetail = null);

        /// <summary>
        /// Get the status of a running calculate job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <param name="dataLicensingDetail">The details required to get data licensing information for an audience (optional)</param>
        /// <returns>Task of ApiResponse (AudienceDataLicensingInfoJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<AudienceDataLicensingInfoJobDetail>> AudiencesGetCalculateAudienceDataLicensingJobAsyncWithHttpInfo (string dataViewName, int? audienceId, int? jobId, DataLicensingDetail dataLicensingDetail = null);
        /// <summary>
        /// Get the status of a running calculate job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of AudienceCalculateJobDetail</returns>
        System.Threading.Tasks.Task<AudienceCalculateJobDetail> AudiencesGetCalculateAudienceJobAsync (string dataViewName, int? audienceId, int? jobId);

        /// <summary>
        /// Get the status of a running calculate job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (AudienceCalculateJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<AudienceCalculateJobDetail>> AudiencesGetCalculateAudienceJobAsyncWithHttpInfo (string dataViewName, int? audienceId, int? jobId);
        /// <summary>
        /// Get the status of a running check job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the check job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of AudienceCheckJobDetail</returns>
        System.Threading.Tasks.Task<AudienceCheckJobDetail> AudiencesGetCheckAudienceJobAsync (string dataViewName, int? audienceId, int? jobId);

        /// <summary>
        /// Get the status of a running check job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the check job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (AudienceCheckJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<AudienceCheckJobDetail>> AudiencesGetCheckAudienceJobAsyncWithHttpInfo (string dataViewName, int? audienceId, int? jobId);
        /// <summary>
        /// Get the status of a running export job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the export job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of AudienceExportJobDetail</returns>
        System.Threading.Tasks.Task<AudienceExportJobDetail> AudiencesGetExportAudienceJobAsync (string dataViewName, int? audienceId, int? jobId);

        /// <summary>
        /// Get the status of a running export job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the export job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (AudienceExportJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<AudienceExportJobDetail>> AudiencesGetExportAudienceJobAsyncWithHttpInfo (string dataViewName, int? audienceId, int? jobId);
        /// <summary>
        /// Transfer ownership of an audience from the current user to a new owner
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to transfer.</param>
        /// <param name="transferOwnershipDetails">The details for transferring ownership of the audience. (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for the returned audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of AudienceDetail</returns>
        System.Threading.Tasks.Task<AudienceDetail> AudiencesTransferAudienceOwnershipAsync (string dataViewName, int? audienceId, TransferAudienceOwnershipDetails transferOwnershipDetails = null, bool? includeQueries = null, bool? includeBrief = null);

        /// <summary>
        /// Transfer ownership of an audience from the current user to a new owner
        /// </summary>
        /// <remarks>
        /// Requires licence flags [AudienceSelection]
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to transfer.</param>
        /// <param name="transferOwnershipDetails">The details for transferring ownership of the audience. (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for the returned audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of ApiResponse (AudienceDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<AudienceDetail>> AudiencesTransferAudienceOwnershipAsyncWithHttpInfo (string dataViewName, int? audienceId, TransferAudienceOwnershipDetails transferOwnershipDetails = null, bool? includeQueries = null, bool? includeBrief = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AudiencesApi : IAudiencesApi
    {
        private Apteco.OrbitDashboardRefresher.APIClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AudiencesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AudiencesApi(String basePath)
        {
            this.Configuration = new Apteco.OrbitDashboardRefresher.APIClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.OrbitDashboardRefresher.APIClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AudiencesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AudiencesApi(Apteco.OrbitDashboardRefresher.APIClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Apteco.OrbitDashboardRefresher.APIClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.OrbitDashboardRefresher.APIClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apteco.OrbitDashboardRefresher.APIClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.OrbitDashboardRefresher.APIClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get data licensing information for the latest version of this audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for</param>
        /// <param name="dataLicensingDetail">The details required to get data licensing information for an audience (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>LicensingInfo</returns>
        public LicensingInfo AudiencesCalculateAudienceDataLicensingSync (string dataViewName, int? audienceId, DataLicensingDetail dataLicensingDetail = null, int? timeoutInSeconds = null)
        {
             ApiResponse<LicensingInfo> localVarResponse = AudiencesCalculateAudienceDataLicensingSyncWithHttpInfo(dataViewName, audienceId, dataLicensingDetail, timeoutInSeconds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get data licensing information for the latest version of this audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for</param>
        /// <param name="dataLicensingDetail">The details required to get data licensing information for an audience (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>ApiResponse of LicensingInfo</returns>
        public ApiResponse< LicensingInfo > AudiencesCalculateAudienceDataLicensingSyncWithHttpInfo (string dataViewName, int? audienceId, DataLicensingDetail dataLicensingDetail = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCalculateAudienceDataLicensingSync");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCalculateAudienceDataLicensingSync");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/DataLicensingSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (dataLicensingDetail != null && dataLicensingDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dataLicensingDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataLicensingDetail; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCalculateAudienceDataLicensingSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LicensingInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LicensingInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LicensingInfo)));
        }

        /// <summary>
        /// Get data licensing information for the latest version of this audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for</param>
        /// <param name="dataLicensingDetail">The details required to get data licensing information for an audience (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>Task of LicensingInfo</returns>
        public async System.Threading.Tasks.Task<LicensingInfo> AudiencesCalculateAudienceDataLicensingSyncAsync (string dataViewName, int? audienceId, DataLicensingDetail dataLicensingDetail = null, int? timeoutInSeconds = null)
        {
             ApiResponse<LicensingInfo> localVarResponse = await AudiencesCalculateAudienceDataLicensingSyncAsyncWithHttpInfo(dataViewName, audienceId, dataLicensingDetail, timeoutInSeconds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get data licensing information for the latest version of this audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for</param>
        /// <param name="dataLicensingDetail">The details required to get data licensing information for an audience (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (LicensingInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LicensingInfo>> AudiencesCalculateAudienceDataLicensingSyncAsyncWithHttpInfo (string dataViewName, int? audienceId, DataLicensingDetail dataLicensingDetail = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCalculateAudienceDataLicensingSync");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCalculateAudienceDataLicensingSync");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/DataLicensingSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (dataLicensingDetail != null && dataLicensingDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dataLicensingDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataLicensingDetail; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCalculateAudienceDataLicensingSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LicensingInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LicensingInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LicensingInfo)));
        }

        /// <summary>
        /// Calculate counts against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to produce the end result 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="calculateAudienceDetails">The details for calculating this audience. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>AudienceResultDetail</returns>
        public AudienceResultDetail AudiencesCalculateAudienceLatestUpdateSync (string dataViewName, int? audienceId, CalculateAudienceDetails calculateAudienceDetails = null, int? timeoutInSeconds = null)
        {
             ApiResponse<AudienceResultDetail> localVarResponse = AudiencesCalculateAudienceLatestUpdateSyncWithHttpInfo(dataViewName, audienceId, calculateAudienceDetails, timeoutInSeconds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculate counts against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to produce the end result 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="calculateAudienceDetails">The details for calculating this audience. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>ApiResponse of AudienceResultDetail</returns>
        public ApiResponse< AudienceResultDetail > AudiencesCalculateAudienceLatestUpdateSyncWithHttpInfo (string dataViewName, int? audienceId, CalculateAudienceDetails calculateAudienceDetails = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCalculateAudienceLatestUpdateSync");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCalculateAudienceLatestUpdateSync");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/CalculateSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (calculateAudienceDetails != null && calculateAudienceDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateAudienceDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateAudienceDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCalculateAudienceLatestUpdateSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceResultDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceResultDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceResultDetail)));
        }

        /// <summary>
        /// Calculate counts against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to produce the end result 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="calculateAudienceDetails">The details for calculating this audience. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>Task of AudienceResultDetail</returns>
        public async System.Threading.Tasks.Task<AudienceResultDetail> AudiencesCalculateAudienceLatestUpdateSyncAsync (string dataViewName, int? audienceId, CalculateAudienceDetails calculateAudienceDetails = null, int? timeoutInSeconds = null)
        {
             ApiResponse<AudienceResultDetail> localVarResponse = await AudiencesCalculateAudienceLatestUpdateSyncAsyncWithHttpInfo(dataViewName, audienceId, calculateAudienceDetails, timeoutInSeconds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculate counts against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to produce the end result 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="calculateAudienceDetails">The details for calculating this audience. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (AudienceResultDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AudienceResultDetail>> AudiencesCalculateAudienceLatestUpdateSyncAsyncWithHttpInfo (string dataViewName, int? audienceId, CalculateAudienceDetails calculateAudienceDetails = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCalculateAudienceLatestUpdateSync");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCalculateAudienceLatestUpdateSync");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/CalculateSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (calculateAudienceDetails != null && calculateAudienceDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateAudienceDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateAudienceDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCalculateAudienceLatestUpdateSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceResultDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceResultDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceResultDetail)));
        }

        /// <summary>
        /// Cancel a running data licensing job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the data licensing job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns></returns>
        public void AudiencesCancelCalculateAudienceDataLicensingJob (string dataViewName, int? audienceId, int? jobId)
        {
             AudiencesCancelCalculateAudienceDataLicensingJobWithHttpInfo(dataViewName, audienceId, jobId);
        }

        /// <summary>
        /// Cancel a running data licensing job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the data licensing job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AudiencesCancelCalculateAudienceDataLicensingJobWithHttpInfo (string dataViewName, int? audienceId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCancelCalculateAudienceDataLicensingJob");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCancelCalculateAudienceDataLicensingJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AudiencesApi->AudiencesCancelCalculateAudienceDataLicensingJob");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/DataLicensingJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCancelCalculateAudienceDataLicensingJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a running data licensing job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the data licensing job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AudiencesCancelCalculateAudienceDataLicensingJobAsync (string dataViewName, int? audienceId, int? jobId)
        {
             await AudiencesCancelCalculateAudienceDataLicensingJobAsyncWithHttpInfo(dataViewName, audienceId, jobId);

        }

        /// <summary>
        /// Cancel a running data licensing job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the data licensing job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AudiencesCancelCalculateAudienceDataLicensingJobAsyncWithHttpInfo (string dataViewName, int? audienceId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCancelCalculateAudienceDataLicensingJob");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCancelCalculateAudienceDataLicensingJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AudiencesApi->AudiencesCancelCalculateAudienceDataLicensingJob");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/DataLicensingJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCancelCalculateAudienceDataLicensingJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a running calculate job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns></returns>
        public void AudiencesCancelCalculateAudienceJob (string dataViewName, int? audienceId, int? jobId)
        {
             AudiencesCancelCalculateAudienceJobWithHttpInfo(dataViewName, audienceId, jobId);
        }

        /// <summary>
        /// Cancel a running calculate job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AudiencesCancelCalculateAudienceJobWithHttpInfo (string dataViewName, int? audienceId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCancelCalculateAudienceJob");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCancelCalculateAudienceJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AudiencesApi->AudiencesCancelCalculateAudienceJob");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/CalculateJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCancelCalculateAudienceJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a running calculate job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AudiencesCancelCalculateAudienceJobAsync (string dataViewName, int? audienceId, int? jobId)
        {
             await AudiencesCancelCalculateAudienceJobAsyncWithHttpInfo(dataViewName, audienceId, jobId);

        }

        /// <summary>
        /// Cancel a running calculate job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AudiencesCancelCalculateAudienceJobAsyncWithHttpInfo (string dataViewName, int? audienceId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCancelCalculateAudienceJob");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCancelCalculateAudienceJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AudiencesApi->AudiencesCancelCalculateAudienceJob");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/CalculateJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCancelCalculateAudienceJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a running check job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the check job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns></returns>
        public void AudiencesCancelCheckAudienceJob (string dataViewName, int? audienceId, int? jobId)
        {
             AudiencesCancelCheckAudienceJobWithHttpInfo(dataViewName, audienceId, jobId);
        }

        /// <summary>
        /// Cancel a running check job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the check job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AudiencesCancelCheckAudienceJobWithHttpInfo (string dataViewName, int? audienceId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCancelCheckAudienceJob");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCancelCheckAudienceJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AudiencesApi->AudiencesCancelCheckAudienceJob");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/CheckJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCancelCheckAudienceJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a running check job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the check job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AudiencesCancelCheckAudienceJobAsync (string dataViewName, int? audienceId, int? jobId)
        {
             await AudiencesCancelCheckAudienceJobAsyncWithHttpInfo(dataViewName, audienceId, jobId);

        }

        /// <summary>
        /// Cancel a running check job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the check job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AudiencesCancelCheckAudienceJobAsyncWithHttpInfo (string dataViewName, int? audienceId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCancelCheckAudienceJob");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCancelCheckAudienceJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AudiencesApi->AudiencesCancelCheckAudienceJob");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/CheckJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCancelCheckAudienceJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a running save simple campaign for audience job Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to convert</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns></returns>
        public void AudiencesCancelConvertToCampaignJob (string dataViewName, int? audienceId, int? jobId)
        {
             AudiencesCancelConvertToCampaignJobWithHttpInfo(dataViewName, audienceId, jobId);
        }

        /// <summary>
        /// Cancel a running save simple campaign for audience job Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to convert</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AudiencesCancelConvertToCampaignJobWithHttpInfo (string dataViewName, int? audienceId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCancelConvertToCampaignJob");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCancelConvertToCampaignJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AudiencesApi->AudiencesCancelConvertToCampaignJob");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/ConvertToCampaignJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCancelConvertToCampaignJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a running save simple campaign for audience job Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to convert</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AudiencesCancelConvertToCampaignJobAsync (string dataViewName, int? audienceId, int? jobId)
        {
             await AudiencesCancelConvertToCampaignJobAsyncWithHttpInfo(dataViewName, audienceId, jobId);

        }

        /// <summary>
        /// Cancel a running save simple campaign for audience job Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to convert</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AudiencesCancelConvertToCampaignJobAsyncWithHttpInfo (string dataViewName, int? audienceId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCancelConvertToCampaignJob");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCancelConvertToCampaignJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AudiencesApi->AudiencesCancelConvertToCampaignJob");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/ConvertToCampaignJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCancelConvertToCampaignJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a running export job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the export job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns></returns>
        public void AudiencesCancelExportAudienceJob (string dataViewName, int? audienceId, int? jobId)
        {
             AudiencesCancelExportAudienceJobWithHttpInfo(dataViewName, audienceId, jobId);
        }

        /// <summary>
        /// Cancel a running export job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the export job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AudiencesCancelExportAudienceJobWithHttpInfo (string dataViewName, int? audienceId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCancelExportAudienceJob");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCancelExportAudienceJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AudiencesApi->AudiencesCancelExportAudienceJob");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/ExportJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCancelExportAudienceJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a running export job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the export job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AudiencesCancelExportAudienceJobAsync (string dataViewName, int? audienceId, int? jobId)
        {
             await AudiencesCancelExportAudienceJobAsyncWithHttpInfo(dataViewName, audienceId, jobId);

        }

        /// <summary>
        /// Cancel a running export job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the export job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AudiencesCancelExportAudienceJobAsyncWithHttpInfo (string dataViewName, int? audienceId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCancelExportAudienceJob");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCancelExportAudienceJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AudiencesApi->AudiencesCancelExportAudienceJob");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/ExportJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCancelExportAudienceJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Calculate check statistics against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis. 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="checkAudienceDetails">The details for checking this audience. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>AudienceCheckDetail</returns>
        public AudienceCheckDetail AudiencesCheckAudienceLatestUpdateSync (string dataViewName, int? audienceId, CheckAudienceDetails checkAudienceDetails = null, int? timeoutInSeconds = null)
        {
             ApiResponse<AudienceCheckDetail> localVarResponse = AudiencesCheckAudienceLatestUpdateSyncWithHttpInfo(dataViewName, audienceId, checkAudienceDetails, timeoutInSeconds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculate check statistics against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis. 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="checkAudienceDetails">The details for checking this audience. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>ApiResponse of AudienceCheckDetail</returns>
        public ApiResponse< AudienceCheckDetail > AudiencesCheckAudienceLatestUpdateSyncWithHttpInfo (string dataViewName, int? audienceId, CheckAudienceDetails checkAudienceDetails = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCheckAudienceLatestUpdateSync");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCheckAudienceLatestUpdateSync");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/CheckSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (checkAudienceDetails != null && checkAudienceDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(checkAudienceDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkAudienceDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCheckAudienceLatestUpdateSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceCheckDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceCheckDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceCheckDetail)));
        }

        /// <summary>
        /// Calculate check statistics against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis. 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="checkAudienceDetails">The details for checking this audience. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>Task of AudienceCheckDetail</returns>
        public async System.Threading.Tasks.Task<AudienceCheckDetail> AudiencesCheckAudienceLatestUpdateSyncAsync (string dataViewName, int? audienceId, CheckAudienceDetails checkAudienceDetails = null, int? timeoutInSeconds = null)
        {
             ApiResponse<AudienceCheckDetail> localVarResponse = await AudiencesCheckAudienceLatestUpdateSyncAsyncWithHttpInfo(dataViewName, audienceId, checkAudienceDetails, timeoutInSeconds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculate check statistics against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis. 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="checkAudienceDetails">The details for checking this audience. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (AudienceCheckDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AudienceCheckDetail>> AudiencesCheckAudienceLatestUpdateSyncAsyncWithHttpInfo (string dataViewName, int? audienceId, CheckAudienceDetails checkAudienceDetails = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCheckAudienceLatestUpdateSync");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCheckAudienceLatestUpdateSync");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/CheckSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (checkAudienceDetails != null && checkAudienceDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(checkAudienceDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkAudienceDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCheckAudienceLatestUpdateSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceCheckDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceCheckDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceCheckDetail)));
        }

        /// <summary>
        /// Get the status of a running convert audience to campaign job Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to convert</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ConvertAudienceToCampaignJobDetail</returns>
        public ConvertAudienceToCampaignJobDetail AudiencesConvertToCampaignJob (string dataViewName, int? audienceId, int? jobId)
        {
             ApiResponse<ConvertAudienceToCampaignJobDetail> localVarResponse = AudiencesConvertToCampaignJobWithHttpInfo(dataViewName, audienceId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of a running convert audience to campaign job Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to convert</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of ConvertAudienceToCampaignJobDetail</returns>
        public ApiResponse< ConvertAudienceToCampaignJobDetail > AudiencesConvertToCampaignJobWithHttpInfo (string dataViewName, int? audienceId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesConvertToCampaignJob");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesConvertToCampaignJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AudiencesApi->AudiencesConvertToCampaignJob");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/ConvertToCampaignJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesConvertToCampaignJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertAudienceToCampaignJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConvertAudienceToCampaignJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertAudienceToCampaignJobDetail)));
        }

        /// <summary>
        /// Get the status of a running convert audience to campaign job Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to convert</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ConvertAudienceToCampaignJobDetail</returns>
        public async System.Threading.Tasks.Task<ConvertAudienceToCampaignJobDetail> AudiencesConvertToCampaignJobAsync (string dataViewName, int? audienceId, int? jobId)
        {
             ApiResponse<ConvertAudienceToCampaignJobDetail> localVarResponse = await AudiencesConvertToCampaignJobAsyncWithHttpInfo(dataViewName, audienceId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the status of a running convert audience to campaign job Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to convert</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (ConvertAudienceToCampaignJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConvertAudienceToCampaignJobDetail>> AudiencesConvertToCampaignJobAsyncWithHttpInfo (string dataViewName, int? audienceId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesConvertToCampaignJob");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesConvertToCampaignJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AudiencesApi->AudiencesConvertToCampaignJob");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/ConvertToCampaignJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesConvertToCampaignJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertAudienceToCampaignJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConvertAudienceToCampaignJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertAudienceToCampaignJobDetail)));
        }

        /// <summary>
        /// Copies an existing audience for the logged in user. Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to copy</param>
        /// <param name="audienceDetail">The details used to create the new audience (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for the returned audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>AudienceDetail</returns>
        public AudienceDetail AudiencesCopyAudience (string dataViewName, int? audienceId, CopyAudienceDetail audienceDetail = null, bool? includeQueries = null, bool? includeBrief = null)
        {
             ApiResponse<AudienceDetail> localVarResponse = AudiencesCopyAudienceWithHttpInfo(dataViewName, audienceId, audienceDetail, includeQueries, includeBrief);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copies an existing audience for the logged in user. Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to copy</param>
        /// <param name="audienceDetail">The details used to create the new audience (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for the returned audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>ApiResponse of AudienceDetail</returns>
        public ApiResponse< AudienceDetail > AudiencesCopyAudienceWithHttpInfo (string dataViewName, int? audienceId, CopyAudienceDetail audienceDetail = null, bool? includeQueries = null, bool? includeBrief = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCopyAudience");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCopyAudience");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/Copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (includeQueries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeQueries", includeQueries)); // query parameter
            if (includeBrief != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBrief", includeBrief)); // query parameter
            if (audienceDetail != null && audienceDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(audienceDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = audienceDetail; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCopyAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceDetail)));
        }

        /// <summary>
        /// Copies an existing audience for the logged in user. Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to copy</param>
        /// <param name="audienceDetail">The details used to create the new audience (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for the returned audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of AudienceDetail</returns>
        public async System.Threading.Tasks.Task<AudienceDetail> AudiencesCopyAudienceAsync (string dataViewName, int? audienceId, CopyAudienceDetail audienceDetail = null, bool? includeQueries = null, bool? includeBrief = null)
        {
             ApiResponse<AudienceDetail> localVarResponse = await AudiencesCopyAudienceAsyncWithHttpInfo(dataViewName, audienceId, audienceDetail, includeQueries, includeBrief);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copies an existing audience for the logged in user. Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to copy</param>
        /// <param name="audienceDetail">The details used to create the new audience (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for the returned audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of ApiResponse (AudienceDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AudienceDetail>> AudiencesCopyAudienceAsyncWithHttpInfo (string dataViewName, int? audienceId, CopyAudienceDetail audienceDetail = null, bool? includeQueries = null, bool? includeBrief = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCopyAudience");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCopyAudience");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/Copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (includeQueries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeQueries", includeQueries)); // query parameter
            if (includeBrief != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBrief", includeBrief)); // query parameter
            if (audienceDetail != null && audienceDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(audienceDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = audienceDetail; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCopyAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceDetail)));
        }

        /// <summary>
        /// Creates a new audience from the given details for the logged in user. Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceDetail">The details for the audience to create.  If you want              to update a specific audience then POST to the /Audiences/{audienceId} URL (optional)</param>
        /// <returns>AudienceDetail</returns>
        public AudienceDetail AudiencesCreateAudience (string dataViewName, CreateAudienceDetail audienceDetail = null)
        {
             ApiResponse<AudienceDetail> localVarResponse = AudiencesCreateAudienceWithHttpInfo(dataViewName, audienceDetail);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new audience from the given details for the logged in user. Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceDetail">The details for the audience to create.  If you want              to update a specific audience then POST to the /Audiences/{audienceId} URL (optional)</param>
        /// <returns>ApiResponse of AudienceDetail</returns>
        public ApiResponse< AudienceDetail > AudiencesCreateAudienceWithHttpInfo (string dataViewName, CreateAudienceDetail audienceDetail = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCreateAudience");

            var localVarPath = "/{dataViewName}/Audiences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceDetail != null && audienceDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(audienceDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = audienceDetail; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCreateAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceDetail)));
        }

        /// <summary>
        /// Creates a new audience from the given details for the logged in user. Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceDetail">The details for the audience to create.  If you want              to update a specific audience then POST to the /Audiences/{audienceId} URL (optional)</param>
        /// <returns>Task of AudienceDetail</returns>
        public async System.Threading.Tasks.Task<AudienceDetail> AudiencesCreateAudienceAsync (string dataViewName, CreateAudienceDetail audienceDetail = null)
        {
             ApiResponse<AudienceDetail> localVarResponse = await AudiencesCreateAudienceAsyncWithHttpInfo(dataViewName, audienceDetail);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new audience from the given details for the logged in user. Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceDetail">The details for the audience to create.  If you want              to update a specific audience then POST to the /Audiences/{audienceId} URL (optional)</param>
        /// <returns>Task of ApiResponse (AudienceDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AudienceDetail>> AudiencesCreateAudienceAsyncWithHttpInfo (string dataViewName, CreateAudienceDetail audienceDetail = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCreateAudience");

            var localVarPath = "/{dataViewName}/Audiences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceDetail != null && audienceDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(audienceDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = audienceDetail; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCreateAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceDetail)));
        }

        /// <summary>
        /// Register a hit (view) for the given audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to register the hit for</param>
        /// <param name="createAudienceHitDetails">Details to register the hit with (optional)</param>
        /// <returns>AudienceHitDetail</returns>
        public AudienceHitDetail AudiencesCreateAudienceHitForAudience (string dataViewName, int? audienceId, CreateAudienceHitDetails createAudienceHitDetails = null)
        {
             ApiResponse<AudienceHitDetail> localVarResponse = AudiencesCreateAudienceHitForAudienceWithHttpInfo(dataViewName, audienceId, createAudienceHitDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register a hit (view) for the given audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to register the hit for</param>
        /// <param name="createAudienceHitDetails">Details to register the hit with (optional)</param>
        /// <returns>ApiResponse of AudienceHitDetail</returns>
        public ApiResponse< AudienceHitDetail > AudiencesCreateAudienceHitForAudienceWithHttpInfo (string dataViewName, int? audienceId, CreateAudienceHitDetails createAudienceHitDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCreateAudienceHitForAudience");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCreateAudienceHitForAudience");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/Hits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (createAudienceHitDetails != null && createAudienceHitDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createAudienceHitDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createAudienceHitDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCreateAudienceHitForAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceHitDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceHitDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceHitDetail)));
        }

        /// <summary>
        /// Register a hit (view) for the given audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to register the hit for</param>
        /// <param name="createAudienceHitDetails">Details to register the hit with (optional)</param>
        /// <returns>Task of AudienceHitDetail</returns>
        public async System.Threading.Tasks.Task<AudienceHitDetail> AudiencesCreateAudienceHitForAudienceAsync (string dataViewName, int? audienceId, CreateAudienceHitDetails createAudienceHitDetails = null)
        {
             ApiResponse<AudienceHitDetail> localVarResponse = await AudiencesCreateAudienceHitForAudienceAsyncWithHttpInfo(dataViewName, audienceId, createAudienceHitDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register a hit (view) for the given audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to register the hit for</param>
        /// <param name="createAudienceHitDetails">Details to register the hit with (optional)</param>
        /// <returns>Task of ApiResponse (AudienceHitDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AudienceHitDetail>> AudiencesCreateAudienceHitForAudienceAsyncWithHttpInfo (string dataViewName, int? audienceId, CreateAudienceHitDetails createAudienceHitDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCreateAudienceHitForAudience");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCreateAudienceHitForAudience");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/Hits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (createAudienceHitDetails != null && createAudienceHitDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createAudienceHitDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createAudienceHitDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCreateAudienceHitForAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceHitDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceHitDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceHitDetail)));
        }

        /// <summary>
        /// Updates the details of a particular audience.  If you don&#39;t have an id for the  audience then POST to the /Audiences URL to create a new audience. Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to add/update</param>
        /// <param name="createAudienceUpdate">The details for the audience to add/update (optional)</param>
        /// <returns>AudienceUpdateDetail</returns>
        public AudienceUpdateDetail AudiencesCreateAudienceUpdate (string dataViewName, int? audienceId, CreateAudienceUpdate createAudienceUpdate = null)
        {
             ApiResponse<AudienceUpdateDetail> localVarResponse = AudiencesCreateAudienceUpdateWithHttpInfo(dataViewName, audienceId, createAudienceUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the details of a particular audience.  If you don&#39;t have an id for the  audience then POST to the /Audiences URL to create a new audience. Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to add/update</param>
        /// <param name="createAudienceUpdate">The details for the audience to add/update (optional)</param>
        /// <returns>ApiResponse of AudienceUpdateDetail</returns>
        public ApiResponse< AudienceUpdateDetail > AudiencesCreateAudienceUpdateWithHttpInfo (string dataViewName, int? audienceId, CreateAudienceUpdate createAudienceUpdate = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCreateAudienceUpdate");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCreateAudienceUpdate");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/Updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (createAudienceUpdate != null && createAudienceUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createAudienceUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createAudienceUpdate; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCreateAudienceUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceUpdateDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceUpdateDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceUpdateDetail)));
        }

        /// <summary>
        /// Updates the details of a particular audience.  If you don&#39;t have an id for the  audience then POST to the /Audiences URL to create a new audience. Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to add/update</param>
        /// <param name="createAudienceUpdate">The details for the audience to add/update (optional)</param>
        /// <returns>Task of AudienceUpdateDetail</returns>
        public async System.Threading.Tasks.Task<AudienceUpdateDetail> AudiencesCreateAudienceUpdateAsync (string dataViewName, int? audienceId, CreateAudienceUpdate createAudienceUpdate = null)
        {
             ApiResponse<AudienceUpdateDetail> localVarResponse = await AudiencesCreateAudienceUpdateAsyncWithHttpInfo(dataViewName, audienceId, createAudienceUpdate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the details of a particular audience.  If you don&#39;t have an id for the  audience then POST to the /Audiences URL to create a new audience. Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to add/update</param>
        /// <param name="createAudienceUpdate">The details for the audience to add/update (optional)</param>
        /// <returns>Task of ApiResponse (AudienceUpdateDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AudienceUpdateDetail>> AudiencesCreateAudienceUpdateAsyncWithHttpInfo (string dataViewName, int? audienceId, CreateAudienceUpdate createAudienceUpdate = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCreateAudienceUpdate");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCreateAudienceUpdate");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/Updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (createAudienceUpdate != null && createAudienceUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createAudienceUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createAudienceUpdate; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCreateAudienceUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceUpdateDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceUpdateDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceUpdateDetail)));
        }

        /// <summary>
        /// Create a new job to get data licensing information for the latest version of this audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for</param>
        /// <param name="dataLicensingDetail">The details required to get data licensing information for an audience (optional)</param>
        /// <returns>AudienceDataLicensingInfoJobDetail</returns>
        public AudienceDataLicensingInfoJobDetail AudiencesCreateCalculateAudienceDataLicensingJob (string dataViewName, int? audienceId, DataLicensingDetail dataLicensingDetail = null)
        {
             ApiResponse<AudienceDataLicensingInfoJobDetail> localVarResponse = AudiencesCreateCalculateAudienceDataLicensingJobWithHttpInfo(dataViewName, audienceId, dataLicensingDetail);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new job to get data licensing information for the latest version of this audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for</param>
        /// <param name="dataLicensingDetail">The details required to get data licensing information for an audience (optional)</param>
        /// <returns>ApiResponse of AudienceDataLicensingInfoJobDetail</returns>
        public ApiResponse< AudienceDataLicensingInfoJobDetail > AudiencesCreateCalculateAudienceDataLicensingJobWithHttpInfo (string dataViewName, int? audienceId, DataLicensingDetail dataLicensingDetail = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCreateCalculateAudienceDataLicensingJob");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCreateCalculateAudienceDataLicensingJob");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/DataLicensingJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (dataLicensingDetail != null && dataLicensingDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dataLicensingDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataLicensingDetail; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCreateCalculateAudienceDataLicensingJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceDataLicensingInfoJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceDataLicensingInfoJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceDataLicensingInfoJobDetail)));
        }

        /// <summary>
        /// Create a new job to get data licensing information for the latest version of this audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for</param>
        /// <param name="dataLicensingDetail">The details required to get data licensing information for an audience (optional)</param>
        /// <returns>Task of AudienceDataLicensingInfoJobDetail</returns>
        public async System.Threading.Tasks.Task<AudienceDataLicensingInfoJobDetail> AudiencesCreateCalculateAudienceDataLicensingJobAsync (string dataViewName, int? audienceId, DataLicensingDetail dataLicensingDetail = null)
        {
             ApiResponse<AudienceDataLicensingInfoJobDetail> localVarResponse = await AudiencesCreateCalculateAudienceDataLicensingJobAsyncWithHttpInfo(dataViewName, audienceId, dataLicensingDetail);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new job to get data licensing information for the latest version of this audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for</param>
        /// <param name="dataLicensingDetail">The details required to get data licensing information for an audience (optional)</param>
        /// <returns>Task of ApiResponse (AudienceDataLicensingInfoJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AudienceDataLicensingInfoJobDetail>> AudiencesCreateCalculateAudienceDataLicensingJobAsyncWithHttpInfo (string dataViewName, int? audienceId, DataLicensingDetail dataLicensingDetail = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCreateCalculateAudienceDataLicensingJob");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCreateCalculateAudienceDataLicensingJob");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/DataLicensingJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (dataLicensingDetail != null && dataLicensingDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dataLicensingDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataLicensingDetail; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCreateCalculateAudienceDataLicensingJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceDataLicensingInfoJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceDataLicensingInfoJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceDataLicensingInfoJobDetail)));
        }

        /// <summary>
        /// Create a new job to calculate counts against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to produce the end result 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="calculateAudienceDetails">The details for calculating this audience. (optional)</param>
        /// <returns>AudienceCalculateJobDetail</returns>
        public AudienceCalculateJobDetail AudiencesCreateCalculateAudienceJobForLatestUpdate (string dataViewName, int? audienceId, CalculateAudienceDetails calculateAudienceDetails = null)
        {
             ApiResponse<AudienceCalculateJobDetail> localVarResponse = AudiencesCreateCalculateAudienceJobForLatestUpdateWithHttpInfo(dataViewName, audienceId, calculateAudienceDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new job to calculate counts against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to produce the end result 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="calculateAudienceDetails">The details for calculating this audience. (optional)</param>
        /// <returns>ApiResponse of AudienceCalculateJobDetail</returns>
        public ApiResponse< AudienceCalculateJobDetail > AudiencesCreateCalculateAudienceJobForLatestUpdateWithHttpInfo (string dataViewName, int? audienceId, CalculateAudienceDetails calculateAudienceDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCreateCalculateAudienceJobForLatestUpdate");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCreateCalculateAudienceJobForLatestUpdate");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/CalculateJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (calculateAudienceDetails != null && calculateAudienceDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateAudienceDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateAudienceDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCreateCalculateAudienceJobForLatestUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceCalculateJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceCalculateJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceCalculateJobDetail)));
        }

        /// <summary>
        /// Create a new job to calculate counts against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to produce the end result 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="calculateAudienceDetails">The details for calculating this audience. (optional)</param>
        /// <returns>Task of AudienceCalculateJobDetail</returns>
        public async System.Threading.Tasks.Task<AudienceCalculateJobDetail> AudiencesCreateCalculateAudienceJobForLatestUpdateAsync (string dataViewName, int? audienceId, CalculateAudienceDetails calculateAudienceDetails = null)
        {
             ApiResponse<AudienceCalculateJobDetail> localVarResponse = await AudiencesCreateCalculateAudienceJobForLatestUpdateAsyncWithHttpInfo(dataViewName, audienceId, calculateAudienceDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new job to calculate counts against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to produce the end result 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="calculateAudienceDetails">The details for calculating this audience. (optional)</param>
        /// <returns>Task of ApiResponse (AudienceCalculateJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AudienceCalculateJobDetail>> AudiencesCreateCalculateAudienceJobForLatestUpdateAsyncWithHttpInfo (string dataViewName, int? audienceId, CalculateAudienceDetails calculateAudienceDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCreateCalculateAudienceJobForLatestUpdate");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCreateCalculateAudienceJobForLatestUpdate");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/CalculateJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (calculateAudienceDetails != null && calculateAudienceDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateAudienceDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateAudienceDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCreateCalculateAudienceJobForLatestUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceCalculateJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceCalculateJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceCalculateJobDetail)));
        }

        /// <summary>
        /// Create a new job to calculate check statistics against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis. 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="checkAudienceDetails">The details for checking this audience. (optional)</param>
        /// <returns>List&lt;AudienceCheckJobDetail&gt;</returns>
        public List<AudienceCheckJobDetail> AudiencesCreateCheckAudienceJobForLatestUpdate (string dataViewName, int? audienceId, CheckAudienceDetails checkAudienceDetails = null)
        {
             ApiResponse<List<AudienceCheckJobDetail>> localVarResponse = AudiencesCreateCheckAudienceJobForLatestUpdateWithHttpInfo(dataViewName, audienceId, checkAudienceDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new job to calculate check statistics against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis. 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="checkAudienceDetails">The details for checking this audience. (optional)</param>
        /// <returns>ApiResponse of List&lt;AudienceCheckJobDetail&gt;</returns>
        public ApiResponse< List<AudienceCheckJobDetail> > AudiencesCreateCheckAudienceJobForLatestUpdateWithHttpInfo (string dataViewName, int? audienceId, CheckAudienceDetails checkAudienceDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCreateCheckAudienceJobForLatestUpdate");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCreateCheckAudienceJobForLatestUpdate");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/CheckJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (checkAudienceDetails != null && checkAudienceDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(checkAudienceDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkAudienceDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCreateCheckAudienceJobForLatestUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AudienceCheckJobDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AudienceCheckJobDetail>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AudienceCheckJobDetail>)));
        }

        /// <summary>
        /// Create a new job to calculate check statistics against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis. 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="checkAudienceDetails">The details for checking this audience. (optional)</param>
        /// <returns>Task of List&lt;AudienceCheckJobDetail&gt;</returns>
        public async System.Threading.Tasks.Task<List<AudienceCheckJobDetail>> AudiencesCreateCheckAudienceJobForLatestUpdateAsync (string dataViewName, int? audienceId, CheckAudienceDetails checkAudienceDetails = null)
        {
             ApiResponse<List<AudienceCheckJobDetail>> localVarResponse = await AudiencesCreateCheckAudienceJobForLatestUpdateAsyncWithHttpInfo(dataViewName, audienceId, checkAudienceDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new job to calculate check statistics against the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis. 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to calculate the result for.</param>
        /// <param name="checkAudienceDetails">The details for checking this audience. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AudienceCheckJobDetail&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AudienceCheckJobDetail>>> AudiencesCreateCheckAudienceJobForLatestUpdateAsyncWithHttpInfo (string dataViewName, int? audienceId, CheckAudienceDetails checkAudienceDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCreateCheckAudienceJobForLatestUpdate");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCreateCheckAudienceJobForLatestUpdate");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/CheckJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (checkAudienceDetails != null && checkAudienceDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(checkAudienceDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkAudienceDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCreateCheckAudienceJobForLatestUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AudienceCheckJobDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AudienceCheckJobDetail>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AudienceCheckJobDetail>)));
        }

        /// <summary>
        /// Creates a job to convert an audience to a PeopleStage campaign. The campaign is saved but not published. Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to convert</param>
        /// <param name="requestData">Used to pass additional metadata about the campaign to create (optional)</param>
        /// <returns>ConvertAudienceToCampaignJobDetail</returns>
        public ConvertAudienceToCampaignJobDetail AudiencesCreateConvertToCampaignJob (string dataViewName, int? audienceId, ConvertAudienceToCampaignDetails requestData = null)
        {
             ApiResponse<ConvertAudienceToCampaignJobDetail> localVarResponse = AudiencesCreateConvertToCampaignJobWithHttpInfo(dataViewName, audienceId, requestData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a job to convert an audience to a PeopleStage campaign. The campaign is saved but not published. Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to convert</param>
        /// <param name="requestData">Used to pass additional metadata about the campaign to create (optional)</param>
        /// <returns>ApiResponse of ConvertAudienceToCampaignJobDetail</returns>
        public ApiResponse< ConvertAudienceToCampaignJobDetail > AudiencesCreateConvertToCampaignJobWithHttpInfo (string dataViewName, int? audienceId, ConvertAudienceToCampaignDetails requestData = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCreateConvertToCampaignJob");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCreateConvertToCampaignJob");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/ConvertToCampaignJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (requestData != null && requestData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestData; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCreateConvertToCampaignJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertAudienceToCampaignJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConvertAudienceToCampaignJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertAudienceToCampaignJobDetail)));
        }

        /// <summary>
        /// Creates a job to convert an audience to a PeopleStage campaign. The campaign is saved but not published. Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to convert</param>
        /// <param name="requestData">Used to pass additional metadata about the campaign to create (optional)</param>
        /// <returns>Task of ConvertAudienceToCampaignJobDetail</returns>
        public async System.Threading.Tasks.Task<ConvertAudienceToCampaignJobDetail> AudiencesCreateConvertToCampaignJobAsync (string dataViewName, int? audienceId, ConvertAudienceToCampaignDetails requestData = null)
        {
             ApiResponse<ConvertAudienceToCampaignJobDetail> localVarResponse = await AudiencesCreateConvertToCampaignJobAsyncWithHttpInfo(dataViewName, audienceId, requestData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a job to convert an audience to a PeopleStage campaign. The campaign is saved but not published. Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to convert</param>
        /// <param name="requestData">Used to pass additional metadata about the campaign to create (optional)</param>
        /// <returns>Task of ApiResponse (ConvertAudienceToCampaignJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConvertAudienceToCampaignJobDetail>> AudiencesCreateConvertToCampaignJobAsyncWithHttpInfo (string dataViewName, int? audienceId, ConvertAudienceToCampaignDetails requestData = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCreateConvertToCampaignJob");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCreateConvertToCampaignJob");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/ConvertToCampaignJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (requestData != null && requestData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestData; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCreateConvertToCampaignJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertAudienceToCampaignJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConvertAudienceToCampaignJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertAudienceToCampaignJobDetail)));
        }

        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result Might require licence flags [Export]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to export data for.</param>
        /// <param name="exportAudienceDetails">The details for exporting this audience. (optional)</param>
        /// <returns>AudienceExportJobDetail</returns>
        public AudienceExportJobDetail AudiencesCreateExportAudienceJobForLatestUpdate (string dataViewName, int? audienceId, ExportAudienceDetails exportAudienceDetails = null)
        {
             ApiResponse<AudienceExportJobDetail> localVarResponse = AudiencesCreateExportAudienceJobForLatestUpdateWithHttpInfo(dataViewName, audienceId, exportAudienceDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result Might require licence flags [Export]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to export data for.</param>
        /// <param name="exportAudienceDetails">The details for exporting this audience. (optional)</param>
        /// <returns>ApiResponse of AudienceExportJobDetail</returns>
        public ApiResponse< AudienceExportJobDetail > AudiencesCreateExportAudienceJobForLatestUpdateWithHttpInfo (string dataViewName, int? audienceId, ExportAudienceDetails exportAudienceDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCreateExportAudienceJobForLatestUpdate");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCreateExportAudienceJobForLatestUpdate");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/ExportJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (exportAudienceDetails != null && exportAudienceDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(exportAudienceDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = exportAudienceDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCreateExportAudienceJobForLatestUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceExportJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceExportJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceExportJobDetail)));
        }

        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result Might require licence flags [Export]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to export data for.</param>
        /// <param name="exportAudienceDetails">The details for exporting this audience. (optional)</param>
        /// <returns>Task of AudienceExportJobDetail</returns>
        public async System.Threading.Tasks.Task<AudienceExportJobDetail> AudiencesCreateExportAudienceJobForLatestUpdateAsync (string dataViewName, int? audienceId, ExportAudienceDetails exportAudienceDetails = null)
        {
             ApiResponse<AudienceExportJobDetail> localVarResponse = await AudiencesCreateExportAudienceJobForLatestUpdateAsyncWithHttpInfo(dataViewName, audienceId, exportAudienceDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result Might require licence flags [Export]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to export data for.</param>
        /// <param name="exportAudienceDetails">The details for exporting this audience. (optional)</param>
        /// <returns>Task of ApiResponse (AudienceExportJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AudienceExportJobDetail>> AudiencesCreateExportAudienceJobForLatestUpdateAsyncWithHttpInfo (string dataViewName, int? audienceId, ExportAudienceDetails exportAudienceDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesCreateExportAudienceJobForLatestUpdate");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesCreateExportAudienceJobForLatestUpdate");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/ExportJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (exportAudienceDetails != null && exportAudienceDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(exportAudienceDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = exportAudienceDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesCreateExportAudienceJobForLatestUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceExportJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceExportJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceExportJobDetail)));
        }

        /// <summary>
        /// Deletes the specified audience Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to delete</param>
        /// <returns></returns>
        public void AudiencesDeleteAudience (string dataViewName, int? audienceId)
        {
             AudiencesDeleteAudienceWithHttpInfo(dataViewName, audienceId);
        }

        /// <summary>
        /// Deletes the specified audience Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AudiencesDeleteAudienceWithHttpInfo (string dataViewName, int? audienceId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesDeleteAudience");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesDeleteAudience");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesDeleteAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the specified audience Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AudiencesDeleteAudienceAsync (string dataViewName, int? audienceId)
        {
             await AudiencesDeleteAudienceAsyncWithHttpInfo(dataViewName, audienceId);

        }

        /// <summary>
        /// Deletes the specified audience Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AudiencesDeleteAudienceAsyncWithHttpInfo (string dataViewName, int? audienceId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesDeleteAudience");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesDeleteAudience");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesDeleteAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result Might require licence flags [Export]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to export data for.</param>
        /// <param name="exportAudienceDetails">The details for calculating this audience. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>AudienceExportDetail</returns>
        public AudienceExportDetail AudiencesExportAudienceLatestUpdateSync (string dataViewName, int? audienceId, ExportAudienceDetails exportAudienceDetails = null, int? timeoutInSeconds = null)
        {
             ApiResponse<AudienceExportDetail> localVarResponse = AudiencesExportAudienceLatestUpdateSyncWithHttpInfo(dataViewName, audienceId, exportAudienceDetails, timeoutInSeconds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result Might require licence flags [Export]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to export data for.</param>
        /// <param name="exportAudienceDetails">The details for calculating this audience. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>ApiResponse of AudienceExportDetail</returns>
        public ApiResponse< AudienceExportDetail > AudiencesExportAudienceLatestUpdateSyncWithHttpInfo (string dataViewName, int? audienceId, ExportAudienceDetails exportAudienceDetails = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesExportAudienceLatestUpdateSync");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesExportAudienceLatestUpdateSync");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/ExportSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (exportAudienceDetails != null && exportAudienceDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(exportAudienceDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = exportAudienceDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesExportAudienceLatestUpdateSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceExportDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceExportDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceExportDetail)));
        }

        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result Might require licence flags [Export]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to export data for.</param>
        /// <param name="exportAudienceDetails">The details for calculating this audience. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>Task of AudienceExportDetail</returns>
        public async System.Threading.Tasks.Task<AudienceExportDetail> AudiencesExportAudienceLatestUpdateSyncAsync (string dataViewName, int? audienceId, ExportAudienceDetails exportAudienceDetails = null, int? timeoutInSeconds = null)
        {
             ApiResponse<AudienceExportDetail> localVarResponse = await AudiencesExportAudienceLatestUpdateSyncAsyncWithHttpInfo(dataViewName, audienceId, exportAudienceDetails, timeoutInSeconds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this audience.  The different queries associated with the latest  version of this audience will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result Might require licence flags [Export]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to export data for.</param>
        /// <param name="exportAudienceDetails">The details for calculating this audience. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service&#39;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (AudienceExportDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AudienceExportDetail>> AudiencesExportAudienceLatestUpdateSyncAsyncWithHttpInfo (string dataViewName, int? audienceId, ExportAudienceDetails exportAudienceDetails = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesExportAudienceLatestUpdateSync");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesExportAudienceLatestUpdateSync");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/ExportSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (exportAudienceDetails != null && exportAudienceDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(exportAudienceDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = exportAudienceDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesExportAudienceLatestUpdateSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceExportDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceExportDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceExportDetail)));
        }

        /// <summary>
        /// Returns the details of a particular audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to view</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>AudienceDetail</returns>
        public AudienceDetail AudiencesGetAudience (string dataViewName, int? audienceId, bool? includeQueries = null, bool? includeBrief = null)
        {
             ApiResponse<AudienceDetail> localVarResponse = AudiencesGetAudienceWithHttpInfo(dataViewName, audienceId, includeQueries, includeBrief);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details of a particular audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to view</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>ApiResponse of AudienceDetail</returns>
        public ApiResponse< AudienceDetail > AudiencesGetAudienceWithHttpInfo (string dataViewName, int? audienceId, bool? includeQueries = null, bool? includeBrief = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetAudience");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesGetAudience");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (includeQueries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeQueries", includeQueries)); // query parameter
            if (includeBrief != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBrief", includeBrief)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceDetail)));
        }

        /// <summary>
        /// Returns the details of a particular audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to view</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of AudienceDetail</returns>
        public async System.Threading.Tasks.Task<AudienceDetail> AudiencesGetAudienceAsync (string dataViewName, int? audienceId, bool? includeQueries = null, bool? includeBrief = null)
        {
             ApiResponse<AudienceDetail> localVarResponse = await AudiencesGetAudienceAsyncWithHttpInfo(dataViewName, audienceId, includeQueries, includeBrief);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the details of a particular audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to view</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of ApiResponse (AudienceDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AudienceDetail>> AudiencesGetAudienceAsyncWithHttpInfo (string dataViewName, int? audienceId, bool? includeQueries = null, bool? includeBrief = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetAudience");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesGetAudience");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (includeQueries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeQueries", includeQueries)); // query parameter
            if (includeBrief != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBrief", includeBrief)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceDetail)));
        }

        /// <summary>
        /// Returns details for a given audience hit for this audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the hit information for</param>
        /// <param name="audienceHitId">The id of the hit</param>
        /// <returns>AudienceHitDetail</returns>
        public AudienceHitDetail AudiencesGetAudienceHitForAudience (string dataViewName, int? audienceId, int? audienceHitId)
        {
             ApiResponse<AudienceHitDetail> localVarResponse = AudiencesGetAudienceHitForAudienceWithHttpInfo(dataViewName, audienceId, audienceHitId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details for a given audience hit for this audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the hit information for</param>
        /// <param name="audienceHitId">The id of the hit</param>
        /// <returns>ApiResponse of AudienceHitDetail</returns>
        public ApiResponse< AudienceHitDetail > AudiencesGetAudienceHitForAudienceWithHttpInfo (string dataViewName, int? audienceId, int? audienceHitId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetAudienceHitForAudience");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesGetAudienceHitForAudience");
            // verify the required parameter 'audienceHitId' is set
            if (audienceHitId == null)
                throw new ApiException(400, "Missing required parameter 'audienceHitId' when calling AudiencesApi->AudiencesGetAudienceHitForAudience");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/Hits/{audienceHitId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (audienceHitId != null) localVarPathParams.Add("audienceHitId", this.Configuration.ApiClient.ParameterToString(audienceHitId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetAudienceHitForAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceHitDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceHitDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceHitDetail)));
        }

        /// <summary>
        /// Returns details for a given audience hit for this audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the hit information for</param>
        /// <param name="audienceHitId">The id of the hit</param>
        /// <returns>Task of AudienceHitDetail</returns>
        public async System.Threading.Tasks.Task<AudienceHitDetail> AudiencesGetAudienceHitForAudienceAsync (string dataViewName, int? audienceId, int? audienceHitId)
        {
             ApiResponse<AudienceHitDetail> localVarResponse = await AudiencesGetAudienceHitForAudienceAsyncWithHttpInfo(dataViewName, audienceId, audienceHitId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details for a given audience hit for this audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the hit information for</param>
        /// <param name="audienceHitId">The id of the hit</param>
        /// <returns>Task of ApiResponse (AudienceHitDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AudienceHitDetail>> AudiencesGetAudienceHitForAudienceAsyncWithHttpInfo (string dataViewName, int? audienceId, int? audienceHitId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetAudienceHitForAudience");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesGetAudienceHitForAudience");
            // verify the required parameter 'audienceHitId' is set
            if (audienceHitId == null)
                throw new ApiException(400, "Missing required parameter 'audienceHitId' when calling AudiencesApi->AudiencesGetAudienceHitForAudience");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/Hits/{audienceHitId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (audienceHitId != null) localVarPathParams.Add("audienceHitId", this.Configuration.ApiClient.ParameterToString(audienceHitId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetAudienceHitForAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceHitDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceHitDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceHitDetail)));
        }

        /// <summary>
        /// Returns a summary of the hits for this audience - i.e. information about when users have viewed the audience. 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsAudienceHitSummary</returns>
        public PagedResultsAudienceHitSummary AudiencesGetAudienceHitsForAudience (string dataViewName, int? audienceId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsAudienceHitSummary> localVarResponse = AudiencesGetAudienceHitsForAudienceWithHttpInfo(dataViewName, audienceId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a summary of the hits for this audience - i.e. information about when users have viewed the audience. 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsAudienceHitSummary</returns>
        public ApiResponse< PagedResultsAudienceHitSummary > AudiencesGetAudienceHitsForAudienceWithHttpInfo (string dataViewName, int? audienceId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetAudienceHitsForAudience");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesGetAudienceHitsForAudience");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/Hits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetAudienceHitsForAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsAudienceHitSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsAudienceHitSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsAudienceHitSummary)));
        }

        /// <summary>
        /// Returns a summary of the hits for this audience - i.e. information about when users have viewed the audience. 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsAudienceHitSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsAudienceHitSummary> AudiencesGetAudienceHitsForAudienceAsync (string dataViewName, int? audienceId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsAudienceHitSummary> localVarResponse = await AudiencesGetAudienceHitsForAudienceAsyncWithHttpInfo(dataViewName, audienceId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a summary of the hits for this audience - i.e. information about when users have viewed the audience. 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsAudienceHitSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsAudienceHitSummary>> AudiencesGetAudienceHitsForAudienceAsyncWithHttpInfo (string dataViewName, int? audienceId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetAudienceHitsForAudience");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesGetAudienceHitsForAudience");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/Hits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetAudienceHitsForAudience", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsAudienceHitSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsAudienceHitSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsAudienceHitSummary)));
        }

        /// <summary>
        /// Returns native XML (i.e. for use with other FastStats applications) for the Nett query of the latest update for a particular audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience</param>
        /// <returns>string</returns>
        public string AudiencesGetAudienceLatestNativeForNettQuery (string dataViewName, int? audienceId)
        {
             ApiResponse<string> localVarResponse = AudiencesGetAudienceLatestNativeForNettQueryWithHttpInfo(dataViewName, audienceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns native XML (i.e. for use with other FastStats applications) for the Nett query of the latest update for a particular audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > AudiencesGetAudienceLatestNativeForNettQueryWithHttpInfo (string dataViewName, int? audienceId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetAudienceLatestNativeForNettQuery");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesGetAudienceLatestNativeForNettQuery");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/Native/Nett";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetAudienceLatestNativeForNettQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Returns native XML (i.e. for use with other FastStats applications) for the Nett query of the latest update for a particular audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> AudiencesGetAudienceLatestNativeForNettQueryAsync (string dataViewName, int? audienceId)
        {
             ApiResponse<string> localVarResponse = await AudiencesGetAudienceLatestNativeForNettQueryAsyncWithHttpInfo(dataViewName, audienceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns native XML (i.e. for use with other FastStats applications) for the Nett query of the latest update for a particular audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> AudiencesGetAudienceLatestNativeForNettQueryAsyncWithHttpInfo (string dataViewName, int? audienceId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetAudienceLatestNativeForNettQuery");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesGetAudienceLatestNativeForNettQuery");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/Native/Nett";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetAudienceLatestNativeForNettQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Returns details of a particular result for a particular audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the results for</param>
        /// <param name="audienceResultId">The id of the result for the audience</param>
        /// <returns>AudienceResultDetail</returns>
        public AudienceResultDetail AudiencesGetAudienceResult (string dataViewName, int? audienceId, int? audienceResultId)
        {
             ApiResponse<AudienceResultDetail> localVarResponse = AudiencesGetAudienceResultWithHttpInfo(dataViewName, audienceId, audienceResultId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details of a particular result for a particular audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the results for</param>
        /// <param name="audienceResultId">The id of the result for the audience</param>
        /// <returns>ApiResponse of AudienceResultDetail</returns>
        public ApiResponse< AudienceResultDetail > AudiencesGetAudienceResultWithHttpInfo (string dataViewName, int? audienceId, int? audienceResultId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetAudienceResult");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesGetAudienceResult");
            // verify the required parameter 'audienceResultId' is set
            if (audienceResultId == null)
                throw new ApiException(400, "Missing required parameter 'audienceResultId' when calling AudiencesApi->AudiencesGetAudienceResult");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/Results/{audienceResultId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (audienceResultId != null) localVarPathParams.Add("audienceResultId", this.Configuration.ApiClient.ParameterToString(audienceResultId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetAudienceResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceResultDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceResultDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceResultDetail)));
        }

        /// <summary>
        /// Returns details of a particular result for a particular audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the results for</param>
        /// <param name="audienceResultId">The id of the result for the audience</param>
        /// <returns>Task of AudienceResultDetail</returns>
        public async System.Threading.Tasks.Task<AudienceResultDetail> AudiencesGetAudienceResultAsync (string dataViewName, int? audienceId, int? audienceResultId)
        {
             ApiResponse<AudienceResultDetail> localVarResponse = await AudiencesGetAudienceResultAsyncWithHttpInfo(dataViewName, audienceId, audienceResultId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details of a particular result for a particular audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the results for</param>
        /// <param name="audienceResultId">The id of the result for the audience</param>
        /// <returns>Task of ApiResponse (AudienceResultDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AudienceResultDetail>> AudiencesGetAudienceResultAsyncWithHttpInfo (string dataViewName, int? audienceId, int? audienceResultId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetAudienceResult");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesGetAudienceResult");
            // verify the required parameter 'audienceResultId' is set
            if (audienceResultId == null)
                throw new ApiException(400, "Missing required parameter 'audienceResultId' when calling AudiencesApi->AudiencesGetAudienceResult");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/Results/{audienceResultId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (audienceResultId != null) localVarPathParams.Add("audienceResultId", this.Configuration.ApiClient.ParameterToString(audienceResultId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetAudienceResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceResultDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceResultDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceResultDetail)));
        }

        /// <summary>
        /// Returns a summary of the results for a particular audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the audience of results for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, AudienceUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, AudienceUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsAudienceResultSummary</returns>
        public PagedResultsAudienceResultSummary AudiencesGetAudienceResults (string dataViewName, int? audienceId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsAudienceResultSummary> localVarResponse = AudiencesGetAudienceResultsWithHttpInfo(dataViewName, audienceId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a summary of the results for a particular audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the audience of results for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, AudienceUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, AudienceUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsAudienceResultSummary</returns>
        public ApiResponse< PagedResultsAudienceResultSummary > AudiencesGetAudienceResultsWithHttpInfo (string dataViewName, int? audienceId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetAudienceResults");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesGetAudienceResults");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/Results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetAudienceResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsAudienceResultSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsAudienceResultSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsAudienceResultSummary)));
        }

        /// <summary>
        /// Returns a summary of the results for a particular audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the audience of results for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, AudienceUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, AudienceUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsAudienceResultSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsAudienceResultSummary> AudiencesGetAudienceResultsAsync (string dataViewName, int? audienceId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsAudienceResultSummary> localVarResponse = await AudiencesGetAudienceResultsAsyncWithHttpInfo(dataViewName, audienceId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a summary of the results for a particular audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the audience of results for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, AudienceUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, AudienceUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsAudienceResultSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsAudienceResultSummary>> AudiencesGetAudienceResultsAsyncWithHttpInfo (string dataViewName, int? audienceId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetAudienceResults");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesGetAudienceResults");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/Results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetAudienceResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsAudienceResultSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsAudienceResultSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsAudienceResultSummary)));
        }

        /// <summary>
        /// Returns details of an update for a particular audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that contains the update</param>
        /// <param name="audienceUpdateId">The id of the update for the audience</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this update or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this update or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>AudienceUpdateDetail</returns>
        public AudienceUpdateDetail AudiencesGetAudienceUpdate (string dataViewName, int? audienceId, int? audienceUpdateId, bool? includeQueries = null, bool? includeBrief = null)
        {
             ApiResponse<AudienceUpdateDetail> localVarResponse = AudiencesGetAudienceUpdateWithHttpInfo(dataViewName, audienceId, audienceUpdateId, includeQueries, includeBrief);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details of an update for a particular audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that contains the update</param>
        /// <param name="audienceUpdateId">The id of the update for the audience</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this update or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this update or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>ApiResponse of AudienceUpdateDetail</returns>
        public ApiResponse< AudienceUpdateDetail > AudiencesGetAudienceUpdateWithHttpInfo (string dataViewName, int? audienceId, int? audienceUpdateId, bool? includeQueries = null, bool? includeBrief = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetAudienceUpdate");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesGetAudienceUpdate");
            // verify the required parameter 'audienceUpdateId' is set
            if (audienceUpdateId == null)
                throw new ApiException(400, "Missing required parameter 'audienceUpdateId' when calling AudiencesApi->AudiencesGetAudienceUpdate");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/Updates/{audienceUpdateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (audienceUpdateId != null) localVarPathParams.Add("audienceUpdateId", this.Configuration.ApiClient.ParameterToString(audienceUpdateId)); // path parameter
            if (includeQueries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeQueries", includeQueries)); // query parameter
            if (includeBrief != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBrief", includeBrief)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetAudienceUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceUpdateDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceUpdateDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceUpdateDetail)));
        }

        /// <summary>
        /// Returns details of an update for a particular audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that contains the update</param>
        /// <param name="audienceUpdateId">The id of the update for the audience</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this update or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this update or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of AudienceUpdateDetail</returns>
        public async System.Threading.Tasks.Task<AudienceUpdateDetail> AudiencesGetAudienceUpdateAsync (string dataViewName, int? audienceId, int? audienceUpdateId, bool? includeQueries = null, bool? includeBrief = null)
        {
             ApiResponse<AudienceUpdateDetail> localVarResponse = await AudiencesGetAudienceUpdateAsyncWithHttpInfo(dataViewName, audienceId, audienceUpdateId, includeQueries, includeBrief);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details of an update for a particular audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that contains the update</param>
        /// <param name="audienceUpdateId">The id of the update for the audience</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this update or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this update or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of ApiResponse (AudienceUpdateDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AudienceUpdateDetail>> AudiencesGetAudienceUpdateAsyncWithHttpInfo (string dataViewName, int? audienceId, int? audienceUpdateId, bool? includeQueries = null, bool? includeBrief = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetAudienceUpdate");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesGetAudienceUpdate");
            // verify the required parameter 'audienceUpdateId' is set
            if (audienceUpdateId == null)
                throw new ApiException(400, "Missing required parameter 'audienceUpdateId' when calling AudiencesApi->AudiencesGetAudienceUpdate");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/Updates/{audienceUpdateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (audienceUpdateId != null) localVarPathParams.Add("audienceUpdateId", this.Configuration.ApiClient.ParameterToString(audienceUpdateId)); // path parameter
            if (includeQueries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeQueries", includeQueries)); // query parameter
            if (includeBrief != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBrief", includeBrief)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetAudienceUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceUpdateDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceUpdateDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceUpdateDetail)));
        }

        /// <summary>
        /// Returns a summary of the updates to a particular audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the updates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsAudienceUpdateSummary</returns>
        public PagedResultsAudienceUpdateSummary AudiencesGetAudienceUpdates (string dataViewName, int? audienceId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsAudienceUpdateSummary> localVarResponse = AudiencesGetAudienceUpdatesWithHttpInfo(dataViewName, audienceId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a summary of the updates to a particular audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the updates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsAudienceUpdateSummary</returns>
        public ApiResponse< PagedResultsAudienceUpdateSummary > AudiencesGetAudienceUpdatesWithHttpInfo (string dataViewName, int? audienceId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetAudienceUpdates");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesGetAudienceUpdates");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/Updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetAudienceUpdates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsAudienceUpdateSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsAudienceUpdateSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsAudienceUpdateSummary)));
        }

        /// <summary>
        /// Returns a summary of the updates to a particular audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the updates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsAudienceUpdateSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsAudienceUpdateSummary> AudiencesGetAudienceUpdatesAsync (string dataViewName, int? audienceId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsAudienceUpdateSummary> localVarResponse = await AudiencesGetAudienceUpdatesAsyncWithHttpInfo(dataViewName, audienceId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a summary of the updates to a particular audience 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to get the updates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsAudienceUpdateSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsAudienceUpdateSummary>> AudiencesGetAudienceUpdatesAsyncWithHttpInfo (string dataViewName, int? audienceId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetAudienceUpdates");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesGetAudienceUpdates");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/Updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetAudienceUpdates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsAudienceUpdateSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsAudienceUpdateSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsAudienceUpdateSummary)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Gets summary information about each audience in the DataView. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted audience, not deleted audience or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsAudienceSummary</returns>
        public PagedResultsAudienceSummary AudiencesGetAudiences (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsAudienceSummary> localVarResponse = AudiencesGetAudiencesWithHttpInfo(dataViewName, includeDeleted, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Requires OrbitAdmin: Gets summary information about each audience in the DataView. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted audience, not deleted audience or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsAudienceSummary</returns>
        public ApiResponse< PagedResultsAudienceSummary > AudiencesGetAudiencesWithHttpInfo (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetAudiences");

            var localVarPath = "/{dataViewName}/Audiences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetAudiences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsAudienceSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsAudienceSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsAudienceSummary)));
        }

        /// <summary>
        /// Requires OrbitAdmin: Gets summary information about each audience in the DataView. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted audience, not deleted audience or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsAudienceSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsAudienceSummary> AudiencesGetAudiencesAsync (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsAudienceSummary> localVarResponse = await AudiencesGetAudiencesAsyncWithHttpInfo(dataViewName, includeDeleted, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Requires OrbitAdmin: Gets summary information about each audience in the DataView. This endpoint is only available for users with the OrbitAdmin role
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted audience, not deleted audience or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn. (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsAudienceSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsAudienceSummary>> AudiencesGetAudiencesAsyncWithHttpInfo (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetAudiences");

            var localVarPath = "/{dataViewName}/Audiences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetAudiences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsAudienceSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResultsAudienceSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsAudienceSummary)));
        }

        /// <summary>
        /// Get the status of a running calculate job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <param name="dataLicensingDetail">The details required to get data licensing information for an audience (optional)</param>
        /// <returns>AudienceDataLicensingInfoJobDetail</returns>
        public AudienceDataLicensingInfoJobDetail AudiencesGetCalculateAudienceDataLicensingJob (string dataViewName, int? audienceId, int? jobId, DataLicensingDetail dataLicensingDetail = null)
        {
             ApiResponse<AudienceDataLicensingInfoJobDetail> localVarResponse = AudiencesGetCalculateAudienceDataLicensingJobWithHttpInfo(dataViewName, audienceId, jobId, dataLicensingDetail);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of a running calculate job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <param name="dataLicensingDetail">The details required to get data licensing information for an audience (optional)</param>
        /// <returns>ApiResponse of AudienceDataLicensingInfoJobDetail</returns>
        public ApiResponse< AudienceDataLicensingInfoJobDetail > AudiencesGetCalculateAudienceDataLicensingJobWithHttpInfo (string dataViewName, int? audienceId, int? jobId, DataLicensingDetail dataLicensingDetail = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetCalculateAudienceDataLicensingJob");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesGetCalculateAudienceDataLicensingJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AudiencesApi->AudiencesGetCalculateAudienceDataLicensingJob");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/DataLicensingJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (dataLicensingDetail != null && dataLicensingDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dataLicensingDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataLicensingDetail; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetCalculateAudienceDataLicensingJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceDataLicensingInfoJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceDataLicensingInfoJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceDataLicensingInfoJobDetail)));
        }

        /// <summary>
        /// Get the status of a running calculate job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <param name="dataLicensingDetail">The details required to get data licensing information for an audience (optional)</param>
        /// <returns>Task of AudienceDataLicensingInfoJobDetail</returns>
        public async System.Threading.Tasks.Task<AudienceDataLicensingInfoJobDetail> AudiencesGetCalculateAudienceDataLicensingJobAsync (string dataViewName, int? audienceId, int? jobId, DataLicensingDetail dataLicensingDetail = null)
        {
             ApiResponse<AudienceDataLicensingInfoJobDetail> localVarResponse = await AudiencesGetCalculateAudienceDataLicensingJobAsyncWithHttpInfo(dataViewName, audienceId, jobId, dataLicensingDetail);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the status of a running calculate job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <param name="dataLicensingDetail">The details required to get data licensing information for an audience (optional)</param>
        /// <returns>Task of ApiResponse (AudienceDataLicensingInfoJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AudienceDataLicensingInfoJobDetail>> AudiencesGetCalculateAudienceDataLicensingJobAsyncWithHttpInfo (string dataViewName, int? audienceId, int? jobId, DataLicensingDetail dataLicensingDetail = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetCalculateAudienceDataLicensingJob");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesGetCalculateAudienceDataLicensingJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AudiencesApi->AudiencesGetCalculateAudienceDataLicensingJob");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/DataLicensingJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (dataLicensingDetail != null && dataLicensingDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dataLicensingDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataLicensingDetail; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetCalculateAudienceDataLicensingJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceDataLicensingInfoJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceDataLicensingInfoJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceDataLicensingInfoJobDetail)));
        }

        /// <summary>
        /// Get the status of a running calculate job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>AudienceCalculateJobDetail</returns>
        public AudienceCalculateJobDetail AudiencesGetCalculateAudienceJob (string dataViewName, int? audienceId, int? jobId)
        {
             ApiResponse<AudienceCalculateJobDetail> localVarResponse = AudiencesGetCalculateAudienceJobWithHttpInfo(dataViewName, audienceId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of a running calculate job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of AudienceCalculateJobDetail</returns>
        public ApiResponse< AudienceCalculateJobDetail > AudiencesGetCalculateAudienceJobWithHttpInfo (string dataViewName, int? audienceId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetCalculateAudienceJob");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesGetCalculateAudienceJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AudiencesApi->AudiencesGetCalculateAudienceJob");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/CalculateJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetCalculateAudienceJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceCalculateJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceCalculateJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceCalculateJobDetail)));
        }

        /// <summary>
        /// Get the status of a running calculate job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of AudienceCalculateJobDetail</returns>
        public async System.Threading.Tasks.Task<AudienceCalculateJobDetail> AudiencesGetCalculateAudienceJobAsync (string dataViewName, int? audienceId, int? jobId)
        {
             ApiResponse<AudienceCalculateJobDetail> localVarResponse = await AudiencesGetCalculateAudienceJobAsyncWithHttpInfo(dataViewName, audienceId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the status of a running calculate job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (AudienceCalculateJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AudienceCalculateJobDetail>> AudiencesGetCalculateAudienceJobAsyncWithHttpInfo (string dataViewName, int? audienceId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetCalculateAudienceJob");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesGetCalculateAudienceJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AudiencesApi->AudiencesGetCalculateAudienceJob");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/CalculateJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetCalculateAudienceJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceCalculateJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceCalculateJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceCalculateJobDetail)));
        }

        /// <summary>
        /// Get the status of a running check job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the check job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>AudienceCheckJobDetail</returns>
        public AudienceCheckJobDetail AudiencesGetCheckAudienceJob (string dataViewName, int? audienceId, int? jobId)
        {
             ApiResponse<AudienceCheckJobDetail> localVarResponse = AudiencesGetCheckAudienceJobWithHttpInfo(dataViewName, audienceId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of a running check job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the check job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of AudienceCheckJobDetail</returns>
        public ApiResponse< AudienceCheckJobDetail > AudiencesGetCheckAudienceJobWithHttpInfo (string dataViewName, int? audienceId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetCheckAudienceJob");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesGetCheckAudienceJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AudiencesApi->AudiencesGetCheckAudienceJob");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/CheckJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetCheckAudienceJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceCheckJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceCheckJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceCheckJobDetail)));
        }

        /// <summary>
        /// Get the status of a running check job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the check job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of AudienceCheckJobDetail</returns>
        public async System.Threading.Tasks.Task<AudienceCheckJobDetail> AudiencesGetCheckAudienceJobAsync (string dataViewName, int? audienceId, int? jobId)
        {
             ApiResponse<AudienceCheckJobDetail> localVarResponse = await AudiencesGetCheckAudienceJobAsyncWithHttpInfo(dataViewName, audienceId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the status of a running check job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the check job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (AudienceCheckJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AudienceCheckJobDetail>> AudiencesGetCheckAudienceJobAsyncWithHttpInfo (string dataViewName, int? audienceId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetCheckAudienceJob");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesGetCheckAudienceJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AudiencesApi->AudiencesGetCheckAudienceJob");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/CheckJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetCheckAudienceJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceCheckJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceCheckJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceCheckJobDetail)));
        }

        /// <summary>
        /// Get the status of a running export job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the export job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>AudienceExportJobDetail</returns>
        public AudienceExportJobDetail AudiencesGetExportAudienceJob (string dataViewName, int? audienceId, int? jobId)
        {
             ApiResponse<AudienceExportJobDetail> localVarResponse = AudiencesGetExportAudienceJobWithHttpInfo(dataViewName, audienceId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of a running export job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the export job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of AudienceExportJobDetail</returns>
        public ApiResponse< AudienceExportJobDetail > AudiencesGetExportAudienceJobWithHttpInfo (string dataViewName, int? audienceId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetExportAudienceJob");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesGetExportAudienceJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AudiencesApi->AudiencesGetExportAudienceJob");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/ExportJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetExportAudienceJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceExportJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceExportJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceExportJobDetail)));
        }

        /// <summary>
        /// Get the status of a running export job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the export job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of AudienceExportJobDetail</returns>
        public async System.Threading.Tasks.Task<AudienceExportJobDetail> AudiencesGetExportAudienceJobAsync (string dataViewName, int? audienceId, int? jobId)
        {
             ApiResponse<AudienceExportJobDetail> localVarResponse = await AudiencesGetExportAudienceJobAsyncWithHttpInfo(dataViewName, audienceId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the status of a running export job 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience that the export job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (AudienceExportJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AudienceExportJobDetail>> AudiencesGetExportAudienceJobAsyncWithHttpInfo (string dataViewName, int? audienceId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesGetExportAudienceJob");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesGetExportAudienceJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AudiencesApi->AudiencesGetExportAudienceJob");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/ExportJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesGetExportAudienceJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceExportJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceExportJobDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceExportJobDetail)));
        }

        /// <summary>
        /// Transfer ownership of an audience from the current user to a new owner Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to transfer.</param>
        /// <param name="transferOwnershipDetails">The details for transferring ownership of the audience. (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for the returned audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>AudienceDetail</returns>
        public AudienceDetail AudiencesTransferAudienceOwnership (string dataViewName, int? audienceId, TransferAudienceOwnershipDetails transferOwnershipDetails = null, bool? includeQueries = null, bool? includeBrief = null)
        {
             ApiResponse<AudienceDetail> localVarResponse = AudiencesTransferAudienceOwnershipWithHttpInfo(dataViewName, audienceId, transferOwnershipDetails, includeQueries, includeBrief);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer ownership of an audience from the current user to a new owner Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to transfer.</param>
        /// <param name="transferOwnershipDetails">The details for transferring ownership of the audience. (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for the returned audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>ApiResponse of AudienceDetail</returns>
        public ApiResponse< AudienceDetail > AudiencesTransferAudienceOwnershipWithHttpInfo (string dataViewName, int? audienceId, TransferAudienceOwnershipDetails transferOwnershipDetails = null, bool? includeQueries = null, bool? includeBrief = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesTransferAudienceOwnership");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesTransferAudienceOwnership");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/TransferOwnership";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (includeQueries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeQueries", includeQueries)); // query parameter
            if (includeBrief != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBrief", includeBrief)); // query parameter
            if (transferOwnershipDetails != null && transferOwnershipDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transferOwnershipDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transferOwnershipDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesTransferAudienceOwnership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceDetail)));
        }

        /// <summary>
        /// Transfer ownership of an audience from the current user to a new owner Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to transfer.</param>
        /// <param name="transferOwnershipDetails">The details for transferring ownership of the audience. (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for the returned audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of AudienceDetail</returns>
        public async System.Threading.Tasks.Task<AudienceDetail> AudiencesTransferAudienceOwnershipAsync (string dataViewName, int? audienceId, TransferAudienceOwnershipDetails transferOwnershipDetails = null, bool? includeQueries = null, bool? includeBrief = null)
        {
             ApiResponse<AudienceDetail> localVarResponse = await AudiencesTransferAudienceOwnershipAsyncWithHttpInfo(dataViewName, audienceId, transferOwnershipDetails, includeQueries, includeBrief);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transfer ownership of an audience from the current user to a new owner Requires licence flags [AudienceSelection]
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="audienceId">The id of the audience to transfer.</param>
        /// <param name="transferOwnershipDetails">The details for transferring ownership of the audience. (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for the returned audience or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of ApiResponse (AudienceDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AudienceDetail>> AudiencesTransferAudienceOwnershipAsyncWithHttpInfo (string dataViewName, int? audienceId, TransferAudienceOwnershipDetails transferOwnershipDetails = null, bool? includeQueries = null, bool? includeBrief = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling AudiencesApi->AudiencesTransferAudienceOwnership");
            // verify the required parameter 'audienceId' is set
            if (audienceId == null)
                throw new ApiException(400, "Missing required parameter 'audienceId' when calling AudiencesApi->AudiencesTransferAudienceOwnership");

            var localVarPath = "/{dataViewName}/Audiences/{audienceId}/TransferOwnership";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (audienceId != null) localVarPathParams.Add("audienceId", this.Configuration.ApiClient.ParameterToString(audienceId)); // path parameter
            if (includeQueries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeQueries", includeQueries)); // query parameter
            if (includeBrief != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBrief", includeBrief)); // query parameter
            if (transferOwnershipDetails != null && transferOwnershipDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transferOwnershipDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transferOwnershipDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudiencesTransferAudienceOwnership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AudienceDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AudienceDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudienceDetail)));
        }

    }
}
