/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Apteco.OrbitDashboardRefresher.APIClient.Client;
using Apteco.OrbitDashboardRefresher.APIClient.Model;

namespace Apteco.OrbitDashboardRefresher.APIClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemporaryFilesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the contents of a temporary file with the given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id of the temporary file to return the contents for</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream TemporaryFilesGetTemporaryFile (string dataViewName, string id);

        /// <summary>
        /// Returns the contents of a temporary file with the given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id of the temporary file to return the contents for</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> TemporaryFilesGetTemporaryFileWithHttpInfo (string dataViewName, string id);
        /// <summary>
        /// Returns the contents of a temporary file part with the given id and part number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id of the temporary file</param>
        /// <param name="partNumber">The number of the temporary file part to return the contents for</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream TemporaryFilesGetTemporaryFilePart (string dataViewName, string id, int? partNumber);

        /// <summary>
        /// Returns the contents of a temporary file part with the given id and part number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id of the temporary file</param>
        /// <param name="partNumber">The number of the temporary file part to return the contents for</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> TemporaryFilesGetTemporaryFilePartWithHttpInfo (string dataViewName, string id, int? partNumber);
        /// <summary>
        /// Creates or updates a temporary file with the given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id for the temporary file to create or update</param>
        /// <param name="_file">The file to upload.</param>
        /// <returns>TemporaryFile</returns>
        TemporaryFile TemporaryFilesUpsertTemporaryFile (string dataViewName, string id, System.IO.Stream _file);

        /// <summary>
        /// Creates or updates a temporary file with the given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id for the temporary file to create or update</param>
        /// <param name="_file">The file to upload.</param>
        /// <returns>ApiResponse of TemporaryFile</returns>
        ApiResponse<TemporaryFile> TemporaryFilesUpsertTemporaryFileWithHttpInfo (string dataViewName, string id, System.IO.Stream _file);
        /// <summary>
        /// Creates or updates part of a temporary file with the given id and part number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id for the temporary file</param>
        /// <param name="partNumber">The number of the temporary file part to create or update.  This is zero-based</param>
        /// <param name="_file">The file to upload.</param>
        /// <param name="finalPart">Whether this part is the final part and the full temporary file should be assembled.  If this is not specified it defaults to false.  If this is set to true all parts from 0 up to this partIndex must already exist (optional)</param>
        /// <returns>TemporaryFilePart</returns>
        TemporaryFilePart TemporaryFilesUpsertTemporaryFilePart (string dataViewName, string id, int? partNumber, System.IO.Stream _file, bool? finalPart = null);

        /// <summary>
        /// Creates or updates part of a temporary file with the given id and part number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id for the temporary file</param>
        /// <param name="partNumber">The number of the temporary file part to create or update.  This is zero-based</param>
        /// <param name="_file">The file to upload.</param>
        /// <param name="finalPart">Whether this part is the final part and the full temporary file should be assembled.  If this is not specified it defaults to false.  If this is set to true all parts from 0 up to this partIndex must already exist (optional)</param>
        /// <returns>ApiResponse of TemporaryFilePart</returns>
        ApiResponse<TemporaryFilePart> TemporaryFilesUpsertTemporaryFilePartWithHttpInfo (string dataViewName, string id, int? partNumber, System.IO.Stream _file, bool? finalPart = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns the contents of a temporary file with the given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id of the temporary file to return the contents for</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> TemporaryFilesGetTemporaryFileAsync (string dataViewName, string id);

        /// <summary>
        /// Returns the contents of a temporary file with the given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id of the temporary file to return the contents for</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> TemporaryFilesGetTemporaryFileAsyncWithHttpInfo (string dataViewName, string id);
        /// <summary>
        /// Returns the contents of a temporary file part with the given id and part number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id of the temporary file</param>
        /// <param name="partNumber">The number of the temporary file part to return the contents for</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> TemporaryFilesGetTemporaryFilePartAsync (string dataViewName, string id, int? partNumber);

        /// <summary>
        /// Returns the contents of a temporary file part with the given id and part number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id of the temporary file</param>
        /// <param name="partNumber">The number of the temporary file part to return the contents for</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> TemporaryFilesGetTemporaryFilePartAsyncWithHttpInfo (string dataViewName, string id, int? partNumber);
        /// <summary>
        /// Creates or updates a temporary file with the given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id for the temporary file to create or update</param>
        /// <param name="_file">The file to upload.</param>
        /// <returns>Task of TemporaryFile</returns>
        System.Threading.Tasks.Task<TemporaryFile> TemporaryFilesUpsertTemporaryFileAsync (string dataViewName, string id, System.IO.Stream _file);

        /// <summary>
        /// Creates or updates a temporary file with the given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id for the temporary file to create or update</param>
        /// <param name="_file">The file to upload.</param>
        /// <returns>Task of ApiResponse (TemporaryFile)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemporaryFile>> TemporaryFilesUpsertTemporaryFileAsyncWithHttpInfo (string dataViewName, string id, System.IO.Stream _file);
        /// <summary>
        /// Creates or updates part of a temporary file with the given id and part number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id for the temporary file</param>
        /// <param name="partNumber">The number of the temporary file part to create or update.  This is zero-based</param>
        /// <param name="_file">The file to upload.</param>
        /// <param name="finalPart">Whether this part is the final part and the full temporary file should be assembled.  If this is not specified it defaults to false.  If this is set to true all parts from 0 up to this partIndex must already exist (optional)</param>
        /// <returns>Task of TemporaryFilePart</returns>
        System.Threading.Tasks.Task<TemporaryFilePart> TemporaryFilesUpsertTemporaryFilePartAsync (string dataViewName, string id, int? partNumber, System.IO.Stream _file, bool? finalPart = null);

        /// <summary>
        /// Creates or updates part of a temporary file with the given id and part number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id for the temporary file</param>
        /// <param name="partNumber">The number of the temporary file part to create or update.  This is zero-based</param>
        /// <param name="_file">The file to upload.</param>
        /// <param name="finalPart">Whether this part is the final part and the full temporary file should be assembled.  If this is not specified it defaults to false.  If this is set to true all parts from 0 up to this partIndex must already exist (optional)</param>
        /// <returns>Task of ApiResponse (TemporaryFilePart)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemporaryFilePart>> TemporaryFilesUpsertTemporaryFilePartAsyncWithHttpInfo (string dataViewName, string id, int? partNumber, System.IO.Stream _file, bool? finalPart = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemporaryFilesApi : ITemporaryFilesApi
    {
        private Apteco.OrbitDashboardRefresher.APIClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemporaryFilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemporaryFilesApi(String basePath)
        {
            this.Configuration = new Apteco.OrbitDashboardRefresher.APIClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.OrbitDashboardRefresher.APIClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemporaryFilesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemporaryFilesApi(Apteco.OrbitDashboardRefresher.APIClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Apteco.OrbitDashboardRefresher.APIClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.OrbitDashboardRefresher.APIClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apteco.OrbitDashboardRefresher.APIClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.OrbitDashboardRefresher.APIClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns the contents of a temporary file with the given id 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id of the temporary file to return the contents for</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream TemporaryFilesGetTemporaryFile (string dataViewName, string id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = TemporaryFilesGetTemporaryFileWithHttpInfo(dataViewName, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the contents of a temporary file with the given id 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id of the temporary file to return the contents for</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > TemporaryFilesGetTemporaryFileWithHttpInfo (string dataViewName, string id)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling TemporaryFilesApi->TemporaryFilesGetTemporaryFile");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemporaryFilesApi->TemporaryFilesGetTemporaryFile");

            var localVarPath = "./{dataViewName}/TemporaryFiles/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemporaryFilesGetTemporaryFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Returns the contents of a temporary file with the given id 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id of the temporary file to return the contents for</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> TemporaryFilesGetTemporaryFileAsync (string dataViewName, string id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await TemporaryFilesGetTemporaryFileAsyncWithHttpInfo(dataViewName, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the contents of a temporary file with the given id 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id of the temporary file to return the contents for</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> TemporaryFilesGetTemporaryFileAsyncWithHttpInfo (string dataViewName, string id)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling TemporaryFilesApi->TemporaryFilesGetTemporaryFile");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemporaryFilesApi->TemporaryFilesGetTemporaryFile");

            var localVarPath = "./{dataViewName}/TemporaryFiles/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemporaryFilesGetTemporaryFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Returns the contents of a temporary file part with the given id and part number 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id of the temporary file</param>
        /// <param name="partNumber">The number of the temporary file part to return the contents for</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream TemporaryFilesGetTemporaryFilePart (string dataViewName, string id, int? partNumber)
        {
             ApiResponse<System.IO.Stream> localVarResponse = TemporaryFilesGetTemporaryFilePartWithHttpInfo(dataViewName, id, partNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the contents of a temporary file part with the given id and part number 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id of the temporary file</param>
        /// <param name="partNumber">The number of the temporary file part to return the contents for</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > TemporaryFilesGetTemporaryFilePartWithHttpInfo (string dataViewName, string id, int? partNumber)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling TemporaryFilesApi->TemporaryFilesGetTemporaryFilePart");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemporaryFilesApi->TemporaryFilesGetTemporaryFilePart");
            // verify the required parameter 'partNumber' is set
            if (partNumber == null)
                throw new ApiException(400, "Missing required parameter 'partNumber' when calling TemporaryFilesApi->TemporaryFilesGetTemporaryFilePart");

            var localVarPath = "./{dataViewName}/TemporaryFiles/{id}/{partNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (partNumber != null) localVarPathParams.Add("partNumber", this.Configuration.ApiClient.ParameterToString(partNumber)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemporaryFilesGetTemporaryFilePart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Returns the contents of a temporary file part with the given id and part number 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id of the temporary file</param>
        /// <param name="partNumber">The number of the temporary file part to return the contents for</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> TemporaryFilesGetTemporaryFilePartAsync (string dataViewName, string id, int? partNumber)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await TemporaryFilesGetTemporaryFilePartAsyncWithHttpInfo(dataViewName, id, partNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the contents of a temporary file part with the given id and part number 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id of the temporary file</param>
        /// <param name="partNumber">The number of the temporary file part to return the contents for</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> TemporaryFilesGetTemporaryFilePartAsyncWithHttpInfo (string dataViewName, string id, int? partNumber)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling TemporaryFilesApi->TemporaryFilesGetTemporaryFilePart");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemporaryFilesApi->TemporaryFilesGetTemporaryFilePart");
            // verify the required parameter 'partNumber' is set
            if (partNumber == null)
                throw new ApiException(400, "Missing required parameter 'partNumber' when calling TemporaryFilesApi->TemporaryFilesGetTemporaryFilePart");

            var localVarPath = "./{dataViewName}/TemporaryFiles/{id}/{partNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (partNumber != null) localVarPathParams.Add("partNumber", this.Configuration.ApiClient.ParameterToString(partNumber)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemporaryFilesGetTemporaryFilePart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Creates or updates a temporary file with the given id 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id for the temporary file to create or update</param>
        /// <param name="_file">The file to upload.</param>
        /// <returns>TemporaryFile</returns>
        public TemporaryFile TemporaryFilesUpsertTemporaryFile (string dataViewName, string id, System.IO.Stream _file)
        {
             ApiResponse<TemporaryFile> localVarResponse = TemporaryFilesUpsertTemporaryFileWithHttpInfo(dataViewName, id, _file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or updates a temporary file with the given id 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id for the temporary file to create or update</param>
        /// <param name="_file">The file to upload.</param>
        /// <returns>ApiResponse of TemporaryFile</returns>
        public ApiResponse< TemporaryFile > TemporaryFilesUpsertTemporaryFileWithHttpInfo (string dataViewName, string id, System.IO.Stream _file)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling TemporaryFilesApi->TemporaryFilesUpsertTemporaryFile");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemporaryFilesApi->TemporaryFilesUpsertTemporaryFile");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling TemporaryFilesApi->TemporaryFilesUpsertTemporaryFile");

            var localVarPath = "./{dataViewName}/TemporaryFiles/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemporaryFilesUpsertTemporaryFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemporaryFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TemporaryFile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemporaryFile)));
        }

        /// <summary>
        /// Creates or updates a temporary file with the given id 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id for the temporary file to create or update</param>
        /// <param name="_file">The file to upload.</param>
        /// <returns>Task of TemporaryFile</returns>
        public async System.Threading.Tasks.Task<TemporaryFile> TemporaryFilesUpsertTemporaryFileAsync (string dataViewName, string id, System.IO.Stream _file)
        {
             ApiResponse<TemporaryFile> localVarResponse = await TemporaryFilesUpsertTemporaryFileAsyncWithHttpInfo(dataViewName, id, _file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates or updates a temporary file with the given id 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id for the temporary file to create or update</param>
        /// <param name="_file">The file to upload.</param>
        /// <returns>Task of ApiResponse (TemporaryFile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemporaryFile>> TemporaryFilesUpsertTemporaryFileAsyncWithHttpInfo (string dataViewName, string id, System.IO.Stream _file)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling TemporaryFilesApi->TemporaryFilesUpsertTemporaryFile");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemporaryFilesApi->TemporaryFilesUpsertTemporaryFile");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling TemporaryFilesApi->TemporaryFilesUpsertTemporaryFile");

            var localVarPath = "./{dataViewName}/TemporaryFiles/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemporaryFilesUpsertTemporaryFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemporaryFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TemporaryFile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemporaryFile)));
        }

        /// <summary>
        /// Creates or updates part of a temporary file with the given id and part number 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id for the temporary file</param>
        /// <param name="partNumber">The number of the temporary file part to create or update.  This is zero-based</param>
        /// <param name="_file">The file to upload.</param>
        /// <param name="finalPart">Whether this part is the final part and the full temporary file should be assembled.  If this is not specified it defaults to false.  If this is set to true all parts from 0 up to this partIndex must already exist (optional)</param>
        /// <returns>TemporaryFilePart</returns>
        public TemporaryFilePart TemporaryFilesUpsertTemporaryFilePart (string dataViewName, string id, int? partNumber, System.IO.Stream _file, bool? finalPart = null)
        {
             ApiResponse<TemporaryFilePart> localVarResponse = TemporaryFilesUpsertTemporaryFilePartWithHttpInfo(dataViewName, id, partNumber, _file, finalPart);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or updates part of a temporary file with the given id and part number 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id for the temporary file</param>
        /// <param name="partNumber">The number of the temporary file part to create or update.  This is zero-based</param>
        /// <param name="_file">The file to upload.</param>
        /// <param name="finalPart">Whether this part is the final part and the full temporary file should be assembled.  If this is not specified it defaults to false.  If this is set to true all parts from 0 up to this partIndex must already exist (optional)</param>
        /// <returns>ApiResponse of TemporaryFilePart</returns>
        public ApiResponse< TemporaryFilePart > TemporaryFilesUpsertTemporaryFilePartWithHttpInfo (string dataViewName, string id, int? partNumber, System.IO.Stream _file, bool? finalPart = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling TemporaryFilesApi->TemporaryFilesUpsertTemporaryFilePart");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemporaryFilesApi->TemporaryFilesUpsertTemporaryFilePart");
            // verify the required parameter 'partNumber' is set
            if (partNumber == null)
                throw new ApiException(400, "Missing required parameter 'partNumber' when calling TemporaryFilesApi->TemporaryFilesUpsertTemporaryFilePart");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling TemporaryFilesApi->TemporaryFilesUpsertTemporaryFilePart");

            var localVarPath = "./{dataViewName}/TemporaryFiles/{id}/{partNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (partNumber != null) localVarPathParams.Add("partNumber", this.Configuration.ApiClient.ParameterToString(partNumber)); // path parameter
            if (finalPart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "finalPart", finalPart)); // query parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemporaryFilesUpsertTemporaryFilePart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemporaryFilePart>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TemporaryFilePart) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemporaryFilePart)));
        }

        /// <summary>
        /// Creates or updates part of a temporary file with the given id and part number 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id for the temporary file</param>
        /// <param name="partNumber">The number of the temporary file part to create or update.  This is zero-based</param>
        /// <param name="_file">The file to upload.</param>
        /// <param name="finalPart">Whether this part is the final part and the full temporary file should be assembled.  If this is not specified it defaults to false.  If this is set to true all parts from 0 up to this partIndex must already exist (optional)</param>
        /// <returns>Task of TemporaryFilePart</returns>
        public async System.Threading.Tasks.Task<TemporaryFilePart> TemporaryFilesUpsertTemporaryFilePartAsync (string dataViewName, string id, int? partNumber, System.IO.Stream _file, bool? finalPart = null)
        {
             ApiResponse<TemporaryFilePart> localVarResponse = await TemporaryFilesUpsertTemporaryFilePartAsyncWithHttpInfo(dataViewName, id, partNumber, _file, finalPart);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates or updates part of a temporary file with the given id and part number 
        /// </summary>
        /// <exception cref="Apteco.OrbitDashboardRefresher.APIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="id">The id for the temporary file</param>
        /// <param name="partNumber">The number of the temporary file part to create or update.  This is zero-based</param>
        /// <param name="_file">The file to upload.</param>
        /// <param name="finalPart">Whether this part is the final part and the full temporary file should be assembled.  If this is not specified it defaults to false.  If this is set to true all parts from 0 up to this partIndex must already exist (optional)</param>
        /// <returns>Task of ApiResponse (TemporaryFilePart)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemporaryFilePart>> TemporaryFilesUpsertTemporaryFilePartAsyncWithHttpInfo (string dataViewName, string id, int? partNumber, System.IO.Stream _file, bool? finalPart = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling TemporaryFilesApi->TemporaryFilesUpsertTemporaryFilePart");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemporaryFilesApi->TemporaryFilesUpsertTemporaryFilePart");
            // verify the required parameter 'partNumber' is set
            if (partNumber == null)
                throw new ApiException(400, "Missing required parameter 'partNumber' when calling TemporaryFilesApi->TemporaryFilesUpsertTemporaryFilePart");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling TemporaryFilesApi->TemporaryFilesUpsertTemporaryFilePart");

            var localVarPath = "./{dataViewName}/TemporaryFiles/{id}/{partNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", this.Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (partNumber != null) localVarPathParams.Add("partNumber", this.Configuration.ApiClient.ParameterToString(partNumber)); // path parameter
            if (finalPart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "finalPart", finalPart)); // query parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemporaryFilesUpsertTemporaryFilePart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemporaryFilePart>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TemporaryFilePart) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemporaryFilePart)));
        }

    }
}
