/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Apteco.OrbitDashboardRefresher.APIClient.Client.SwaggerDateConverter;

namespace Apteco.OrbitDashboardRefresher.APIClient.Model
{
    /// <summary>
    /// Information to request the calculating the preview of a dashboard item (cube) from FastStats based upon a query
    /// </summary>
    [DataContract]
    public partial class DashboardItemPreviewData :  IEquatable<DashboardItemPreviewData>, IValidatableObject
    {
        /// <summary>
        /// Whether the chart for the given drill down level should be sorted in it&#39;s natural order, by ascending or descending values
        /// </summary>
        /// <value>Whether the chart for the given drill down level should be sorted in it&#39;s natural order, by ascending or descending values</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortOrderEnum
        {
            
            /// <summary>
            /// Enum Natural for value: Natural
            /// </summary>
            [EnumMember(Value = "Natural")]
            Natural = 1,
            
            /// <summary>
            /// Enum AscendingByValue for value: AscendingByValue
            /// </summary>
            [EnumMember(Value = "AscendingByValue")]
            AscendingByValue = 2,
            
            /// <summary>
            /// Enum DescendingByValue for value: DescendingByValue
            /// </summary>
            [EnumMember(Value = "DescendingByValue")]
            DescendingByValue = 3
        }

        /// <summary>
        /// Whether the chart for the given drill down level should be sorted in it&#39;s natural order, by ascending or descending values
        /// </summary>
        /// <value>Whether the chart for the given drill down level should be sorted in it&#39;s natural order, by ascending or descending values</value>
        [DataMember(Name="sortOrder", EmitDefaultValue=false)]
        public SortOrderEnum SortOrder { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardItemPreviewData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DashboardItemPreviewData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardItemPreviewData" /> class.
        /// </summary>
        /// <param name="dashboardItemId">The id for this dashboard item (required).</param>
        /// <param name="drillDownLevel">The drill down level for this dashboard item (required).</param>
        /// <param name="sortOrder">Whether the chart for the given drill down level should be sorted in it&#39;s natural order, by ascending or descending values (required).</param>
        /// <param name="baseQuery">The query that defines the records to base this dashboard item preview on (required).</param>
        /// <param name="dataSpecification">Details of the data specification used for the dashboard item.</param>
        public DashboardItemPreviewData(string dashboardItemId = default(string), int? drillDownLevel = default(int?), SortOrderEnum sortOrder = default(SortOrderEnum), Query baseQuery = default(Query), DashboardItemDataSpecification dataSpecification = default(DashboardItemDataSpecification))
        {
            // to ensure "dashboardItemId" is required (not null)
            if (dashboardItemId == null)
            {
                throw new InvalidDataException("dashboardItemId is a required property for DashboardItemPreviewData and cannot be null");
            }
            else
            {
                this.DashboardItemId = dashboardItemId;
            }
            // to ensure "drillDownLevel" is required (not null)
            if (drillDownLevel == null)
            {
                throw new InvalidDataException("drillDownLevel is a required property for DashboardItemPreviewData and cannot be null");
            }
            else
            {
                this.DrillDownLevel = drillDownLevel;
            }
            // to ensure "sortOrder" is required (not null)
            if (sortOrder == null)
            {
                throw new InvalidDataException("sortOrder is a required property for DashboardItemPreviewData and cannot be null");
            }
            else
            {
                this.SortOrder = sortOrder;
            }
            // to ensure "baseQuery" is required (not null)
            if (baseQuery == null)
            {
                throw new InvalidDataException("baseQuery is a required property for DashboardItemPreviewData and cannot be null");
            }
            else
            {
                this.BaseQuery = baseQuery;
            }
            this.DataSpecification = dataSpecification;
        }
        
        /// <summary>
        /// The id for this dashboard item
        /// </summary>
        /// <value>The id for this dashboard item</value>
        [DataMember(Name="dashboardItemId", EmitDefaultValue=false)]
        public string DashboardItemId { get; set; }

        /// <summary>
        /// The drill down level for this dashboard item
        /// </summary>
        /// <value>The drill down level for this dashboard item</value>
        [DataMember(Name="drillDownLevel", EmitDefaultValue=false)]
        public int? DrillDownLevel { get; set; }


        /// <summary>
        /// The query that defines the records to base this dashboard item preview on
        /// </summary>
        /// <value>The query that defines the records to base this dashboard item preview on</value>
        [DataMember(Name="baseQuery", EmitDefaultValue=false)]
        public Query BaseQuery { get; set; }

        /// <summary>
        /// Details of the data specification used for the dashboard item
        /// </summary>
        /// <value>Details of the data specification used for the dashboard item</value>
        [DataMember(Name="dataSpecification", EmitDefaultValue=false)]
        public DashboardItemDataSpecification DataSpecification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DashboardItemPreviewData {\n");
            sb.Append("  DashboardItemId: ").Append(DashboardItemId).Append("\n");
            sb.Append("  DrillDownLevel: ").Append(DrillDownLevel).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  BaseQuery: ").Append(BaseQuery).Append("\n");
            sb.Append("  DataSpecification: ").Append(DataSpecification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DashboardItemPreviewData);
        }

        /// <summary>
        /// Returns true if DashboardItemPreviewData instances are equal
        /// </summary>
        /// <param name="input">Instance of DashboardItemPreviewData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DashboardItemPreviewData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DashboardItemId == input.DashboardItemId ||
                    (this.DashboardItemId != null &&
                    this.DashboardItemId.Equals(input.DashboardItemId))
                ) && 
                (
                    this.DrillDownLevel == input.DrillDownLevel ||
                    (this.DrillDownLevel != null &&
                    this.DrillDownLevel.Equals(input.DrillDownLevel))
                ) && 
                (
                    this.SortOrder == input.SortOrder ||
                    (this.SortOrder != null &&
                    this.SortOrder.Equals(input.SortOrder))
                ) && 
                (
                    this.BaseQuery == input.BaseQuery ||
                    (this.BaseQuery != null &&
                    this.BaseQuery.Equals(input.BaseQuery))
                ) && 
                (
                    this.DataSpecification == input.DataSpecification ||
                    (this.DataSpecification != null &&
                    this.DataSpecification.Equals(input.DataSpecification))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DashboardItemId != null)
                    hashCode = hashCode * 59 + this.DashboardItemId.GetHashCode();
                if (this.DrillDownLevel != null)
                    hashCode = hashCode * 59 + this.DrillDownLevel.GetHashCode();
                if (this.SortOrder != null)
                    hashCode = hashCode * 59 + this.SortOrder.GetHashCode();
                if (this.BaseQuery != null)
                    hashCode = hashCode * 59 + this.BaseQuery.GetHashCode();
                if (this.DataSpecification != null)
                    hashCode = hashCode * 59 + this.DataSpecification.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
