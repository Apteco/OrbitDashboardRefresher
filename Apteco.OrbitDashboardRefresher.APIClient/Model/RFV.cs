/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.OrbitDashboardRefresher.APIClient.Client.SwaggerDateConverter;

namespace Apteco.OrbitDashboardRefresher.APIClient.Model
{
    /// <summary>
    /// RFV
    /// </summary>
    [DataContract]
    public partial class RFV :  IEquatable<RFV>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RFV" /> class.
        /// </summary>
        /// <param name="frequency">frequency.</param>
        /// <param name="recency">recency.</param>
        /// <param name="value">value.</param>
        /// <param name="groupingTable">groupingTable.</param>
        /// <param name="transactionalTable">transactionalTable.</param>
        public RFV(RFVFrequency frequency = default(RFVFrequency), RFVRecency recency = default(RFVRecency), RFVValue value = default(RFVValue), string groupingTable = default(string), string transactionalTable = default(string))
        {
            this.Frequency = frequency;
            this.Recency = recency;
            this.Value = value;
            this.GroupingTable = groupingTable;
            this.TransactionalTable = transactionalTable;
        }
        
        /// <summary>
        /// Gets or Sets Frequency
        /// </summary>
        [DataMember(Name="frequency", EmitDefaultValue=false)]
        public RFVFrequency Frequency { get; set; }

        /// <summary>
        /// Gets or Sets Recency
        /// </summary>
        [DataMember(Name="recency", EmitDefaultValue=false)]
        public RFVRecency Recency { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public RFVValue Value { get; set; }

        /// <summary>
        /// Gets or Sets GroupingTable
        /// </summary>
        [DataMember(Name="groupingTable", EmitDefaultValue=false)]
        public string GroupingTable { get; set; }

        /// <summary>
        /// Gets or Sets TransactionalTable
        /// </summary>
        [DataMember(Name="transactionalTable", EmitDefaultValue=false)]
        public string TransactionalTable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RFV {\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  Recency: ").Append(Recency).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  GroupingTable: ").Append(GroupingTable).Append("\n");
            sb.Append("  TransactionalTable: ").Append(TransactionalTable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RFV);
        }

        /// <summary>
        /// Returns true if RFV instances are equal
        /// </summary>
        /// <param name="input">Instance of RFV to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RFV input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Frequency == input.Frequency ||
                    (this.Frequency != null &&
                    this.Frequency.Equals(input.Frequency))
                ) && 
                (
                    this.Recency == input.Recency ||
                    (this.Recency != null &&
                    this.Recency.Equals(input.Recency))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.GroupingTable == input.GroupingTable ||
                    (this.GroupingTable != null &&
                    this.GroupingTable.Equals(input.GroupingTable))
                ) && 
                (
                    this.TransactionalTable == input.TransactionalTable ||
                    (this.TransactionalTable != null &&
                    this.TransactionalTable.Equals(input.TransactionalTable))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Frequency != null)
                    hashCode = hashCode * 59 + this.Frequency.GetHashCode();
                if (this.Recency != null)
                    hashCode = hashCode * 59 + this.Recency.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.GroupingTable != null)
                    hashCode = hashCode * 59 + this.GroupingTable.GetHashCode();
                if (this.TransactionalTable != null)
                    hashCode = hashCode * 59 + this.TransactionalTable.GetHashCode();
                return hashCode;
            }
        }
    }

}
