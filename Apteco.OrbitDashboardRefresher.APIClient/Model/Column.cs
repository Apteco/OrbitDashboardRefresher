/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Apteco.OrbitDashboardRefresher.APIClient.Client.SwaggerDateConverter;

namespace Apteco.OrbitDashboardRefresher.APIClient.Model
{
    /// <summary>
    /// A column to output for every row in the export
    /// </summary>
    [DataContract]
    public partial class Column :  IEquatable<Column>, IValidatableObject
    {
        /// <summary>
        /// Whether to output the codes or descriptions for this column when data is exported to a file
        /// </summary>
        /// <value>Whether to output the codes or descriptions for this column when data is exported to a file</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DetailEnum
        {
            
            /// <summary>
            /// Enum Code for value: Code
            /// </summary>
            [EnumMember(Value = "Code")]
            Code = 1,
            
            /// <summary>
            /// Enum Description for value: Description
            /// </summary>
            [EnumMember(Value = "Description")]
            Description = 2
        }

        /// <summary>
        /// Whether to output the codes or descriptions for this column when data is exported to a file
        /// </summary>
        /// <value>Whether to output the codes or descriptions for this column when data is exported to a file</value>
        [DataMember(Name="detail", EmitDefaultValue=false)]
        public DetailEnum? Detail { get; set; }
        /// <summary>
        /// How to format unclassified values for selector variables
        /// </summary>
        /// <value>How to format unclassified values for selector variables</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnclassifiedFormatEnum
        {
            
            /// <summary>
            /// Enum FromDesign for value: FromDesign
            /// </summary>
            [EnumMember(Value = "FromDesign")]
            FromDesign = 1,
            
            /// <summary>
            /// Enum Empty for value: Empty
            /// </summary>
            [EnumMember(Value = "Empty")]
            Empty = 2
        }

        /// <summary>
        /// How to format unclassified values for selector variables
        /// </summary>
        /// <value>How to format unclassified values for selector variables</value>
        [DataMember(Name="unclassifiedFormat", EmitDefaultValue=false)]
        public UnclassifiedFormatEnum? UnclassifiedFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Column" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Column() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Column" /> class.
        /// </summary>
        /// <param name="id">The id of the column (required).</param>
        /// <param name="variableName">The variable to output in this column.</param>
        /// <param name="query">A query to use to define the column.  Yes and No values will be returned for whether each row matches the query or not.</param>
        /// <param name="columnHeader">The text to use as the column header (required).</param>
        /// <param name="detail">Whether to output the codes or descriptions for this column when data is exported to a file.</param>
        /// <param name="unclassifiedFormat">How to format unclassified values for selector variables.</param>
        /// <param name="userCode">Defines the user code for the column.</param>
        /// <param name="userCodeName">Defines the name of the user code for the column.</param>
        public Column(string id = default(string), string variableName = default(string), Query query = default(Query), string columnHeader = default(string), DetailEnum? detail = default(DetailEnum?), UnclassifiedFormatEnum? unclassifiedFormat = default(UnclassifiedFormatEnum?), string userCode = default(string), string userCodeName = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Column and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "columnHeader" is required (not null)
            if (columnHeader == null)
            {
                throw new InvalidDataException("columnHeader is a required property for Column and cannot be null");
            }
            else
            {
                this.ColumnHeader = columnHeader;
            }
            this.VariableName = variableName;
            this.Query = query;
            this.Detail = detail;
            this.UnclassifiedFormat = unclassifiedFormat;
            this.UserCode = userCode;
            this.UserCodeName = userCodeName;
        }
        
        /// <summary>
        /// The id of the column
        /// </summary>
        /// <value>The id of the column</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The variable to output in this column
        /// </summary>
        /// <value>The variable to output in this column</value>
        [DataMember(Name="variableName", EmitDefaultValue=false)]
        public string VariableName { get; set; }

        /// <summary>
        /// A query to use to define the column.  Yes and No values will be returned for whether each row matches the query or not
        /// </summary>
        /// <value>A query to use to define the column.  Yes and No values will be returned for whether each row matches the query or not</value>
        [DataMember(Name="query", EmitDefaultValue=false)]
        public Query Query { get; set; }

        /// <summary>
        /// The text to use as the column header
        /// </summary>
        /// <value>The text to use as the column header</value>
        [DataMember(Name="columnHeader", EmitDefaultValue=false)]
        public string ColumnHeader { get; set; }



        /// <summary>
        /// Defines the user code for the column
        /// </summary>
        /// <value>Defines the user code for the column</value>
        [DataMember(Name="userCode", EmitDefaultValue=false)]
        public string UserCode { get; set; }

        /// <summary>
        /// Defines the name of the user code for the column
        /// </summary>
        /// <value>Defines the name of the user code for the column</value>
        [DataMember(Name="userCodeName", EmitDefaultValue=false)]
        public string UserCodeName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Column {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VariableName: ").Append(VariableName).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  ColumnHeader: ").Append(ColumnHeader).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  UnclassifiedFormat: ").Append(UnclassifiedFormat).Append("\n");
            sb.Append("  UserCode: ").Append(UserCode).Append("\n");
            sb.Append("  UserCodeName: ").Append(UserCodeName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Column);
        }

        /// <summary>
        /// Returns true if Column instances are equal
        /// </summary>
        /// <param name="input">Instance of Column to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Column input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.VariableName == input.VariableName ||
                    (this.VariableName != null &&
                    this.VariableName.Equals(input.VariableName))
                ) && 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.ColumnHeader == input.ColumnHeader ||
                    (this.ColumnHeader != null &&
                    this.ColumnHeader.Equals(input.ColumnHeader))
                ) && 
                (
                    this.Detail == input.Detail ||
                    (this.Detail != null &&
                    this.Detail.Equals(input.Detail))
                ) && 
                (
                    this.UnclassifiedFormat == input.UnclassifiedFormat ||
                    (this.UnclassifiedFormat != null &&
                    this.UnclassifiedFormat.Equals(input.UnclassifiedFormat))
                ) && 
                (
                    this.UserCode == input.UserCode ||
                    (this.UserCode != null &&
                    this.UserCode.Equals(input.UserCode))
                ) && 
                (
                    this.UserCodeName == input.UserCodeName ||
                    (this.UserCodeName != null &&
                    this.UserCodeName.Equals(input.UserCodeName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.VariableName != null)
                    hashCode = hashCode * 59 + this.VariableName.GetHashCode();
                if (this.Query != null)
                    hashCode = hashCode * 59 + this.Query.GetHashCode();
                if (this.ColumnHeader != null)
                    hashCode = hashCode * 59 + this.ColumnHeader.GetHashCode();
                if (this.Detail != null)
                    hashCode = hashCode * 59 + this.Detail.GetHashCode();
                if (this.UnclassifiedFormat != null)
                    hashCode = hashCode * 59 + this.UnclassifiedFormat.GetHashCode();
                if (this.UserCode != null)
                    hashCode = hashCode * 59 + this.UserCode.GetHashCode();
                if (this.UserCodeName != null)
                    hashCode = hashCode * 59 + this.UserCodeName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
