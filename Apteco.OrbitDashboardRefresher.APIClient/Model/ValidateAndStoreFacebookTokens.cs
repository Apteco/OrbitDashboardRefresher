/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Apteco.OrbitDashboardRefresher.APIClient.Client.SwaggerDateConverter;

namespace Apteco.OrbitDashboardRefresher.APIClient.Model
{
    /// <summary>
    /// ValidateAndStoreFacebookTokens
    /// </summary>
    [DataContract]
    public partial class ValidateAndStoreFacebookTokens :  IEquatable<ValidateAndStoreFacebookTokens>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateAndStoreFacebookTokens" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ValidateAndStoreFacebookTokens() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateAndStoreFacebookTokens" /> class.
        /// </summary>
        /// <param name="appToken">appToken (required).</param>
        /// <param name="pageTokens">pageTokens.</param>
        public ValidateAndStoreFacebookTokens(FacebookToken appToken = default(FacebookToken), List<FacebookToken> pageTokens = default(List<FacebookToken>))
        {
            // to ensure "appToken" is required (not null)
            if (appToken == null)
            {
                throw new InvalidDataException("appToken is a required property for ValidateAndStoreFacebookTokens and cannot be null");
            }
            else
            {
                this.AppToken = appToken;
            }
            this.PageTokens = pageTokens;
        }
        
        /// <summary>
        /// Gets or Sets AppToken
        /// </summary>
        [DataMember(Name="appToken", EmitDefaultValue=false)]
        public FacebookToken AppToken { get; set; }

        /// <summary>
        /// Gets or Sets PageTokens
        /// </summary>
        [DataMember(Name="pageTokens", EmitDefaultValue=false)]
        public List<FacebookToken> PageTokens { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValidateAndStoreFacebookTokens {\n");
            sb.Append("  AppToken: ").Append(AppToken).Append("\n");
            sb.Append("  PageTokens: ").Append(PageTokens).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValidateAndStoreFacebookTokens);
        }

        /// <summary>
        /// Returns true if ValidateAndStoreFacebookTokens instances are equal
        /// </summary>
        /// <param name="input">Instance of ValidateAndStoreFacebookTokens to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidateAndStoreFacebookTokens input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppToken == input.AppToken ||
                    (this.AppToken != null &&
                    this.AppToken.Equals(input.AppToken))
                ) && 
                (
                    this.PageTokens == input.PageTokens ||
                    this.PageTokens != null &&
                    this.PageTokens.SequenceEqual(input.PageTokens)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppToken != null)
                    hashCode = hashCode * 59 + this.AppToken.GetHashCode();
                if (this.PageTokens != null)
                    hashCode = hashCode * 59 + this.PageTokens.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
