/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.OrbitDashboardRefresher.APIClient.Client.SwaggerDateConverter;

namespace Apteco.OrbitDashboardRefresher.APIClient.Model
{
    /// <summary>
    /// Details for the definition of a composition for the audience export screen
    /// </summary>
    [DataContract]
    public partial class ExportCompositionDefinition :  IEquatable<ExportCompositionDefinition>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportCompositionDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExportCompositionDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportCompositionDefinition" /> class.
        /// </summary>
        /// <param name="output">Information about the how the export file will be output (required).</param>
        /// <param name="gridItems">The set of grid items to show in this composition (required).</param>
        public ExportCompositionDefinition(Output output = default(Output), List<GridItem> gridItems = default(List<GridItem>))
        {
            // to ensure "output" is required (not null)
            if (output == null)
            {
                throw new InvalidDataException("output is a required property for ExportCompositionDefinition and cannot be null");
            }
            else
            {
                this.Output = output;
            }
            // to ensure "gridItems" is required (not null)
            if (gridItems == null)
            {
                throw new InvalidDataException("gridItems is a required property for ExportCompositionDefinition and cannot be null");
            }
            else
            {
                this.GridItems = gridItems;
            }
        }
        
        /// <summary>
        /// Information about the how the export file will be output
        /// </summary>
        /// <value>Information about the how the export file will be output</value>
        [DataMember(Name="output", EmitDefaultValue=false)]
        public Output Output { get; set; }

        /// <summary>
        /// The set of grid items to show in this composition
        /// </summary>
        /// <value>The set of grid items to show in this composition</value>
        [DataMember(Name="gridItems", EmitDefaultValue=false)]
        public List<GridItem> GridItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExportCompositionDefinition {\n");
            sb.Append("  Output: ").Append(Output).Append("\n");
            sb.Append("  GridItems: ").Append(GridItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExportCompositionDefinition);
        }

        /// <summary>
        /// Returns true if ExportCompositionDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of ExportCompositionDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExportCompositionDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Output == input.Output ||
                    (this.Output != null &&
                    this.Output.Equals(input.Output))
                ) && 
                (
                    this.GridItems == input.GridItems ||
                    this.GridItems != null &&
                    this.GridItems.SequenceEqual(input.GridItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Output != null)
                    hashCode = hashCode * 59 + this.Output.GetHashCode();
                if (this.GridItems != null)
                    hashCode = hashCode * 59 + this.GridItems.GetHashCode();
                return hashCode;
            }
        }
    }

}
